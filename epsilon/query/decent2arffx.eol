import "../libraries/arff/common.eol";
import "../libraries/decent/common.eol";
import "../libraries/decent/logging.eol";

var selectedType = Native("java.lang.System").getProperty("epsilon.transformation.decent2arffx.type");

var Type = DECENT!ArtifactType.allInstances().select(a|a.name = selectedType).first();
if (Type.isUndefined()) {
	//handle wrong arguments here ?
}

var types = new OrderedSet();
types.add("code");
types.add("Class");
types.add("Method");
types.add("Function");
types.add("Module");

//legacy
var CodeArtifactType = DECENT!ArtifactType.allInstances().select(t|t.name = "code").first();
var ClassArtifactType = DECENT!ArtifactType.allInstances().select(t|t.name = "Class").first();
var MethodArtifactType = DECENT!ArtifactType.allInstances().select(t|t.name = "Method").first();
var FunctionArtifactType = DECENT!ArtifactType.allInstances().select(t|t.name = "Function").first();
var ModuleArtifactType = DECENT!ArtifactType.allInstances().select(t|t.name = "Module").first();

var BugFixCount = ("BugFixCount").getAttribute();
var StartLineAttribute = ("StartLine").getAttribute();
var EndLineAttribute = ("EndLine").getAttribute();
var LinesPreAttribute = ("LinesPre").getAttribute();
var LinesPostAttribute = ("LinesPost").getAttribute();

var LinesPostHitsAttribute = ("LinesPostHits").getAttribute();
var LinesPreHitsAttribute = ("LinesPreHits").getAttribute();

var Model = DECENT!Model.allInstances().first();
  
"Running decent2arffx".log(1);
var start = Native("java.lang.System").currentTimeMillis();

//transferValuesToChildren(); //no longer necessary?

for (type in types) {
	//var Type = DECENT!ArtifactType.allInstances().select(t|t.name = type).first();
	
	processArtifacts(type);

}


//iterateOverArtifacts(MethodArtifactType);
//iterateOverAffectedArtifacts(MethodArtifactType);

var end = Native("java.lang.System").currentTimeMillis();
var duration = end - start;
("Duration: "+duration.toMinutes().round(5)).log(1);

//validateFAMIXCoverage(CodeArtifactType);


operation String printlno() {
	self.println();
}	

operation transferValuesToChildren() {
	//add filters or similar
	//add different strategies
	//default strategy is to just copy them (for hit artifacts)
	
	var attribute = "BugFix.AverageWeight.Local".getAttribute();
	for (s in DECENT!State.allInstances().select(x|x.artifact.type = CodeArtifactType)) {
		var parentValue = s.getValue(attribute);
		for (c in s.children) {
			var content = 0.asDouble();
			if (c.isHit()) {
				content = parentValue.content;				
			}
			c.addValue(attribute, content);
		}
	}
}

operation validateFAMIXCoverage (type:DECENT!ArtifactType) {
	//TODO: need some safety checks...
	var h = false;
	var separator = "\t";
	for (a in Artifact.allInstances().select(x|x.type = type).sortBy(x|x.name)) {
	    var header = "";
	    (a.name).println();
	    for (s in a.states.sortBy(x|x.ID)) {
	    	var LOCvalue = s.values.select(v|v.name = "LOC").first();
	    	var LOC = -1.0;
	    	if (LOCvalue.isDefined()){
		    	LOC = LOCvalue.content;
	    	}
			("  State " + s.ID + " LOC " + LOC).println();
			var childrenLOC = 0.0;
			for (c in a.children) {
				for (cs in c.states.select(x|x.ID = s.ID)) {
					var cLOCvalue = cs.values.select(v|v.name = "LOC").first();
					var cLOC = -1.0;
					if (cLOCvalue.isDefined()) {
						cLOC = cLOCvalue.content;
						childrenLOC = childrenLOC + cLOC;
					}
					("    "+c.name+" State " + s.ID + " LOC " + cLOC).println();
				}
			}
			("  -->State " + s.ID + ": "+childrenLOC+"/"+LOC+" LOC accounted for").println();
		}
	}
}

//use ETL equivalents instead...

operation iterateOverAgents (type:DECENT!ArtifactType) {
    var h = false;
    var separator = ",";
    for (a in Agent.allInstances()) {
        var header = "";
        for (ax in a.activities.select(a|a.state.artifact.type = type)) {
            var output = "";
            for (d in ax.deltas) {
                //(d.onAttribute+" ").print();
                header=header+separator+d.onAttribute.name+'(value)'+separator+d.onAttribute.name+'(new value)'+separator+d.onAttribute.name+'(delta)';
                //(a.name+' '+s.ID+' '+ax.agent.name+' '+ax.date+' '+d.onAttribute.name+' '+d.value.content+' '+d.targetValue.content+' '+d.change).println();
                output=output+separator+d.value.content+separator+d.targetValue.content+separator+d.change;
            }
            //("").println();
            if (not h) {
                ("Artifact"+separator+"StateID"+separator+"Agent"+separator+"ActivityDate"+header).printlno();
                h=true;
            }
            (ax.state.artifact.name+separator+ax.state.ID+separator+a.name+separator+ax.date+''+output).printlno();
        
        }
    }

}


operation DECENT!Activity dumpNonZeroDeltas() : String {
	var output = "Deltas";
	for (v in self.deltas.select(d|d.change <> 0)) {
		output= output + ", " + v.onAttribute.name + " = " + v.change;
	}
	return output;
}


operation DECENT!Activity dumpDeltas() : String {
	var output = "Deltas";
	for (v in self.deltas) {
		output= output + ", " + v.onAttribute.name + " = " + v.change;
	}
	return output;
}

operation Any dumpValues() : String {
	var output = "Values";
	for (v in self.values) {
		output= output + ", " + v.ofAttribute.name + " = " + v.content;
	}
	return output;
}

operation processArtifacts(typeName : String) {
	var type = DECENT!ArtifactType.allInstances().select(t|t.name = typeName).first();
	if (type.isUndefined()) {
		//TODO: check that type is set
		//handle wrong arguments here ?
	}

	var arffx = new ARFFx!Model();
	arffx.name = Model.name+"-artifacts-"+type.name;
	arffx.meta.put("DECENT.ArtifactType", type.name);

	for (a in Artifact.allInstances().select(x|x.type = type).sortBy(x|x.name)) {
		//we exclude first and last states!
	    for (s in a.states.excluding(a.states.first()).excluding(a.states.last()).select(x|x.isHit()).sortBy(x|x.ID)) {

	    	var i = new ARFFx!Instance();
	    	arffx.data.add(i);

			i.addValue('\"'+s.artifact.name.asString()+'\"', "Artifact.Name");
			i.addValue(s.ID.asString(), "Artifact.StateID");
				    	
	    	for (v in s.values.select(x|x.isTypeOf(DECENT!DoubleValue) or x.isTypeOf(DECENT!IntegerValue))) {
				i.addValue(v.content.asString(), "Artifact."+v.name);
	    	}

	        //TODO: note that because of this the last state is not shown!
	        // - workaround this or show target state values
	        for (ax in s.fromActivity) {
		    	for (v in ax.values.select(x|x.isTypeOf(DECENT!DoubleValue) or x.isTypeOf(DECENT!IntegerValue))) {
					i.addValue(v.content.asString(), "Activity."+v.name);
		    	}
		    	for (v in ax.deltas) {
					i.addValue(v.change.asString(), "Delta."+v.onAttribute.name);
		    	}
		    	//TODO: these are notably missing in several places!
		    	if (ax.agentState.isDefined()) {
			    	for (v in ax.agentState.values.select(x|x.isTypeOf(DECENT!DoubleValue) or x.isTypeOf(DECENT!IntegerValue))) {
						//i.addValue(v.content.asString(), "Agent."+v.name);
			    	}
		    	}
			}
	        for (ax in s.activity) {
	        	//TODO: add date meta-data
		    	for (v in ax.values.select(x|x.isTypeOf(DECENT!DoubleValue) or x.isTypeOf(DECENT!IntegerValue))) {
					i.addValue(v.content.asString(), "Activity.Next."+v.name);
		    	}
		    	for (v in ax.deltas) {
					i.addValue(v.change.asString(), "Delta.Next."+v.onAttribute.name);
		    	}
		    	//TODO: these are notably missing in several places!
		    	if (ax.agentState.isDefined()) {
			    	for (v in ax.agentState.values.select(x|x.isTypeOf(DECENT!DoubleValue) or x.isTypeOf(DECENT!IntegerValue))) {
						//i.addValue(v.content.asString(), "Agent."+v.name);
			    	}
		    	}

				i.addValue(ax.targetState.ID.asString(), "Artifact.Next.StateID");
		    	
		    	for (v in ax.targetState.values.select(x|x.isTypeOf(DECENT!DoubleValue) or x.isTypeOf(DECENT!IntegerValue))) {
		    		//TODO this should also be available in the delta actually d.sourceValue / d.targetValue
		    		//but it also covers non-delta values if any? 
					i.addValue(v.content.asString(), "Artifact.Next."+v.name);
		    	}

			}
        	continue;

	        for (ax in s.activity) {
	            var output = "";
	            for (d in ax.deltas) {
	                //(d.onAttribute+" ").print();
	                header=header+separator+d.onAttribute.name+'(value)'+separator+d.onAttribute.name+'(new value)'+separator+d.onAttribute.name+'(delta)';
	                //(a.name+' '+s.ID+' '+ax.agent.name+' '+ax.date+' '+d.onAttribute.name+' '+d.value.content+' '+d.targetValue.content+' '+d.change).println();
	                output=output+separator+d.sourceValue.content+separator+d.targetValue.content+separator+d.change;
	            }
                for (v in ax.state.values) {
	                //(d.onAttribute+" ").print();
	                header=header+separator+v.ofAttribute.name+'(value)';
	                //(a.name+' '+s.ID+' '+ax.agent.name+' '+ax.date+' '+d.onAttribute.name+' '+d.value.content+' '+d.targetValue.content+' '+d.change).println();
	                output=output+separator+v.content;
	            }
	        }
	    }
	}
}
