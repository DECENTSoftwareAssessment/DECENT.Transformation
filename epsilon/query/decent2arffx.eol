import "../libraries/arff/common.eol";
import "../libraries/decent/common.eol";
import "../libraries/decent/logging.eol";

var selectedType = Native("java.lang.System").getProperty("epsilon.transformation.decent2arffx.type");

var Type = DECENT!ArtifactType.allInstances().select(a|a.name = selectedType).first();
if (Type.isUndefined()) {
	//handle wrong arguments here ?
}

var types = new OrderedSet();
types.add("code");
types.add("Class");
types.add("Method");
types.add("Function");
types.add("Module");

//TODO: move to common
var nestedAnonymousClassFilter = "\"[\\w]+\\$[\\d]+.*\"";

//legacy
var CodeArtifactType = DECENT!ArtifactType.allInstances().select(t|t.name = "code").first();
var ClassArtifactType = DECENT!ArtifactType.allInstances().select(t|t.name = "Class").first();
var MethodArtifactType = DECENT!ArtifactType.allInstances().select(t|t.name = "Method").first();
var FunctionArtifactType = DECENT!ArtifactType.allInstances().select(t|t.name = "Function").first();
var ModuleArtifactType = DECENT!ArtifactType.allInstances().select(t|t.name = "Module").first();

var BugFixCount = ("BugFixCount").getAttribute();
var StartLineAttribute = ("StartLine").getAttribute();
var EndLineAttribute = ("EndLine").getAttribute();
var LinesPreAttribute = ("LinesPre").getAttribute();
var LinesPostAttribute = ("LinesPost").getAttribute();

var LinesPostHitsAttribute = ("LinesPostHits").getAttribute();
var LinesPreHitsAttribute = ("LinesPreHits").getAttribute();

var Model = DECENT!Model.allInstances().first();
  
"Running decent2arffx".log(1);
var start = Native("java.lang.System").currentTimeMillis();

//transferValuesToChildren(); //no longer necessary?

for (type in types) {
	("Processing type "+type).log(2);
	processArtifacts(type);
	//processActivities(type);
	processAgents(type);

}


var end = Native("java.lang.System").currentTimeMillis();
var duration = end - start;
("Duration: "+duration.toMinutes().round(5)).log(1);

//validateFAMIXCoverage(CodeArtifactType);


operation String printlno() {
	self.println();
}	

operation transferValuesToChildren() {
	//add filters or similar
	//add different strategies
	//default strategy is to just copy them (for hit artifacts)
	
	var attribute = "BugFix.AverageWeight.Local".getAttribute();
	for (s in DECENT!State.allInstances().select(x|x.artifact.type = CodeArtifactType)) {
		var parentValue = s.getValue(attribute);
		for (c in s.children) {
			var content = 0.asDouble();
			if (c.isHit()) {
				content = parentValue.content;				
			}
			c.addValue(attribute, content);
		}
	}
}

operation validateFAMIXCoverage (type:DECENT!ArtifactType) {
	//TODO: need some safety checks...
	var h = false;
	var separator = "\t";
	for (a in Artifact.allInstances().select(x|x.type = type).sortBy(x|x.name)) {
	    var header = "";
	    (a.name).println();
	    for (s in a.states.sortBy(x|x.ID)) {
	    	var LOCvalue = s.values.select(v|v.name = "LOC").first();
	    	var LOC = -1.0;
	    	if (LOCvalue.isDefined()){
		    	LOC = LOCvalue.content;
	    	}
			("  State " + s.ID + " LOC " + LOC).println();
			var childrenLOC = 0.0;
			for (c in a.children) {
				for (cs in c.states.select(x|x.ID = s.ID)) {
					var cLOCvalue = cs.values.select(v|v.name = "LOC").first();
					var cLOC = -1.0;
					if (cLOCvalue.isDefined()) {
						cLOC = cLOCvalue.content;
						childrenLOC = childrenLOC + cLOC;
					}
					("    "+c.name+" State " + s.ID + " LOC " + cLOC).println();
				}
			}
			("  -->State " + s.ID + ": "+childrenLOC+"/"+LOC+" LOC accounted for").println();
		}
	}
}

operation DECENT!State processTargetState (arffx : ARFFx!Model) {
	//TODO: export as configuration option
	var skipSource = false;
	var p = self.previous.first();
	while (p.isDefined() and not p.isHit()) {
		//TODO: what if more than one?
		p = p.previous.first();
	}
	if (p.isDefined() or skipSource){

    	var i = new ARFFx!Instance();
		arffx.data.add(i);

		i.addValue('\"'+self.artifact.name.asString()+'\"', "Artifact.Name");
		i.addValue(self.ID.asString(), "Artifact.Target.StateID");
		i.addValue('\"'+self.fromActivity.first().agent.name+'\"', "Agent.Name");
			    	
    	for (v in self.values.select(x|x.isTypeOf(DECENT!DoubleValue) or x.isTypeOf(DECENT!IntegerValue))) {
			i.addValue(v.content.asString(), "Artifact.Target."+v.name);
    	}

        var ax = self.fromActivity.first();

    	//TODO: add activity meta-data
    	for (v in ax.values.select(x|x.isTypeOf(DECENT!DoubleValue) or x.isTypeOf(DECENT!IntegerValue))) {
			i.addValue(v.content.asString(), "Activity."+v.name);
    	}

    	for (v in ax.deltas) {
			i.addValue(v.change.asString(), "Artifact.Delta."+v.onAttribute.name);
    	}

    	//TODO: these are notably missing in several places!
    	if (ax.agentState.isDefined()) {
	    	for (v in ax.agentState.values.select(x|x.isTypeOf(DECENT!DoubleValue) or x.isTypeOf(DECENT!IntegerValue))) {
				//i.addValue(v.content.asString(), "Agent."+v.name);
	    	}
    	}

		if (not skipSource) {
			i.addValue(p.ID.asString(), "Artifact.Source.StateID");
	    	
	    	for (v in p.values.select(x|x.isTypeOf(DECENT!DoubleValue) or x.isTypeOf(DECENT!IntegerValue))) {
				i.addValue(v.content.asString(), "Artifact.Source."+v.name);
	    	}
		}
	} else {
	}
}

operation processAgents (typeName:String) {
	var type = DECENT!ArtifactType.allInstances().select(t|t.name = typeName).first();
	if (type.isUndefined()) {
		//TODO: check that type is set
		//handle wrong arguments here ?
		return;
	}

	("Processing agents ...").log(2);

    for (a in Agent.allInstances()) {
		("  Agent " +a.name).log(3);
		var arffx = new ARFFx!Model();
		arffx.name = Model.name+"-agents-"+a.name+"-"+type.name;
		arffx.meta.put("DECENT.ArtifactType", type.name);
		arffx.meta.put("ARFFx.Type", "agent");
		arffx.meta.put("DECENT.Agent.Name", a.name);
		arffx.meta.put("DECENT.Agent.ID", a.ID.asString());

		//logic summary:
		//- exclude first activity (state is undefined)
		//- select activities resulting in hit states on artifacts of desired type only 
		//  - where hit = MGType or 
		//                LinesPreHits.content > 0 or 
		//                LinesPostHits.content > 0

        for (ax in a.activities.select(a|a.state.isDefined() and a.state.artifact.type = type and not a.state.artifact.name.matches(nestedAnonymousClassFilter) and a.targetState.isHit())) {
			ax.targetState.processTargetState(arffx);
        }
    }
}

operation DECENT!Activity dumpNonZeroDeltas() : String {
	var output = "Deltas";
	for (v in self.deltas.select(d|d.change <> 0)) {
		output= output + ", " + v.onAttribute.name + " = " + v.change;
	}
	return output;
}


operation DECENT!Activity dumpDeltas() : String {
	var output = "Deltas";
	for (v in self.deltas) {
		output= output + ", " + v.onAttribute.name + " = " + v.change;
	}
	return output;
}

operation Any dumpValues() : String {
	var output = "Values";
	for (v in self.values) {
		output= output + ", " + v.ofAttribute.name + " = " + v.content;
	}
	return output;
}

//DOES NOT WORK!
operation processActivities(typeName : String) {
	var type = DECENT!ArtifactType.allInstances().select(t|t.name = typeName).first();
	if (type.isUndefined()) {
		//TODO: check that type is set
		//handle wrong arguments here ?
	}

	var arffx = new ARFFx!Model();
	arffx.name = Model.name+"-activities-"+type.name;
	arffx.meta.put("DECENT.ArtifactType", type.name);

	for (a in Artifact.allInstances().select(x|x.type = type).sortBy(x|x.name)) {
		//we exclude first and last states!
		//careful with the filtering here...
//	    for (s in a.states.excluding(a.states.first()).excluding(a.states.last()).select(x|x.isHit() and x.next.first().isHit()).sortBy(x|x.ID)) {
	    for (s in a.states.excluding(a.states.first()).select(x|x.isHit()).sortBy(x|x.ID)) {

	    	var i = new ARFFx!Instance();
	    	arffx.data.add(i);

			i.addValue('\"'+s.artifact.name.asString()+'\"', "Artifact.Name");
			i.addValue(s.ID.asString(), "Artifact.Target.StateID");
	        for (ax in s.fromActivity) {
				i.addValue(ax.state.ID.asString(), "Artifact.State.StateID");
	            for (d in ax.deltas) {
	            	//source and target values are empty!!!
					i.addValue(d.sourceValue.asString(), "Artifact.Source."+d.onAttribute.name);
					i.addValue(d.targetValue.asString(), "Artifact.Target."+d.onAttribute.name);
					i.addValue(d.change.asString(), "Artifact.Delta."+d.onAttribute.name);
	            }
	        }
		}
	}
}

operation processArtifacts(typeName : String) {
	var type = DECENT!ArtifactType.allInstances().select(t|t.name = typeName).first();
	if (type.isUndefined()) {
		//TODO: check that type is set
		//handle wrong arguments here ?
		return;
	}
	
	("Processing artifacts ...").log(2);
	
	var arffx = new ARFFx!Model();
	arffx.name = Model.name+"-artifacts-"+type.name;
	arffx.meta.put("DECENT.ArtifactType", type.name);
	arffx.meta.put("ARFFx.Type", "artifact");

	//logic summary:
	//- exclude first state
	//- select hit states only 
	//  - where hit = MGType or 
	//                LinesPreHits.content > 0 or 
	//                LinesPostHits.content > 0
	//moved to processTargetState
	//- source = p 
	//  - where p = last hit state 
	//  - if source is defined or skipSource = true 
	//    - target = s 
	//      => Target.StateID = s.ID, same for all other Double and Integer values
	//      => last state excluded as well
	//    - for each activity
	//      - add all Double and Integer values
	//      - add all deltas
	//      - TODO: add meta data?
	//      - TODO: add agent state values?
	//    - if skipSource = false
	//      => Source.StateID = s.ID, same for all other Double and Integer values

	for (a in Artifact.allInstances().select(x|x.type = type and not x.name.matches(nestedAnonymousClassFilter)).sortBy(x|x.name)) {
		("  Artifact " +a.name).log(3);
		//we exclude first and last states!
		//careful with the filtering here...
//	    for (s in a.states.excluding(a.states.first()).excluding(a.states.last()).select(x|x.isHit() and x.next.first().isHit()).sortBy(x|x.ID)) {
	    for (s in a.states.excluding(a.states.first()).select(x|x.isHit()).sortBy(x|x.ID)) {
			s.processTargetState(arffx);
	    }
	}
}
