import "../libraries/cfa/common.eol";
import "../libraries/decent/common.eol";
import "../libraries/decent/logging.eol";

	//NOTE: does not work with binary decent for some reason
	//run before cfa2decent
  	"Running shared2cfa".log(1);

  	var start = Native("java.lang.System").currentTimeMillis();
	
	var cfn = CFA!CFN.allInstances().first();
	
  	var WeightFactorAttribute = "WeightFactor".getCFAAttribute();
  	var TotalWeightAttribute = "TotalWeight".getCFAAttribute();
  	var AverageWeightAttribute = "AverageWeight".getCFAAttribute();

	var selectedStrategies = Native("java.lang.System").getProperty("epsilon.transformation.shared2cfa.strategy");

	var strategies = new Native("java.util.LinkedHashMap");
	
	for (strategy in selectedStrategies.split(",")) {
  		switch(strategy){
			case "Shared" : strategies.put(".Shared","Equal split");
			case "Shared.Code" : strategies.put(".Shared.Code","Equal split (code type only)");
			case "Churn" : strategies.put(".Churn","Based on the amount of change");
			case "Churn.Code" : strategies.put(".Churn.Code","Based on the amount of change (code type only)");
			case "Size" : strategies.put(".Size","Based on the size of the artifacts");
			case "Size.Code" : strategies.put(".Size.Code","Based on the size of the artifacts (code type only)");
  			default: ("ERROR: Unknown strategy: "+strategy).log(1);
  		}
  	}	
	
	var baseFactors = cfn.factors.select(f|strategies.keySet().forAll(s|not f.name.endsWith(s)));
	//for (f in baseFactors) {
	//	("  base factor:"+ f.name).println();
	//}
	for (s in strategies.keySet()) {
		for (f in baseFactors) {
		  	var sharedName = f.name+s;
	
	  		if (CFA!Factor.allInstances().select(x|x.name = sharedName).size() = 0) {
				var factor = new CFA!Factor;
				factor.~base = f; //TODO: add to meta-model, also add strategy as a property
				factor.name = sharedName;
				factor.description = f.description + " ("+strategies.get(s)+")";
				cfn.factors.add(factor);
			} else {
				CFA!Factor.allInstances().select(x|x.name = sharedName).first().~base = f;
			}
	  	}

	}

	var shareFactors = cfn.factors.select(f|not strategies.keySet().forAll(s|not f.name.endsWith(s)));
	//for (f in shareFactors) {
	//	("  share factor:"+ f.name).println();
	//}

	for (s in strategies.keySet()) {
		addFactors(s);
	}

	for (f in shareFactors) {
  		resetTotalWeights(f);
		calculateTotalFactorWeights(f);
	}
	calculateAverageFactorWeights();
	
    var end = Native("java.lang.System").currentTimeMillis();
    var duration = end - start;
    ("Duration: "+duration.toMinutes().round(5)).log(1);

operation addFactors(strategy:String) {
    ("Strategy: "+strategy).log(2);
	if (strategy = ".Shared") {
		addSharedFactors(strategy);
	}
	else if (strategy = ".Shared.Code") {
		addSharedTypeFactors(strategy, "code");
	}
	else if (strategy = ".Churn") {
		addSharedChurnFactors(strategy);
	}
	else if (strategy = ".Churn.Code") {
		addSharedChurnTypeFactors(strategy, "code");
	}
	else if (strategy = ".Size") {
		addSharedSizeFactors(strategy);
	}
	else if (strategy = ".Size.Code") {
		addSharedSizeTypeFactors(strategy, "code");
	}
	else {
    	("ERROR: Unknown Strategy:" + strategy).log(1);
	}
}

operation addSharedSizeTypeFactors(strategy : String, type : String) {

	for (s in CFA!GlobalState.allInstances) {
  		var splitCount = 1.asDouble();
  		s.addSharedFactors(splitCount, strategy);
	}
	for (s in CFA!ArtifactState.allInstances()) {
		//TODO: fix the inverses as they are largely unnecessary
  		//inverse as it is divided by the global factor
  		var splitCount = 0.asDouble();
  		if (s.getSizesSum()<>0) {
	  		splitCount = s.globalState.getSizesSum(type)/s.getSizesSum(); 
   		} else {
	  		(s.file.file_name + " at " + s.ID + " had " + s.getSizesSum() + " size (missing size information?)").log(1);
  		}
  		//(s.file.file_name +" at "+ s.ID + " : " +s.globalState.getSizesSum(type) +"/"+s.getSizesSum() + " = " + splitCount + " => " + 1.asDouble()/splitCount).println();
  		s.addSharedFactors(splitCount, strategy, type);
	}
	for (s in CFA!LogicalState.allInstances) {
  		//inverse as it is divided by the global factor
  		var splitCount = s.getTypeSizesSum()/s.getSizesSum(); 
  		s.addSharedFactors(splitCount, strategy);
	}
}


operation addSharedSizeFactors(strategy : String) {

	for (s in CFA!GlobalState.allInstances) {
  		var splitCount = 1.asDouble();
  		s.addSharedFactors(splitCount, strategy);
	}
	for (s in CFA!ArtifactState.allInstances()) {
  		//inverse as it is divided by the global factor
  		var splitCount = 0.asDouble();
  		if (s.getSizesSum()<>0) {
	  		splitCount = s.globalState.getSizesSum()/s.getSizesSum(); 
   		} else {
	  		(s.file.file_name + " at " + s.ID + " had " + s.getSizesSum() + " size (missing size information?)").log(1);
  		}
  		//TODO: check rounding errors
  		s.addSharedFactors(splitCount, strategy);
	}
	for (s in CFA!LogicalState.allInstances) {
  		//inverse as it is divided by the global factor
  		var splitCount = s.getTypeSizesSum()/s.getSizesSum(); 
  		s.addSharedFactors(splitCount, strategy);
	}
}


operation addSharedChurnTypeFactors(strategy : String, type : String) {

	for (s in CFA!GlobalState.allInstances) {
  		var splitCount = 1.asDouble();
  		s.addSharedFactors(splitCount, strategy);
	}
	for (s in CFA!ArtifactState.allInstances()) {
  		//inverse as it is divided by the global factor
  		var splitCount = 0.asDouble();
  		if (s.getPatchLinesSum()<>0) {
  			splitCount = s.globalState.getPatchLinesSum(type)/s.getPatchLinesSum(); 
  		} else {
	  		(s.file.file_name + " at " + s.ID + " had " + s.getPatchLinesSum() + " changed lines (missing patch information?)").log(1);
  		}
  		s.addSharedFactors(splitCount, strategy, type);
	}
	for (s in CFA!LogicalState.allInstances) {
  		//inverse as it is divided by the global factor
  		var splitCount = s.getTypePatchLinesSum()/s.getPatchLinesSum(); 
  		s.addSharedFactors(splitCount, strategy);
	}
}


operation addSharedChurnFactors(strategy : String) {

	for (s in CFA!GlobalState.allInstances) {
  		var splitCount = 1.asDouble();
  		s.addSharedFactors(splitCount, strategy);
	}
	for (s in CFA!ArtifactState.allInstances()) {
  		//inverse as it is divided by the global factor
  		var splitCount = 0.asDouble();
  		if (s.getPatchLinesSum()<>0) {
  			splitCount = s.globalState.getPatchLinesSum()/s.getPatchLinesSum(); 
	  		//(s.file.file_name + " at " + s.ID + " : " + s.getPatchLinesSum() + " / "+s.globalState.getPatchLinesSum() + " = " + splitCount + "==>"+1.asDouble()/splitCount).log(1);
  		} else {
	  		(s.file.file_name + " at " + s.ID + " had " + s.getPatchLinesSum() + " changed lines (missing patch information?)").log(1);
  		}
  		
  		s.addSharedFactors(splitCount, strategy);
	}
	for (s in CFA!LogicalState.allInstances) {
  		//inverse as it is divided by the global factor
  		var splitCount = s.getTypePatchLinesSum()/s.getPatchLinesSum(); 
  		s.addSharedFactors(splitCount, strategy);
	}
}


@cached
operation CFA!GlobalState getSizesSum(type : String) : Real {
	return self.revision.content.select(x|x.file.file_type = type).collect(x|x.loc).sum().asDouble();
}

@cached
operation CFA!GlobalState getSizesSum() : Real {
	return self.revision.content.collect(x|x.loc).sum().asDouble();
}

@cached
operation CFA!ArtifactState getSizesSum() : Real {
	return self.globalState.revision.content.select(x|x.file = self.file).collect(x|x.loc).sum().asDouble();
}

@cached
operation CFA!LogicalState getTypeSizesSum() : Real {
	return self.globalState.logicalStates.select(x|x.artifact.type = self.artifact.type).collect(x|x.getSizesSum()).sum().asDouble();
}

@cached
operation CFA!LogicalState getSizesSum() : Real {
	var size = self.state.getValue("MX.EndLine").content - self.state.getValue("MX.StartLine").content + 1; 
	return size.asDouble();
}


@cached
operation CFA!GlobalState getPatchLinesSum(type : String) : Real {
	return self.revision.patchLines.select(x|x.file.file_type = type).collect(x|x.added + x.removed).sum().asDouble();
}

@cached
operation CFA!GlobalState getPatchLinesSum() : Real {
	return self.revision.patchLines.collect(x|x.added + x.removed).sum().asDouble();
}

@cached
operation CFA!ArtifactState getPatchLinesSum() : Real {
	return self.globalState.revision.patchLines.select(x|x.file = self.file).collect(x|x.added + x.removed).sum().asDouble();
}

@cached
operation CFA!LogicalState getTypePatchLinesSum() : Real {
	return self.globalState.logicalStates.select(x|x.artifact.type = self.artifact.type).collect(x|x.getPatchLinesSum()).sum().asDouble();
}

@cached
operation CFA!LogicalState getPatchLinesSum() : Real {
	var post = self.state.getValue("HITS.LinesPostHits").content.size();
	var pre = self.state.getValue("HITS.LinesPreHits").content.size();
	return (pre+post).asDouble();
}

operation addSharedTypeFactors(strategy : String, type : String) {

	for (s in CFA!GlobalState.allInstances) {
  		var splitCount = 1.asDouble();
  		s.addSharedFactors(splitCount, strategy);
	}
	for (s in CFA!ArtifactState.allInstances()) {
  		var splitCount = s.globalState.getArtifactSplitCount(type);
  		s.addSharedFactors(splitCount, strategy, type);
	}
	for (s in CFA!LogicalState.allInstances) {
  		var splitCount = s.globalState.getLogicalSplitCount(s.artifact.type);
  		s.addSharedFactors(splitCount, strategy);
	}
}


operation addSharedFactors(strategy : String) {
	for (s in CFA!GlobalState.allInstances) {
  		var splitCount = 1.asDouble();
  		s.addSharedFactors(splitCount, strategy);
	}
	for (s in CFA!ArtifactState.allInstances) {
  		var splitCount = s.globalState.getArtifactSplitCount();
  		s.addSharedFactors(splitCount, strategy);
	}
	for (s in CFA!LogicalState.allInstances) {
  		var splitCount = s.globalState.getLogicalSplitCount(s.artifact.type);
  		s.addSharedFactors(splitCount, strategy);
	}
}

operation CFA!CFAState addChurnFactors(splitCount : Real, strategy : String) {
	for (f in CFA!CFN.allInstances().first().getStrategyFactors(strategy)) {
  		var baseWeightFactor = self.getBaseWeightFactor(f);
  		var weightFactor = 0.asDouble(); 
  		if (splitCount <> 0) {
  			weightFactor = baseWeightFactor/splitCount;
  			//TODO: handle else differently? assign 1?
  		}
		self.addFactor(f, weightFactor);
	}
}


operation CFA!CFAState addSharedFactors(splitCount : Real, strategy : String) {
	for (f in CFA!CFN.allInstances().first().getStrategyFactors(strategy)) {
  		var baseWeightFactor = self.getBaseWeightFactor(f);
  		var weightFactor = 0.asDouble(); 
  		if (splitCount <> 0) {
  			weightFactor = baseWeightFactor/splitCount;
  			//TODO: handle else differently? assign 1?
  		}
		self.addFactor(f, weightFactor);
	}
}

operation CFA!CFAState addSharedFactors(splitCount : Real, strategy : String, type : String) {
	for (f in CFA!CFN.allInstances().first().getStrategyFactors(strategy)) {
  		var baseWeightFactor = self.getBaseWeightFactor(f);
  		var weightFactor = 0.asDouble(); 
  		if (self.matchesType(type) and splitCount <> 0) {
  			weightFactor = baseWeightFactor/splitCount;
  			//TODO: handle else differently? assign 1?
  		}
		self.addFactor(f, weightFactor);
	}
}


@cached
operation CFA!CFN getStrategyFactors(strategy : String) : Collection {
	return self.factors.select(f|f.name.endsWith(strategy));
}

@cached
operation CFA!GlobalState getBaseWeightFactor(sharedFactor : CFA!Factor) : Real {
	return self.factors.get(sharedFactor.~base).get(WeightFactorAttribute);
}
@cached
operation CFA!ArtifactState getBaseWeightFactor(sharedFactor : CFA!Factor) : Real {
	return self.globalState.getBaseWeightFactor(sharedFactor);
}
@cached
operation CFA!LogicalState getBaseWeightFactor(sharedFactor : CFA!Factor) : Real {
	return self.globalState.getBaseWeightFactor(sharedFactor);
}


@cached
operation CFA!GlobalState getArtifactSplitCount() : Real {
	return self.artifactStates.size().asDouble();
}

@cached
operation CFA!GlobalState getArtifactSplitCount(type : String) : Real {
	return self.artifactStates.select(a|a.file.file_type = type).size().asDouble();
}


//TODO: do we also need a split for artifact/logical.count?
@cached
operation CFA!GlobalState getLogicalSplitCount(type : DECENT!ArtifactType) : Real {
	return self.logicalStates.select(x|x.artifact.type = type).size().asDouble();
}
	
	
@cached
operation CFA!ArtifactState matchesType(type : String) : Boolean {
	return self.file.file_type = type;
}
	