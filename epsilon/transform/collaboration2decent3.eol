import "../libraries/decent/common.eol";
import "../libraries/decent/logging.eol";

var step = "collaboration2decent3"; 
("Running "+step).log(1);

var start = Native("java.lang.System").currentTimeMillis();

var Model = DECENT!Model.allInstances().first();

//ArtifactState

var SAL = addAttribute("COL.SAL","True if the developer in the target state is the same the developer in the source state");
var ACC = addAttribute("COL.ACC","Number of developers working on the artifact up to the current state");
var ACR = addAttribute("COL.ACR","Ratio of developers working on the artifact up to the current state to all the active developers up to the current state");
var FCCR = addAttribute("COL.FCCR","Fractal distribution of ACCR");

//only with respect to the present artifact
//TODO: expand to cover all artifacts of the type
var CBLA = addAttribute("COL.CBLA","Collaborations between developer in the target state the developer in the source state");
var RBLA = addAttribute("COL.RBLA","Ratio of collaborations between developer in the target state the developer in the source state to collaborations between developer in the target state and all other collaborators of the developer (in)");

//DeveloperState

var ICC = addAttribute("Agent.COL.ICC","Indirect Collaborator Count: Number of developers working on known artifacts up to the current state");
var DCC = addAttribute("Agent.COL.DCC","Direct Collaborator Count: Number of distinct developers that were authors of the source states the developer worked on");
var DCCR = addAttribute("Agent.COL.DCCR","Mean state ownerships ratio based on fractal values");
var DCR = addAttribute("Agent.COL.DCR","Direct Collaborator Ratio: Ratio of developers that the developer has directly collaborated with");
var ICR = addAttribute("Agent.COL.ICR","Indirect Collaborator Ratio: Ratio of developers that the developer has indirectly collaborated with");
var DIR = addAttribute("Agent.COL.DIR","Direct to Indirect Collaborator Ratio");


var nestedAnonymousClassFilter = "\"[\\w]+\\$[\\d]+.*\"";

processArtifacts();
//TODO: run also for general case?
processAgents();

var end = Native("java.lang.System").currentTimeMillis();
var duration = end - start;
Model.content.add(step);
Model.addStep(step,duration.toMinutes().round(5));

("Duration: "+duration.toMinutes().round(5)).log(1);


operation processAgents(type : DECENT!ArtifactType) {
	var ICCt = ICC;
	var DCCt = DCC;
	var DCCRt = DCCR;
	var DCRt = DCR;
	var ICRt = ICR;
	var DIRt = DIR;

	if (not type.isUndefined()) {
		ICCt = addAttribute(ICC.name+"."+type.name,ICC.description+" ("+type.name+")");
		DCCt = addAttribute(DCC.name+"."+type.name,DCC.description+" ("+type.name+")");
		DCCRt = addAttribute(DCCR.name+"."+type.name,DCCR.description+" ("+type.name+")");		
		DCRt = addAttribute(DCR.name+"."+type.name,DCR.description+" ("+type.name+")");
		ICRt = addAttribute(ICR.name+"."+type.name,ICR.description+" ("+type.name+")");
		DIRt = addAttribute(DIR.name+"."+type.name,DIR.description+" ("+type.name+")");
	}
	var agents = DECENT!Agent.allInstances();
	for (a in agents.sortBy(x|x.name)) {
		if (not type.isUndefined()) {
			("Processing [agent] "+a.name + " for type " +type.name).log(2);
		} else {
			("Processing [agent] "+a.name + " for all types ").log(2);
		}		
		var collaborators = new Native("java.util.LinkedHashMap");
		
		for (s in a.states.sortBy(x|x.ID)) {
			var stateOwnershipRatios = new Sequence();

			//TODO: state or targetState?
			var activities = s.activities.select(x|x.targetState.isHit() 
				and not x.targetState.artifact.name.matches(nestedAnonymousClassFilter)
				and x.targetState.artifact.type == type
				);
			if (activities.size() > 0) {
				("  ["+type+"] @ "+s.ID).log(4);
				for (ax in activities) {
					var artifact = ax.targetState.artifact;
					var last = null;
					for (sx in artifact.states.select(x|x.isHit()
							and x.previous.first().isDefined() 
							and x.fromActivity.first().date.time < ax.date.time
							)
					) {
						var agent = sx.fromActivity.first().agentState.agent;
						if (not collaborators.containsKey(agent)) {
							var entry = new Native("java.util.LinkedHashMap");
							collaborators.put(agent,entry);
							collaborators.get(agent).put("count",1);
							collaborators.get(agent).put("LA.count",0);
						} else {
							var collaborations = collaborators.get(agent).get("count");
							collaborators.get(agent).put("count",collaborations+1);
						}
						last = sx;
						//("    " + sx.artifact.name + " @ "+ sx.ID + " -> " + sx.previous.first().ID + " : "+ sx.getValue(FCCR).content).log(4);
						stateOwnershipRatios.add(sx.getValue(FCCR).content);
					}
					if (last.isDefined()) {
						var agent = last.fromActivity.first().agentState.agent;
						var collaborations = collaborators.get(agent).get("LA.count");
						collaborators.get(agent).put("LA.count",collaborations+1);
					}
				}
				var icc = collaborators.size().asDouble();
				s.addValue(ICCt,icc);
				
				var dcc = collaborators.select(x|x.get("LA.count") > 0).size().asDouble();
				s.addValue(DCCt,dcc);
				
				var ardt = 0.asDouble();
				ardt = stateOwnershipRatios.getFractalValue();
				s.addValue(DCCRt,ardt);
				
				var dc = s.ID.getDeveloperCount();
				s.addValue(DCRt,dcc/dc);
				s.addValue(ICRt,icc/dc);
				s.addValue(DIRt,dcc/icc);
			} else {
				//defaults in case no activity was performed in the state on a certain type of artifact
				//TODO: check if reasonable - may create some noise
				s.addValue(ICCt,0.asDouble());
				s.addValue(DCCt,0.asDouble());
				s.addValue(DCCRt,0.asDouble());
				s.addValue(DCRt,0.asDouble());
				s.addValue(ICRt,0.asDouble());
				s.addValue(DIRt,0.asDouble());
			}

		}
		collaborators.clear();
	}
}


operation processArtifacts() {
	var artifacts = DECENT!Artifact.allInstances().select(x|not x.name.matches(nestedAnonymousClassFilter)).sortBy(x|x.name);
	
	for (a in artifacts) {
		("Processing ["+a.type.name+"] "+a.name).log(2);
		var collaborators = new Native("java.util.LinkedHashMap");
		var states = a.states.select(x|x.isHit()).sortBy(x|x.ID);
		for (s in states) {
			var p = s.previous.first();
			while (p.isDefined() and not p.isHit()) {
				//TODO: what if more than one?
				p = p.previous.first();
			}
			if (p.isDefined()){
				var agent = s.fromActivity.first().agentState.agent;
				var previousAgent = p.fromActivity.first().agentState.agent;
				("  ["+a.type.name+":"+a.name+"] @ "+p.ID +" -> "+s.ID).log(3);	
				//("    "+p.fromActivity.first().agentState.agent.name +" -> "+agent.name).println();
	
				if (not collaborators.containsKey(agent)) {
					var entry = new Native("java.util.LinkedHashMap");
					collaborators.put(agent,entry);
					collaborators.get(agent).put("count",1);
					collaborators.get(agent).put("previousAuthors",new Sequence());
				} else {
					var experience = collaborators.get(agent).get("count");
					collaborators.get(agent).put("count",experience+1);
				}
				collaborators.get(agent).get("previousAuthors").add(previousAgent);
				var sameAuthor = (previousAgent == agent);
				s.addValue(SAL, sameAuthor.asString());	
	
				var collaboratorCount = states.select(x|x.ID <= s.ID).collect(x|x.fromActivity.first().agentState.agent).asSet().size();
				s.addValue(ACC, collaboratorCount.asDouble());
				
				s.addValue(FCCR, collaborators.collect(x|x.values.collect(y|y.get("count"))).first().getFractalValue());

				var developerCount = s.ID.getDeveloperCount();
				s.addValue(ACR, collaboratorCount/developerCount);
	
				//TODO: a rather narrow approach, further possibilities to be explored
				//only with respect to the present artifact
				//TODO: expand to cover all artifacts of the type
				var collaborationsWithLastAuthor = collaborators.get(agent).get("previousAuthors").select(x|x = previousAgent).size();
				s.addValue(CBLA, collaborationsWithLastAuthor.asDouble());
				
				//only with respect to the present artifact
				//TODO: expand to cover all artifacts of the type
				var collaborationsWithLastAuthorRatio = 0.asDouble();
				var authorExperience = states.select(x|x.fromActivity.first().agentState.agent = agent and x.ID <= s.ID).size();
				
				if (authorExperience > 0) {
					collaborationsWithLastAuthorRatio = collaborationsWithLastAuthor.asDouble()/authorExperience;
				}
				s.addValue(RBLA, collaborationsWithLastAuthorRatio);
	
			} else {
				("  No previous state for ["+a.type.name+":"+a.name+"] @ "+s.ID).log(2);
				s.addValue(SAL, "false");	
				s.addValue(ACC, 0.asDouble());
				s.addValue(ACR, 0.asDouble());
				s.addValue(CBLA, 0.asDouble());
				s.addValue(RBLA, 0.asDouble());
				
				s.addValue(FCCR, 0.asDouble());
			}
		}
		collaborators.clear();
	}
}

operation processAgents() {
	for (t in DECENT!ArtifactType.allInstances().sortBy(x|x.name)) {
		processAgents(t);
	}
}

@cached
operation Integer getDeveloperCount() : Integer {
	return DECENT!AgentState.allInstances().select(s|s.ID <= self).collect(s|s.agent).size();
}
