import "../libraries/decent/common.eol";
import "../libraries/decent/logging.eol";

"Running hits2decent ".log(1);
var start = Native("java.lang.System").currentTimeMillis();
//TODO: could also be integrated back into famix2decent as inline checking 
//to further filter out unchanged elements 

var Model = DECENT!Model.allInstances().first();

var attributes = new Map;
attributes.put("LinesPostHits","Changed lines within artifact in resulting state");
attributes.put("LinesPreHits","Changed lines within artifact in context state");

Model.addAttributes(attributes);  

var ClassArtifactType = DECENT!ArtifactType.allInstances().select(t|t.name = "Class").first();
var MethodArtifactType = DECENT!ArtifactType.allInstances().select(t|t.name = "Method").first();
var FunctionArtifactType = DECENT!ArtifactType.allInstances().select(t|t.name = "Function").first();
var ModuleArtifactType = DECENT!ArtifactType.allInstances().select(t|t.name = "Module").first();
var StartLineAttribute = DECENT!Attribute.allInstances().select(a|a.name = "StartLine").first();
var EndLineAttribute = DECENT!Attribute.allInstances().select(a|a.name = "EndLine").first();
var LinesPreAttribute = DECENT!Attribute.allInstances().select(a|a.name = "LinesPre").first();
var LinesPostAttribute = DECENT!Attribute.allInstances().select(a|a.name = "LinesPost").first();
var LinesPostHitsAttribute = DECENT!Attribute.allInstances().select(a|a.name = "LinesPostHits").first();
var LinesPreHitsAttribute = DECENT!Attribute.allInstances().select(a|a.name = "LinesPreHits").first();

var existingStatesInRevision = DECENT!State.allInstances().select(s|
									s.artifact.type = ClassArtifactType or 
  									s.artifact.type = MethodArtifactType or 
  									s.artifact.type = ModuleArtifactType or 
  									s.artifact.type = FunctionArtifactType);
for (s in existingStatesInRevision) {
	("Processing "+s.artifact.name+" at "+s.ID+" ...").log(1);
	var startLine = s.values.select(v|v.ofAttribute = StartLineAttribute).first().content;
	var endLine = s.values.select(v|v.ofAttribute = EndLineAttribute).first().content;
	var parentState = s.artifact.parent.states.select(p|p.ID = s.ID).first();
	var linesPost = parentState.values.select(v|v.ofAttribute = LinesPostAttribute).first().content;
	var linesPostHits = linesPost.select(l|l >= startLine and l <= endLine);

/*
	("  "+s.artifact.name+"@"+s.ID+":"+startLine+ ":"+endLine).log(1);
	("    "+parentState.artifact.name+"@"+parentState.ID+":"+startLine+ ":"+endLine).log(1);
	("      "+linesPost).log(1);
	("        "+linesPostHits).log(1);
*/	
	s.values.removeAll(s.values.select(v|v.ofAttribute = LinesPostHitsAttribute));
	s.addIntegerCollectionValue(LinesPostHitsAttribute, linesPostHits);
	
	var p = s.previous.first();
	if (p.isDefined()) {
		var p_startLine = p.values.select(v|v.ofAttribute = StartLineAttribute).first().content;
		var p_endLine = p.values.select(v|v.ofAttribute = EndLineAttribute).first().content;
	
		var linesPre = parentState.values.select(v|v.ofAttribute = LinesPreAttribute).first().content;
		var linesPreHits = linesPre.select(l|l >= p_startLine and l <= p_endLine);
		s.values.removeAll(s.values.select(v|v.ofAttribute = LinesPreHitsAttribute));
		s.addIntegerCollectionValue(LinesPreHitsAttribute, linesPreHits);
	}
}

Model.content.add("hits2decent3");

var end = Native("java.lang.System").currentTimeMillis();
var duration = end - start;
("Duration: "+duration.toMinutes().round(5)).log(1);
