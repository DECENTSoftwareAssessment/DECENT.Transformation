import "../libraries/decent/common.eol";
import "../libraries/decent/logging.eol";

var step = "hits2decent3"; 
("Running "+step).log(1);

var start = Native("java.lang.System").currentTimeMillis();
//TODO: could also be integrated back into famix2decent as inline checking 
//to further filter out unchanged elements 

var Model = DECENT!Model.allInstances().first();

var LinesPostHitsAttribute = addAttribute("HITS.LinesPostHits","Changed lines within artifact in resulting state");
var LinesPreHitsAttribute = addAttribute("HITS.LinesPreHits","Changed lines within artifact in context state");

var ClassArtifactType = DECENT!ArtifactType.allInstances().select(t|t.name = "Class").first();
var MethodArtifactType = DECENT!ArtifactType.allInstances().select(t|t.name = "Method").first();
var FunctionArtifactType = DECENT!ArtifactType.allInstances().select(t|t.name = "Function").first();
var ModuleArtifactType = DECENT!ArtifactType.allInstances().select(t|t.name = "Module").first();
var StartLineAttribute = "MX.StartLine".getAttribute();
var EndLineAttribute = "MX.EndLine".getAttribute();
var LinesPreAttribute = "VCS.LinesPre".getAttribute();
var LinesPostAttribute = "VCS.LinesPost".getAttribute();

var VarianceLinesPreAttribute = "SP.VLB".getAttribute();
var VarianceLinesPostAttribute = "SP.VLA".getAttribute();


var existingStatesInRevision = DECENT!State.allInstances().select(s|
									s.artifact.type = ClassArtifactType or 
  									s.artifact.type = MethodArtifactType or 
  									s.artifact.type = ModuleArtifactType or 
  									s.artifact.type = FunctionArtifactType);
for (s in existingStatesInRevision) {
	("Processing "+s.artifact.name+" at "+s.ID+" ...").log(3);
	var startLine = s.getValue(StartLineAttribute).content;
	var endLine = s.getValue(EndLineAttribute).content;
	var linesPost = s.parent.getValue(LinesPostAttribute).content;
	var linesPostHits = linesPost.select(l|l >= startLine and l <= endLine);

/*
	("  "+s.artifact.name+"@"+s.ID+":"+startLine+ ":"+endLine).log(1);
	("    "+parentState.artifact.name+"@"+parentState.ID+":"+startLine+ ":"+endLine).log(1);
	("      "+linesPost).log(1);
	("        "+linesPostHits).log(1);
*/	
	s.addIntegerCollectionValue(LinesPostHitsAttribute, linesPostHits);
	s.addValue(VarianceLinesPostAttribute, linesPostHits.getVariance());	
	
	var linesPreHits = new OrderedSet;
	var p = s.previous.first();
	if (p.isDefined()) {
		var p_startLine = p.getValue(StartLineAttribute).content;
		var p_endLine = p.getValue(EndLineAttribute).content;
	
		var linesPre = s.parent.getValue(LinesPreAttribute).content;
		linesPreHits = linesPre.select(l|l >= p_startLine and l <= p_endLine);
	}
	s.addIntegerCollectionValue(LinesPreHitsAttribute, linesPreHits);
	s.addValue(VarianceLinesPreAttribute, linesPreHits.getVariance());	
}

var end = Native("java.lang.System").currentTimeMillis();
var duration = end - start;
Model.content.add(step);
Model.addStep(step,duration.toMinutes().round(5));
("Duration: "+duration.toMinutes().round(5)).log(1);
