import "../libraries/decent/common.eol";
import "../libraries/decent/logging.eol";

pre dagInitPre {

  //Some initialization
  //More generic (might be simplified)
  "Running dag2decent v3".log(1);
  var start = Native("java.lang.System").currentTimeMillis();
  /********************************** INIT (1x) *******************************/
  var Model = DECENT!Model.allInstances().first();
}

post dagInitPost{
  //DONE: Note that this doesn't work as it is a global graph
  //artifact states are a projection on this graph and it would be 
  //more appropriate to assemble these projections which would 
  //probably result in the very same sequence of states as the one
  //produced by the sequence of actions 
  
  //TODO: The DAG is nonetheless potentially relevant for the 
  //CFA analysis or at least some variations thereof
  ("Post processing... ").log(1);
  //checkCorrectStateSequence();
  assignAgentStateSequence();
  assignAgentStatesToActivities();
  
  //TODO: add to all other transformations
  var end = Native("java.lang.System").currentTimeMillis();
  var duration = end - start;
  ("Duration: "+duration.toMinutes().round(5)).log(1);
  
  
  Model.content.add("dag2decent3");
}

//TODO: this should be elsewhere
//TODO: may need to add initial state
//NOTE: given a set of activities resulting in target artifact states with ID=N
//      an agent is said to be in an agent state with ID=N when they performed 
//      these activities resulting in them moving to agent state with ID=M after
//		these activities were peformed while obtaining experience delta(E(M,N) as 
// 		a result, where E(M) is defined as a set of values describing the agent in 
//		agent state with ID=M and E(N) is a set of values describing the agent in
//		agent state with ID=N.
//		Consequently, an agent does not have "final" state, but rather only a 
//		state in which they performed the last observed activities, with the 
//		experience obtained from these activities not being considered as there are
//		no further activities where this experience would play a role.
//		However, this experience may need to be considered when evaluating the 
//		overall experience of a developer.		 
operation Any assignAgentStatesToActivities() {
  ("Adding agent states to activities... ").log(1);
  for (s in DECENT!AgentState.allInstances()) {
  	s.activities.clear();
  }
  
  for (a in DECENT!Agent.allInstances()) {
  	("  Agent: "+a.name).log(1);
  	for (s in a.states) {
  		if (s.previous.isDefined()) {
	  		s.previous.activities.addAll(a.activities.select(ax|ax.targetState.ID = s.ID));
  		}
  	}
  }
}


operation DAG!Node findPreviousStateInParentNodes(state : DECENT!AgentState) {
	state.previous = state.agent.states.select(x|x.name = self.name).first();
	if (self.parents.size() > 0 and state.previous.isUndefined()) {
		for (p in self.parents) {
			p.findPreviousStateInParentNodes(state);
		}
	}
}

operation DAG!Node findPreviousStateNodeInParentNodes(parent : DAG!Node) : DAG!Node {
	var node;
	if (self.parents.size() > 0 and self <> parent) {
		for (p in self.parents) {
			node = p.findPreviousStateNodeInParentNodes(parent);
			if (node.isDefined()) {
				return node; //break;
			}
		}
	} 
	if (self = parent) {
		node = self;
	}
	return node;
}


operation Any assignAgentStateSequence() {
  ("Adding agent state sequence... ").log(1);
  for (s in DECENT!AgentState.allInstances()) {
  	s.previous = null;
  }
  
  var nodes = DAG!Graph.allInstances().first.nodes;
  for (a in DECENT!Agent.allInstances()) {
  	("  Agent: "+a.name).log(1);
  	for (s in a.states) {
		var node = nodes.select(n|n.name = s.name).first();
		node.findPreviousStateInParentNodes(s);
		if (not s.previous.isDefined()) {
			(    "Failed to assign previous state for state "+s.ID+"!").errln();
			(    "Corresponding node has "+node.parents.size()+" parents!").errln();
		}
  	}
  }
}

operation Any checkCorrectStateSequence() {
  ("Checking correct artifact state sequences... ").log(1);
  var nodes = DAG!Graph.allInstances().first.nodes;
  for (a in DECENT!Artifact.allInstances()) {
  	("  Artifact: "+a.name).log(1);
  	for (s in a.states) {
		var node = nodes.select(n|n.name = s.name).first();
		for (p in s.previous) {
				var parentNode = nodes.select(n|n.name = p.name).first();
			
			var currentNodeX = node.findPreviousStateNodeInParentNodes(parentNode);
			if (not currentNodeX.isDefined()) {
				(    "Failed to find previous state node in node parents tree for state "+s.ID+"!").errln();
			}
		}
  	}
  }
}