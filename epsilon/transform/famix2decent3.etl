import "../libraries/decent/common.eol";

pre {
  //Some initialization
  "Running famix2decent3".println();
  ("DECENT States: "+DECENT!State.allInstances().size()).println();
  var Model = DECENT!Model.allInstances().first();
  
  var CodeArtifactType = DECENT!ArtifactType.allInstances().select(t|t.name = "code").first();
  var ClassArtifactType = DECENT!ArtifactType.allInstances().select(t|t.name = "Class").first();
  var MethodArtifactType = DECENT!ArtifactType.allInstances().select(t|t.name = "Method").first();
  var FunctionArtifactType = DECENT!ArtifactType.allInstances().select(t|t.name = "Function").first();
  var ModuleArtifactType = DECENT!ArtifactType.allInstances().select(t|t.name = "Module").first();
  var FileAnchorAttribute = DECENT!Attribute.allInstances().select(t|t.name = "FileAnchor").first();
  var FilePathAttribute = DECENT!Attribute.allInstances().select(t|t.name = "FilePath").first();

  //TODO: this is effectively moved to hits2decent
  var attributes = new Map;
  attributes.put("StartLine", "Artifact start line");
  attributes.put("EndLine", "Artifact end line");
  
  Model.addAttributes(attributes);

  var LinesPostHitsAttribute = DECENT!Attribute.allInstances().select(a|a.name = "LinesPostHits").first();
  var StartLineAttribute = DECENT!Attribute.allInstances().select(a|a.name = "StartLine").first();
  var EndLineAttribute = DECENT!Attribute.allInstances().select(a|a.name = "EndLine").first();
  var LinesPreAttribute = DECENT!Attribute.allInstances().select(a|a.name = "LinesPre").first();
  var LinesPostAttribute = DECENT!Attribute.allInstances().select(a|a.name = "LinesPost").first();


  
  var revisionId = -1;
  var potentiallyAffectedClasses = new OrderedSet;
  var potentiallyAffectedMethods = new OrderedSet;
  
  var codeStatesInRevision = new OrderedSet;
  var cleaned = false;
   
  if (FAMIX!FileAnchor.allInstances().size() > 0) {
	  revisionId = FAMIX!FileAnchor.allInstances().first().revisionId;
	  potentiallyAffectedClasses = FAMIX!Class.getPotentiallyAffectedAnchoredElements();
	  potentiallyAffectedMethods = FAMIX!Method.getPotentiallyAffectedAnchoredElements();
	  ("FAMIX Classes in "+revisionId + ": "+potentiallyAffectedClasses.size()+"/"+FAMIX!Class.allInstances().size()).println();
	  ("FAMIX Methods in "+revisionId + ": "+potentiallyAffectedMethods.size()+"/"+FAMIX!Class.allInstances().size()).println();
	  codeStatesInRevision = DECENT!State.allInstances().select(s|s.ID = revisionId and s.artifact.type = CodeArtifactType);
	  ("DECENT Code States in "+revisionId + ": "+codeStatesInRevision.size()).println();
	  for (s in codeStatesInRevision) {
	    ("  Changed state of Code artifact " + s.values.select(v|v.ofAttribute = FilePathAttribute).first().content).println();
	  }
	
	  var existingStatesInRevision = DECENT!State.allInstances().select(s|s.ID = revisionId and 
	  								   (s.artifact.type = ClassArtifactType or 
	  									s.artifact.type = MethodArtifactType or 
	  									s.artifact.type = ModuleArtifactType or 
	  									s.artifact.type = FunctionArtifactType));
	  ("Existing DECENT Anchored Element States in "+revisionId + ": "+existingStatesInRevision.size()).println();
	  var fromActivities = new OrderedSet;
	  for (s in existingStatesInRevision) {
	  	cleaned = true;
	    ("  Cleaning up existing state " + s.ID +" of artifact " + s.artifact.name + " ("+s.artifact.type.name+")").println();
	    for (a in s.fromActivity) {
	    	fromActivities.add(a);
	    }
	  	delete s;
	  }
	  for (a in fromActivities) {
	  	delete a;
	  }
  	  //TODO: consider generating separate decent instances for each revision (or a set of revisinos) which may be 
  	  //handled as a resource set
  }
}

post {
	("Updating broken activities...").println();
	("DECENT Code States in "+revisionId + ": "+codeStatesInRevision.size()).println();
	
	//top down approach potentially inefficient
	if (cleaned) { 
	    //for all states of affected code artifacts
	    for (cs in codeStatesInRevision) {
			("  State of "+cs.artifact.name + " at " + cs.ID).println();
		    //for all next states of an affected code artifact
		  	for (next in cs.next) {
		  		("    Next state of "+next.artifact.name + " at " + next.ID).println();
		  		//for all children of affected code artifact 
		  		for (child in cs.artifact.children) {
		  			("      Child of "+next.artifact.name + " - " + child.name).println();
		  			//get newly added state of child
		  			for (current in child.states.select(s|s.ID = revisionId).first()) {
		  				if (current.isDefined()) {
			  				("        State of "+current.artifact.name + " at " + current.ID).println();
				  			//for all states of the child of the affected artifact corresponding to the next state of that artifact
				  			for (s in child.states.select(s|s.ID = next.ID)) {
				  				("          Next state of "+s.artifact.name + " at " + s.ID).println();
				  				s.previous.add(current);
				  				//update broken activities
							    for (a in s.fromActivity.select(a|a.state = null)) {
							    	("            Fixing activity on "+current.ID +" to "+s.ID + " of "+s.artifact.name).println();
							    	a.state = current;
							    	for (d in a.deltas) {
							    		d.sourceValue = current.values.select(v|v.ofAttribute = d.onAttribute).first();
							    	}
							    }
				  			}
		  				}
		  			}
		  			
		  		}
	    	}
		}
	}
	//TODO: add hits labeling as a post processing step (with an option for on-the-fly filering as a guard)
	//- add affected lines in decent (from mg)
	//- startLine = s.values.select(v|v.ofAttribute = StartLineAttribute).first().content
	//- endLine = s.values.select(v|v.ofAttribute = EndLineAttribute).first().content
	//or 
	//- startLine = e.anchor.startLine
	//- endLine = e.anchor.endLine
	//then
	//- select(l|l >= startLine and l <= endLine)
	Model.content.add("famix2decent3@"+revisionId);
	
}

operation Any getPotentiallyAffectedAnchoredElements() : Sequence {
	return self.allInstances.select(c|c.sourceAnchor_IN_FileAnchor.fileName <> "_unknown_path" and checkParentArtifactStateExists(c.revisionId, c.sourceAnchor_IN_FileAnchor.fileName));
}

operation checkParentArtifactStateExists(stateId : Integer, filePath : String) : Boolean {
	var count = DECENT!State.allInstances().select(s|s.ID = stateId and s.artifact.type = CodeArtifactType and s.values.select(v|v.ofAttribute = FilePathAttribute).first().content = filePath).size();
	//("---- "+count+" states for artifacts located in "+filePath+" at "+stateId).println();
	return count > 0;
}

operation DECENT!State mapAnchoredElement(c : FAMIX!AnchoredElement, artifactType : DECENT!ArtifactType, name : String) {
    var fileName = c.sourceAnchor_IN_FileAnchor.fileName;
    ("Transforming "+artifactType.name+" " +name +" at revision "+c.revisionId+" located in "+fileName).println();

    //("  File Anchor at "+fileName).println();
    var candidateParentStates = DECENT!State.allInstances().select(s|s.ID = c.revisionId  and s.artifact.type = CodeArtifactType and s.values.select(v|v.ofAttribute = FilePathAttribute).first().content = fileName);
    //("    Candidate Parent States Count: "+candidateParentStates.size()).println();
    //TODO: what if more than one?
    var parent = candidateParentStates.first().artifact;
    //("      Candidate Parent Artifact: "+parent.name).println();
    var candidateArtifacts = parent.children.select(child|child.name = name and child.type = artifactType);
    var artifact = null;
    if (candidateArtifacts.size() > 0) {
        //("      Candidate Artifacts: "+candidateArtifacts.size()).println();
        //TODO: what if more than one?
        artifact = candidateArtifacts.first();
    } else {
        artifact = new DECENT!Artifact;
        artifact.name = name;
        artifact.type = artifactType;
        artifact.parent = parent;
    }

    var lastState = null; 

    if (artifact.states.size() > 0) {
    	//TODO: what if more than one?
    	var parentPrevious = candidateParentStates.first().previous.first();
    	if (parentPrevious.isDefined()) {
	    	lastState = artifact.states.select(s|s.ID = parentPrevious.ID).first();
	        //lastState = artifact.states.last();
	        if (lastState.isDefined()) {
		        self.previous.add(lastState);
	        } 
    	}
    }

    self.name = candidateParentStates.first().name;
    self.ID = c.revisionId;
    artifact.states.add(self);

    self.addValue(FileAnchorAttribute, c.sourceAnchor_IN_FileAnchor.fileName+":"+c.sourceAnchor_IN_FileAnchor.startLine+":"+c.sourceAnchor_IN_FileAnchor.endLine);
    self.addValue(StartLineAttribute, c.sourceAnchor_IN_FileAnchor.startLine);
    self.addValue(EndLineAttribute, c.sourceAnchor_IN_FileAnchor.endLine);

    //TODO: keep in mind the parent states may be more than one
    var activity = new DECENT!Activity;
    activity.state = lastState;            
    activity.targetState = self;
    //TODO: need to properly select corresponding parent activity, this is only the naive approach
    var parentArtifactActivity = candidateParentStates.first().fromActivity.first();
    activity.date = parentArtifactActivity.date;
    activity.type = parentArtifactActivity.type;
    activity.agent = parentArtifactActivity.agent;
    
    for (attr in c.eClass().getEAllAttributes()) {
        var attribute = DECENT!Attribute.allInstances().
            select(a|a.name = attr.getName()).first(); 
        if (not attribute.isDefined()){
            attribute = new DECENT!Attribute;
            attribute.name = attr.getName();
            
            if (Model.attributePool.attributes.select(a|a.name = attr.getName()).size() = 0) {
                Model.attributePool.attributes.add(attribute);
            }
            attribute.artifactTypes.add(artifactType);
        }
        //TODO: needs to be checked when using multiple revisions to avoid adding multiple instances
        //OR: try and see whether the "unique" takes care of that => doesn't seem to be the case'
        if (artifact.attributes.select(a|a.name = attr.getName()).size() = 0) {
            artifact.attributes.add(attribute);
        }
        
        if ((attr.getEAttributeType().getName() == "EDouble")) {
            self.addValue(attribute, c.eGet(attr));
            activity.addDelta(attribute);
        }
    }
}

rule Class2State
    transform c : FAMIX!Class 
    to s : DECENT!State {
    
    guard : c.sourceAnchor_IN_FileAnchor.fileName <> "_unknown_path" and checkParentArtifactStateExists(c.revisionId, c.sourceAnchor_IN_FileAnchor.fileName)

    s.mapAnchoredElement(c, ClassArtifactType, c.name);
    c.~done = true;
    (FAMIX!Class.allInstances().select(c|c.~done == true).size()+"/"+potentiallyAffectedClasses.size() + " done").println();

}

rule Module2State 
    transform m : FAMIX!Module 
    to s : DECENT!State {
    guard {
        var parentPackageName = m.parentPackage_IN_Package.first().name;
        var modulePath = m.name;
        if (parentPackageName.length() > 0) {
            modulePath = parentPackageName.substring(1)+"/"+m.name;
        }
        return m.name <> "_unknown_file" and checkParentArtifactStateExists(m.revisionId, modulePath); 
    }

    //create a temparary anchor
    var anchor : new FAMIX!FileAnchor;
    anchor.revisionId = m.revisionId;

    var parentPackageName = m.parentPackage_IN_Package.first().name;
    var modulePath = m.name;
    if (parentPackageName.length() > 0) {
        modulePath = parentPackageName.substring(1)+"/"+m.name;
    }

    anchor.fileName = modulePath;
    //TODO: add start and endlines from file
    anchor.anchoredElement = m;
    s.mapAnchoredElement(m, ModuleArtifactType, m.name);

}


rule Function2State 
    transform f : FAMIX!Function 
    to s : DECENT!State {
    guard : f.sourceAnchor_IN_FileAnchor.fileName <> "_unknown_path" and checkParentArtifactStateExists(f.revisionId, f.sourceAnchor_IN_FileAnchor.fileName)

    s.mapAnchoredElement(f, FunctionArtifactType, f.signature);

    //TODO: with regard to methods and functions, these need to be filtered based on whether they are affected by an activity 
    //(via hunks/hits algorithm)
}

rule Method2State 
    transform m : FAMIX!Method 
    to s : DECENT!State {
    //SOOOOOOOOOO..... class definitions are typically within h files, while method definitinos are within cpp files
    //the whole situation is a lot more messed up than that, but this is the gist of it
    //which makes the case for direct artifact containment next to impossible
    //instead a different relationship will be necessary
    //as for transformation, it should be based solely on file anchors and then this relationship should be reestablished


    //TODO: also note that if the class is attached to the header and the header is not 
    //modified this will essentially break everything since there will be no states even for methods
    //as the containing classes will not be mapped either
    //THUS treat them separately, check for discrepancies and report them (or deal with them somehow) 
    //WHICH also means that the transformations shall be mostly very similar based on the file anchors

    guard : m.sourceAnchor_IN_FileAnchor.fileName <> "_unknown_path" and checkParentArtifactStateExists(m.revisionId, m.sourceAnchor_IN_FileAnchor.fileName)

    s.mapAnchoredElement(m, MethodArtifactType, m.signature);

    m.~done = true;
    (FAMIX!Method.allInstances().select(m|m.~done == true).size()+"/"+potentiallyAffectedMethods.size() + " done").println();   
}

