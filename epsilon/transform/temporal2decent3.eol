import "../libraries/decent/common.eol";
import "../libraries/decent/logging.eol";

  "Running temporal2decent".log(1);
  var start = Native("java.lang.System").currentTimeMillis();

  var Model = DECENT!Model.allInstances().first();

  var attributes = new Map;

  attributes.put("AbsoluteTime","Set of distances to the beginning of time");
  attributes.put("RelativeTime","Set of distances to the first state");
  attributes.put("DistanceTime","Set of distances to previous states");

  attributes.put("AbsoluteTimeVariance","Variance of distances to the beginning of time");
  attributes.put("RelativeTimeVariance","Variance of distances to the first state");
  attributes.put("DistanceTimeVariance","Variance of distances to previous states");

  attributes.put("Revisions","Current number of revisions");
  attributes.put("Lifespan","Lifespan of artifact");
  attributes.put("Age","Age of artifact in state");
  attributes.put("Distance","Distance to previous state");

  attributes.put("DistanceAverage","Average distance between states");
  attributes.put("DistanceRunningAverage","Running average distance between states");
  
  attributes.put("Frequency","Frequency of changes (=Revisions-1/Age)");
  attributes.put("FrequencyAverage","Frequency average (=All Revisions-1/Lifespan)");
  attributes.put("FrequencyDistanceToAverage","Frequency distance to average (=Frequency-FrequencyAverage)");

  Model.addAttributes(attributes);

  var AbsoluteTimeAttribute = "AbsoluteTime".getAttribute();
  var RelativeTimeAttribute = "RelativeTime".getAttribute();
  var DistanceTimeAttribute = "DistanceTime".getAttribute();

  var AbsoluteTimeVarianceAttribute = "AbsoluteTimeVariance".getAttribute();
  var RelativeTimeVarianceAttribute = "RelativeTimeVariance".getAttribute();
  var DistanceTimeVarianceAttribute = "DistanceTimeVariance".getAttribute();

  var RevisionsAttribute = "Revisions".getAttribute();
  var LifespanAttribute = "Lifespan".getAttribute();
  var AgeAttribute = "Age".getAttribute();
  var DistanceAttribute = "Distance".getAttribute();

  var DistanceAverageAttribute = "DistanceAverage".getAttribute();
  var DistanceRunningAverageAttribute = "DistanceRunningAverage".getAttribute();

  
  var FrequencyAttribute = "Frequency".getAttribute();
  var FrequencyAverageAttribute = "FrequencyAverage".getAttribute();
  var FrequencyDistanceToAverageAttribute = "FrequencyDistanceToAverage".getAttribute();


  //TODO: other temporal dimensions such as cause-fix time, agent time, bug lifetime vs fragment lifetime, etc.
  ("Adding temporal characteristics...").log(2);
  for (a in DECENT!Artifact.allInstances().select(a|a.states.size > 0)) {
  	
  	("  Artifact: "+a.name).log(3);
  	//TODO: may need to convert to days already here at the expense of flexibility downstream
  	//- alternatively, this can be generalized so that the same can be calculated based on hits for other artifacts
  	
  	//consider adding the sorting as indicated below, 
  	//keep in mind that all other deltas are based on the default ordering, 
  	//thus temporal ordering causes inconsistencies with the rest 
  	//var sortedStates = a.states.sortBy(s|s.fromActivity.first().date.time);
  	var sortedStates = a.states; 
  	sortedStates.addArtifactTemporalCharacteristics();
  }


  //temporal characteristics for agents
  //clean up  
  for (a in DECENT!Agent.allInstances()) {
  	("  Agent: "+a.name).log(3);
  	
  	var sortedStates = a.states; 
  	sortedStates.addAgentTemporalCharacteristics();
	
	//TODO: future approach
	var revisions = 0;
  	for (s in sortedStates) {
  		revisions = revisions + 1;

		//TODO: this should be migrated to addValue
  		var v = new DECENT!DoubleValue();
  		v.content = revisions.asDouble();
  		s.valuesMap.put(RevisionsAttribute, v);
  	}
  }
  

  Model.content.add("temporal2decent3");

  var end = Native("java.lang.System").currentTimeMillis();
  var duration = end - start;
  ("Duration: "+duration.toMinutes().round(5)).log(1);


operation OrderedSet addAgentTemporalCharacteristics() {
  	var timeCreated = self.first().date.time;
  	var lifespan =  self.last().date.time - timeCreated;
  	var revisions = 0;
  	var previousStateTime = timeCreated;
  	var absoluteTime = new Sequence;
  	var relativeTime = new Sequence;
  	var distanceTime = new Sequence;
  	var resolution = 24*60*60*1000;//days*hours*minutes*seconds
  	//resolution = 60*1000;//minutes*seconds

  	//TODO: filter hits only 
  	//TODO: navigate via previous/next
  	for (s in self) {
	 	for (a in attributes.keySet()) {
			s.values.removeAll(s.values.select(v|v.ofAttribute.name = a));
		}
  		//TODO: technically lifespan does not need to be included
  		//TODO: difference can also be inferred from age delta
  		//TODO: the interesting part would be the deltas in the 
  		//      frequency as shifting gears between faster and 
  		//      slower speed occurs
  		//TODO: keep in mind that changes in temporal order due to branching may create artifacts
  		
  		//TODO: this increment may need to be moved to the end or initialized with -1
  		//      given the logic behind agent states
  		//TODO: other characteristics may need to be adjusted as well
  		revisions = revisions + 1;
  		s.addValue(RevisionsAttribute, revisions.asDouble());
  		s.addValue(LifespanAttribute, lifespan.asDouble()/resolution);

  		var age = (s.date.time - timeCreated).asDouble()/resolution;
  		s.addValue(AgeAttribute, age);
  		
  		var distance = (s.date.time - previousStateTime).asDouble()/resolution;
  		s.addValue(DistanceAttribute, distance);

  		var distanceAverage = (lifespan/(self.size().asDouble()-1)).asDouble();
  		s.addValue(DistanceAverageAttribute, distanceAverage);

  		var distanceRunningAverage = (age/revisions).asDouble();
  		s.addValue(DistanceRunningAverageAttribute, distanceRunningAverage);

		var frequency = ((revisions.asDouble()-1)/age).asDouble();
  		s.addValue(FrequencyAttribute, frequency);
  		
  		var frequencyAverage = ((self.size().asDouble()-1)/(lifespan.asDouble()/resolution)).asDouble();
  		s.addValue(FrequencyAverageAttribute, frequencyAverage);

  		s.addValue(FrequencyDistanceToAverageAttribute, frequency-frequencyAverage);
  		
  		absoluteTime.add(s.date.time.asDouble()/resolution);
  		s.addDoubleCollectionValue(AbsoluteTimeAttribute, absoluteTime);
  		s.addValue(AbsoluteTimeVarianceAttribute, absoluteTime.getVariance());

		relativeTime.add((s.date.time - timeCreated).asDouble()/resolution);
  		s.addDoubleCollectionValue(RelativeTimeAttribute, relativeTime);
		s.addValue(RelativeTimeVarianceAttribute, relativeTime.getVariance());
		
		distanceTime.add((s.date.time - previousStateTime).asDouble()/resolution);
  		s.addDoubleCollectionValue(DistanceTimeAttribute, distanceTime);
		s.addValue(DistanceTimeVarianceAttribute, distanceTime.getVariance());		
  		
  		previousStateTime = s.date.time;
	}
}

//TODO: add date to states
//TODO: move deltas outside
//TODO: unify with agent states
operation OrderedSet addArtifactTemporalCharacteristics() {
  	var timeCreated = self.first().fromActivity.first().date.time;
  	var lifespan =  self.last().fromActivity.first().date.time - timeCreated;
  	var revisions = 0;
  	var previousStateTime = timeCreated;
  	var absoluteTime = new Sequence;
  	var relativeTime = new Sequence;
  	var distanceTime = new Sequence;
  	var resolution = 24*60*60*1000;//days*hours*minutes*seconds
  	//resolution = 60*1000;//minutes*seconds

  	//TODO: filter hits only 
  	//TODO: navigate via previous/next
  	for (s in self) {
	 	for (a in attributes.keySet()) {
			s.values.removeAll(s.values.select(v|v.ofAttribute.name = a));
		}
  		//TODO: technically lifespan does not need to be included
  		//TODO: difference can also be inferred from age delta
  		//TODO: the interesting part would be the deltas in the 
  		//      frequency as shifting gears between faster and 
  		//      slower speed occurs
  		//TODO: keep in mind that changes in temporal order due to branching may create artifacts
  		revisions = revisions + 1;
  		s.addValue(RevisionsAttribute, revisions.asDouble());
  		s.addValue(LifespanAttribute, lifespan.asDouble()/resolution);

  		var age = (s.fromActivity.first().date.time - timeCreated).asDouble()/resolution;
  		s.addValue(AgeAttribute, age);
  		
  		var distance = (s.fromActivity.first().date.time - previousStateTime).asDouble()/resolution;
  		s.addValue(DistanceAttribute, distance);

  		var distanceAverage = (lifespan/(self.size().asDouble()-1)).asDouble();
  		s.addValue(DistanceAverageAttribute, distanceAverage);

  		var distanceRunningAverage = (age/revisions).asDouble();
  		s.addValue(DistanceRunningAverageAttribute, distanceRunningAverage);

		var frequency = ((revisions.asDouble()-1)/age).asDouble();
  		s.addValue(FrequencyAttribute, frequency);
  		
  		var frequencyAverage = ((self.size().asDouble()-1)/(lifespan.asDouble()/resolution)).asDouble();
  		s.addValue(FrequencyAverageAttribute, frequencyAverage);

  		s.addValue(FrequencyDistanceToAverageAttribute, frequency-frequencyAverage);
  		
  		absoluteTime.add(s.fromActivity.first().date.time.asDouble()/resolution);
  		s.addDoubleCollectionValue(AbsoluteTimeAttribute, absoluteTime);
  		s.addValue(AbsoluteTimeVarianceAttribute, absoluteTime.getVariance());

		relativeTime.add((s.fromActivity.first().date.time - timeCreated).asDouble()/resolution);
  		s.addDoubleCollectionValue(RelativeTimeAttribute, relativeTime);
		s.addValue(RelativeTimeVarianceAttribute, relativeTime.getVariance());
		
		distanceTime.add((s.fromActivity.first().date.time - previousStateTime).asDouble()/resolution);
  		s.addDoubleCollectionValue(DistanceTimeAttribute, distanceTime);
		s.addValue(DistanceTimeVarianceAttribute, distanceTime.getVariance());

		//selected deltas
		var activity = s.fromActivity.first();
		activity.addDelta(AgeAttribute); //effectively =difference
		activity.addDelta(DistanceAttribute); //indicate difference to last distance +slower/-faster
		activity.addDelta(DistanceRunningAverageAttribute); 
		activity.addDelta(FrequencyAttribute); 
		activity.addDelta(FrequencyDistanceToAverageAttribute); 
		
  		previousStateTime = s.fromActivity.first().date.time;
  	}
}