import "../libraries/decent/common.eol";
import "../libraries/decent/logging.eol";

  var step = "temporal2decent3"; 
  ("Running "+step).log(1);
  
  var start = Native("java.lang.System").currentTimeMillis();

  var Model = DECENT!Model.allInstances().first();

  var resolution = Native("java.lang.System").getProperty("epsilon.transformation.temporals.resolution").asDouble();
  var attributeGroups = Native("java.lang.System").getProperty("epsilon.transformation.temporals.groups").split(",");
  
  //Sets
  var AbsoluteTimeAttribute = addAttribute("AbsoluteTime","Set of distances to the beginning of time");
  var RelativeTimeAttribute = addAttribute("RelativeTime","Set of distances to the first state");
  var DistanceTimeAttribute = addAttribute("DistanceTime","Set of distances to previous states");

  //Variances
  var AbsoluteTimeVarianceAttribute = addAttribute("TM.VAGEx","Variance of distances to the beginning of time"); // AbsoluteTimeVariance / Discard
  var RelativeTimeVarianceAttribute = addAttribute("TM.VAGE","Variance of distances to the first state"); // RelativeTimeVariance
  var DistanceTimeVarianceAttribute = addAttribute("TM.VDIST","Variance of distances to previous states"); // DistanceTimeVariance
  
  //Basic
  var RevisionsAttribute = addAttribute("TM.NOS","Current number of revisions");//TM.NOS / Revisions
  var LifespanAttribute = addAttribute("TM.LS","Lifespan of artifact");//Discard? / TM.LS / Lifespan
  var AgeAttribute = addAttribute("TM.AGE","Age of artifact in state");//TM.AGE / Age
  var DistanceAttribute = addAttribute("TM.DIST","Distance to previous state");//TM.DIST, TM.AGE.delta / Distance
  var ProjectAgeAttribute = addAttribute("TM.PAGE","Age of artifact in state with regard to project start");//TM.PAGE / Age

  var DistanceAverageAttribute = addAttribute("TM.TADIST","Average distance between states"); //TM.TADIST / DistanceAverage - Discard, based on lifetime?
  var DistanceRunningAverageAttribute = addAttribute("TM.ADIST","Running average distance between states"); // TM.RADIST DistanceRunningAverage
  
  //Frequencies
  var FrequencyAttribute = addAttribute("TM.FREQ","Frequency of changes (=Revisions-1/Age)"); //Frequency / TM.FREQ
  var FrequencyAverageAttribute = addAttribute("TM.TAFREQ","Frequency average (=All Revisions-1/Lifespan)"); //Discard? FrequencyAverage / TM.TAFREQ 
  var FrequencyDistanceToAverageAttribute = addAttribute("TM.FDAF","Frequency distance to average (=Frequency-FrequencyAverage)"); //Discard? / FrequencyDistanceToAverage / TM.FDAF

  var firstStates = DECENT!AgentState.allInstances().select(s|s.previous.isUndefined()).sortBy(s|s.date.time);
  for (s in firstStates) {
  	(s.agent.name + " @ " + s.ID + " "+ s.date).log(3);
  }  
  var projectStart = firstStates.first().date.time;

  //TODO: other temporal dimensions such as cause-fix time, agent time, bug lifetime vs fragment lifetime, etc.
  ("Adding temporal characteristics...").log(2);
  for (a in DECENT!Artifact.allInstances().select(a|a.states.size > 0)) {
  	
  	("  Artifact: "+a.name).log(3);
  	//TODO: may need to convert to days already here at the expense of flexibility downstream
  	//- alternatively, this can be generalized so that the same can be calculated based on hits for other artifacts
  	
  	//consider adding the sorting as indicated below, 
  	//keep in mind that all other deltas are based on the default ordering, 
  	//thus temporal ordering causes inconsistencies with the rest 
  	//var sortedStates = a.states.sortBy(s|s.fromActivity.first().date.time);
  	var sortedStates = a.states; 
  	sortedStates.addTemporalCharacteristics();
  }


  //temporal characteristics for agents
  //clean up  
  for (a in DECENT!Agent.allInstances().select(a|a.states.size > 0)) {
  	("  Agent: "+a.name).log(3);
  	
  	var sortedStates = a.states; 
  	sortedStates.addTemporalCharacteristics();
  }
  

  var end = Native("java.lang.System").currentTimeMillis();
  var duration = end - start;
  Model.content.add(step);
  Model.addStep(step,duration.toMinutes().round(5));
  ("Duration: "+duration.toMinutes().round(5)).log(1);


operation OrderedSet addTemporalCharacteristics() {
  	var timeCreated = self.first().getTime();
  	var lifespan =  self.last().getTime() - timeCreated;
  	var revisions = 0;
  	var previousStateTime = timeCreated;
  	var absoluteTime = new Sequence;
  	var relativeTime = new Sequence;
  	var distanceTime = new Sequence;

  	//TODO: filter hits only 
  	//TODO: navigate via previous/next
  	for (s in self) {
  		//TODO: technically lifespan does not need to be included
  		//TODO: difference can also be inferred from age delta
  		//TODO: the interesting part would be the deltas in the 
  		//      frequency as shifting gears between faster and 
  		//      slower speed occurs
  		//TODO: keep in mind that changes in temporal order due to branching may create artifacts
  		
  		//TODO: this increment may need to be moved to the end or initialized with -1
  		//      given the logic behind agent states
  		//TODO: other characteristics may need to be adjusted as well
  		revisions = revisions + 1;
  		var page = (s.getTime() - projectStart).asDouble()/resolution;
  		var age = (s.getTime() - timeCreated).asDouble()/resolution;
  		var distance = (s.getTime() - previousStateTime).asDouble()/resolution;
  		var distanceAverage = (lifespan/(self.size().asDouble()-1)).asDouble();
  		var distanceRunningAverage = (age/revisions).asDouble();

		if (attributeGroups.contains("Basic")) {
	  		s.addValue(RevisionsAttribute, revisions.asDouble());
	  		s.addValue(LifespanAttribute, lifespan.asDouble()/resolution);
	  		s.addValue(AgeAttribute, age);
	  		s.addValue(DistanceAttribute, distance);
	  		s.addValue(ProjectAgeAttribute, page);
	
	  		s.addValue(DistanceAverageAttribute, distanceAverage);
	  		s.addValue(DistanceRunningAverageAttribute, distanceRunningAverage);
		}
		
		var frequency = ((revisions.asDouble()-1)/(age)).asDouble();
  		var frequencyAverage = ((self.size().asDouble()-1)/(lifespan.asDouble()/resolution)).asDouble();

		if (attributeGroups.contains("Frequencies")) {
	  		s.addValue(FrequencyAttribute, frequency);
	  		s.addValue(FrequencyAverageAttribute, frequencyAverage);
	  		s.addValue(FrequencyDistanceToAverageAttribute, frequency-frequencyAverage);
		}
		
		if (attributeGroups.contains("Sets") or attributeGroups.contains("Variances")) {
	  		absoluteTime.add(s.getTime().asDouble()/resolution);
	  		//age
			relativeTime.add((s.getTime() - timeCreated).asDouble()/resolution);
			//distance
			distanceTime.add((s.getTime() - previousStateTime).asDouble()/resolution);
		}
				
		if (attributeGroups.contains("Sets")) {
	  		s.addDoubleCollectionValue(AbsoluteTimeAttribute, absoluteTime);
	  		s.addDoubleCollectionValue(RelativeTimeAttribute, relativeTime);
	  		s.addDoubleCollectionValue(DistanceTimeAttribute, distanceTime);
		}
		
		if (attributeGroups.contains("Variances")) {
	  		s.addValue(AbsoluteTimeVarianceAttribute, absoluteTime.getVariance());
			s.addValue(RelativeTimeVarianceAttribute, relativeTime.getVariance());
			s.addValue(DistanceTimeVarianceAttribute, distanceTime.getVariance());		
		}  		
  		previousStateTime = s.getTime();
	}
}
