import "../libraries/mg/common.eol";
import "../libraries/decent/common.eol";
import "../libraries/decent/logging.eol";

pre mgInitPre {

  //Some initialization
  //More generic (might be simplified)
  //TODO: may be exported to a separate module
  //("System "+System.getContext().getModule()).log(1);
  var step = "mg2decent3"; 
  ("Running "+step).log(1);
  var start = Native("java.lang.System").currentTimeMillis();
  /********************************** INIT (1x) *******************************/
  
  var Model : new DECENT!Model;
  Model.name = MG!Model.allInstances().first().name;
  Model.artifactTypeHierarchy = new DECENT!ArtifactTypeHierarchy;
  Model.agentPool = new DECENT!AgentPool;
  Model.attributePool = new DECENT!AttributePool;
  //Model.projects = new List;
  
  var BranchArtifactType = new DECENT!ArtifactType;
  BranchArtifactType.name = "Branch";
  Model.artifactTypeHierarchy.types.add(BranchArtifactType);
    
  var FilePathAttribute = addAttribute("VCS.FilePath","File path");
  var BranchAttribute = addAttribute("VCS.Branch","Branch name");
  var FileSizeAttribute = addAttribute("VCS.FileSize","File size in bytes");
  var LOCAttribute = addAttribute("VCS.LOC","Lines of code");
  var LinesAddedAttribute = addAttribute("VCS.LinesAdded","Lines added");
  var LinesRemovedAttribute = addAttribute("VCS.LinesRemoved","Lines removed");
  var TagsAttribute = addAttribute("VCS.Tags","Assigned tags");
  var TagsCountAttribute = addAttribute("VCS.TagsCount","Number of assigned tags");
  var AggregateFragmentCountAttribute = addAttribute("VCS.AggregateFragmentCount","");
  var FragmentCountAttribute = addAttribute("SP.NAF","Number of fragments");
  var HunkCountAttribute = addAttribute("VCS.HunkCount","Number of changed fragments");
  var FragmentsAttribute = addAttribute("VCS.Fragments","Fragments");
  var VarianceFragmentsAttribute = addAttribute("SP.VAF","Variance of all fragments");
  var ChangedFragmentsAttribute = addAttribute("VCS.ChangedFragments","Changed fragments");
  var SP_NCF = addAttribute("SP.NCF","Number of changed fragments");
  var SP_VCF = addAttribute("SP.VCF","Variance of changed fragments");
  var MessageAttribute = addAttribute("VCS.Message","Commit message");
  var LinesPreAttribute = addAttribute("VCS.LinesPre","Affected lines from the previous state");
  var LinesPostAttribute = addAttribute("VCS.LinesPost","Affected lines in the resulting state");
  var LinesMergedAttribute = addAttribute("VCS.LinesMerged","Affected lines from both the previous and the resulting state (merged)");
  var LinesMergedTypeAttribute = addAttribute("VCS.LinesMergedType","Type of change in affected lines from both the previous and the resulting state (merged type)");
  var SP_NLB = addAttribute("SP.NLB","Number of Changed Lines (before)");
  var SP_NLA = addAttribute("SP.NLA","Number of Changed Lines (after)");
  var SP_NLM = addAttribute("SP.NLM","Number of Changed Lines (merged)");
  var VarianceLinesPreAttribute = addAttribute("SP.VLB","Variance of the affected lines from the previous state");
  var VarianceLinesPostAttribute = addAttribute("SP.VLA","Variance of the affected lines in the resulting state");
  var VarianceLinesMergedAttribute = addAttribute("SP.VLM","Variance of the affected lines from both the previous and the resulting state");

  var SP_CM1 = addAttribute("SP.CM1","Churned LOC / Total LOC");
  var SP_CM2 = addAttribute("SP.CM2","Deleted LOC / Total LOC");


  var CTime = addAttribute("VCS.CommitTime", "Commit time");
  var ATime = addAttribute("VCS.AuthorTime", "Author time");

  var Project = new DECENT!Project;
  Project.name = MG!Model.allInstances().first().name;
  Model.projects.add(Project);
      
  var artifactCount = MG!File.allInstances().size();
  var processedCount = 0;
  
  var defaultBranch = Native("java.lang.System").getProperty("epsilon.transformation.defaultBranch"); 
  //TODO: handle all branches
  var filterBranches = new Set(); 
  filterBranches.add("master");
  filterBranches.add(defaultBranch);
  
  /*
  for (f in MG!File.allInstances().select(x|x.file_type == "directory")) {
  	("  "+f.file_name+" : "+f.file_type+"").println();
  	for (l in f.childrenLinks) {
	  	("    ->"+l.child.file_name+" : "+l.child.file_type+" @ "+l.revision.commit_id).println();
  	}
  	("    "+f.getBranch().name+"").println();
  }
  */
}

post mgInitPost{
  ("Post processing...").log(1);

  addTagsToStates();

  var end = Native("java.lang.System").currentTimeMillis();
  var duration = end - start;

  Model.content.add(step);
  Model.addStep(step,duration.toMinutes().round(5));
  ("Duration: "+duration.toMinutes().round(5)).log(1);
  
  dumpValues();
  
}

//DEBUG
operation Any dumpValues() {
  for (a in DECENT!Artifact.allInstances()) {
  	for (s in a.states) {
  		(a.name + " @ " + s.ID).log(3);
  		//for (v in s.values.select(v|v.ofAttribute.name.startsWith("SP."))) {
  		for (v in s.values.sortBy(v|v.ofAttribute.name)){
  			("  "+v.ofAttribute.name + " = " +v.content).log(3);
  		}
  	}
  }
}

operation Any addTagsToStates() {
  ("Adding tags to states...").log(2);
  var tagsstart = Native("java.lang.System").currentTimeMillis();
  for (a in DECENT!Artifact.allInstances()) {
  	for (s in a.states) {
		var content = new OrderedSet();
		if (s.activity.size()>0) {
			content.addAll(MG!Tag.allInstances().select(x|
					x.revision.first().author_date.time <= s.activity.first().date.time and 
					x.revision.first().author_date.time >= s.fromActivity.first().date.time
				).collect(y|y.name));
		} else {
			content.addAll(MG!Tag.allInstances().select(x|
					x.revision.first().author_date.time >= s.fromActivity.first().date.time
				).collect(y|y.name));
		}
		s.addStringCollectionValue(TagsAttribute,content);  	
		s.addValue(TagsCountAttribute,content.size());  	
  	}
  }
  var tagsend = Native("java.lang.System").currentTimeMillis();
  var tagsduration = tagsend - tagsstart;
  ("Duration(tags): "+tagsduration.toMinutes().round(5)).log(1);
}

rule Branch2Location 
    transform b : MG!Branch 
    to l : DECENT!Location {
    guard : filterBranches.size()=0 or filterBranches.includes(b.name)
    
	l.name = b.name;
    ("Transforming location "+l.name).log(3);
	
	l.type = BranchArtifactType;
	Project.location.add(l);
}


rule People2Agent 
    transform p : MG!People 
    to a : DECENT!Agent {
    
	a.name = p.name;
    ("Transforming agent "+a.name).log(3);
	a.eMail = p.email;
	Model.agentPool.agents.add(a);
	Model.projects.get(0).agents.add(a);
}

rule File2Artifact 
    transform f : MG!File 
    to a : DECENT!Artifact {
    guard : filterBranches.size()=0 or filterBranches.includes(f.getBranch().name)
    
    a.name = f.file_name;
   	a.type = addArtifactType(f.file_type);
    var parentName = "ROOT";
    if (f.parentLinks.size()>0) {
    	("Adding parents... "+f.parentLinks.get(0).parent.equivalent().name).log(4);
	    var parentArtifact = f.parentLinks.get(0).parent.equivalent();
	    if (parentArtifact.name = "ROOT") {
	    	f.getBranch().equivalent().artifacts.add(a);
	    } else {
		    a.parent = parentArtifact;
		    parentName = parentArtifact.name;
	    }
    } else {
    	//TODO: handle branches properly
		//f.actions.first().branch.equivalent().rootArtifact=a;
    }
    ("Transforming artifact "+f.file_name+" ("+f.file_type+") in "+parentName+" ("+processedCount+"/"+artifactCount+" completed)").log(3);
    
	processedCount = processedCount + 1;
}

rule Revision2AgentState 
    transform r : MG!Revision
    to s : DECENT!AgentState {
    guard : filterBranches.size()=0 or filterBranches.includes(r.getBranch().name)
    
    var agent = r.author.equivalent(); 
    s.agent = agent;
    ("Transforming revision "+ r.commit_id + " to agent state for " + agent.name).log(3);
    s.ID = r.commit_id;
    s.name = r.rev;
    s.date = r.author_date;
}

rule Action2State 
    transform a : MG!Action
    to s : DECENT!State {
    guard : filterBranches.size()=0 or filterBranches.includes(a.branch.name)

	s.name = a.revision.rev;
    ("Transforming action "+ a.revision.commit_id + " for " + a.file.file_name).log(3);
	s.ID = a.revision.commit_id;
	s.artifact = a.file.equivalent();
	
	s.addValue(FilePathAttribute, a.current_file_path);
	s.addValue(BranchAttribute, a.branch.name);
	s.addValue(ATime, a.revision.author_date.time.asDouble());
	s.addValue(CTime, a.revision.commit_date.time.asDouble());
	
	var lastState = null;
	var aIndex = a.file.actions.indexOf(a);
	if (aIndex > 0) {
		//("  Previous Action "+a.file.actions.at(aIndex-1).revision.commit_id + " mapped to " + a.file.actions.at(aIndex-1).equivalent()).log(1);
		lastState = a.file.actions.at(aIndex-1).equivalent();
		s.previous.add(lastState);
	}
	
    //dealing with file copies
    //DONE: see notes on this
    //if (a.copy.isDefined()){
    //	var copySourceState = a.copy.fromRevision.actions.select(af|af.file = a.copy.fromFile).first().equivalent();
    //	("  Copy from "+ a.copy.fromFile.equivalent() + " in state " + copySourceState).log(1);
    //	s.previous.add(copySourceState);
    //}
    
    //dealing with file moves
    //TODO: peform a small study similar to file copies

    var content = a.revision.content.select(c|c.file = a.file).first();
	if (content.isDefined()){
		s.addValue(FileSizeAttribute, a.revision.content.select(c|c.file = a.file).first().size.asDouble());
		s.addValue(LOCAttribute, a.revision.content.select(c|c.file = a.file).first().loc.asDouble());
	} else {
		s.addValue(FileSizeAttribute, 0.asDouble());
		s.addValue(LOCAttribute, 0.asDouble());
	}

    s.addValue(AggregateFragmentCountAttribute, a.revision.lineBlames->select(l|l.file = a.file).size().asDouble());
	
	s.addSpatialCharacteristics(a.revision.hunks->select(h|h.file = a.file));
	//TODO: add temporal characteristics
	//TODO: also add distances between bugs, own changes, all changes, bug lifetimes..
	
	//TODO: handle activities and deltas (as a post step?)
    var activity = new DECENT!Activity;
    activity.targetState = s;
    activity.state = lastState;            
    activity.date = a.revision.author_date;
    activity.setActivityType(a.type);
    activity.agent = a.revision.author.equivalent();
    //activity.agentState = a.revision.equivalent(); //->done in DAG2DECENT 
	
    
    var linesAdded = "0".asDouble();
    var linesRemoved = "0".asDouble();
    var difference = "0".asDouble();
    var patchLines = a.revision.patchLines->select(l|l.file = a.file);
    if (patchLines.size() > 0) {
        linesAdded = patchLines.asOrderedSet().first().added.asDouble();
        linesRemoved = patchLines.asOrderedSet().first().removed.asDouble();
        difference = linesAdded - linesRemoved;
    }

    activity.addValue(HunkCountAttribute, a.revision.hunks->select(h|h.file = a.file).size().asDouble());
	activity.addValue(MessageAttribute, a.revision.message);
    activity.addValue(LinesAddedAttribute, linesAdded);
    activity.addValue(LinesRemovedAttribute, linesRemoved);

}


operation DECENT!State addSpatialCharacteristics(hunks : Collection) {
	//consider outsourcing
	var linesPre = new OrderedSet;
	var linesPost = new OrderedSet;
	var linesMerged = new OrderedSet;
	var linesMergedType = new Map;
	var linesMergedTypeSequence = new Sequence;
	var fragments = new OrderedSet;
	var size = 0;
	var preDifference = 0;
	var postDifference = 0;
	var fragmentCount = 0;
	var tailChanged = false;
	var headChanged = false;
    for (h in hunks) {
		var oldStartLine = h.old_start_line_normalized;
		var newStartLine = h.new_start_line_normalized;
		var oldEndLine = h.old_end_line_normalized;
		var newEndLine = h.new_end_line_normalized;
		oldEndLine = oldEndLine + 1;
		newEndLine = newEndLine + 1;
		if (h.old_start_line = 0) {
			oldEndLine = oldEndLine - 1;
		}
		if (h.new_start_line = 0) {
			newEndLine = newEndLine - 1;
		}
		//can be further refined into addAll(Sequence{oldStartLine..(oldEndLine-1)})
		//and addAll(Sequence{oldStartLine..(oldEndLine-1)}.collect(v|v + postDifference)
		var i = 0;
		while (i < (oldEndLine - oldStartLine)){
			linesPre.add(oldStartLine + i);
			linesMerged.add(oldStartLine + i + postDifference);
			linesMergedType.put(oldStartLine + i + postDifference, "-");
			i = i + 1;
		}
		i = 0;
		while (i < (newEndLine - newStartLine)){
			linesPost.add(newStartLine + i);
			if (h.old_end_line = 0 ) {
				linesMerged.add(newStartLine + i + preDifference);
				linesMergedType.put(newStartLine + i + preDifference, "+");
			} else {
				linesMergedType.put(newStartLine + i + preDifference, "*");
			}
			i = i + 1;
		}

		size=size+h.difference;
		
		if (h.difference > 0) {
			postDifference = postDifference + h.difference.abs();
		} 
		if (h.difference < 0) {
			preDifference = preDifference + h.difference.abs();
		}
    	
		if (oldStartLine = 1 or newStartLine = 1) {
			headChanged = true;
		} else {
			fragmentCount = fragmentCount + 1;
			fragments.add(fragmentCount);
		}
		if (oldEndLine-1 = size or newEndLine-1 = size) {
			tailChanged = true;
		}
		fragmentCount = fragmentCount + 1;
		fragments.add(fragmentCount);
    	
    }
	if (not tailChanged) {
		fragmentCount = fragmentCount + 1;
		fragments.add(fragmentCount);
	}
	self.addIntegerCollectionValue(LinesPreAttribute, linesPre.sortBy(l|l));
	self.addIntegerCollectionValue(LinesPostAttribute, linesPost.sortBy(l|l));
	self.addIntegerCollectionValue(LinesMergedAttribute, linesMerged.sortBy(l|l));
	self.addValue(SP_NLB, linesPre.size());
	self.addValue(SP_NLA, linesPost.size());
	self.addValue(SP_NLM, linesMerged.size());

	self.addValue(SP_NCF, hunks.size());
	var changedFragments = new OrderedSet;
	if (headChanged) {
		changedFragments = 1.iota(fragments.size(),2);
	} else {
		changedFragments = 0.iota(fragments.size(),2);
		changedFragments.removeAt(0);
	}
	self.addIntegerCollectionValue(ChangedFragmentsAttribute, changedFragments.sortBy(l|l));
	self.addValue(SP_VCF, changedFragments.getVariance());

	var loc = self.getValue(LOCAttribute);
	var cm1 = 0.asDouble();
	var cm2 = 0.asDouble();
	if (loc > 0) {
		//TODO: current calculation is oversimplified
		cm1 = linesPost.size()/loc;
		cm2 = linesPre.size()/loc;
	}
	self.addValue(SP_CM1, cm1);
	self.addValue(SP_CM2, cm2);


	for (l in linesMerged.sortBy(l|l)) {
		linesMergedTypeSequence.add(linesMergedType.get(l));
	}
	//("LM:"+linesMerged).log(1);
	//("LMT:"+linesMergedType).log(1);
	//("LMTS:"+linesMergedTypeSequence).log(1);
	self.addStringCollectionValue(LinesMergedTypeAttribute, linesMergedTypeSequence);
	self.addValue(FragmentCountAttribute, fragments.size().asDouble());
	self.addValue(VarianceLinesPreAttribute, linesPre.getVariance());
	self.addValue(VarianceLinesPostAttribute, linesPost.getVariance());
	self.addValue(VarianceLinesMergedAttribute, linesMerged.getVariance());
	self.addIntegerCollectionValue(FragmentsAttribute, fragments.sortBy(l|l));
	self.addValue(VarianceFragmentsAttribute, fragments.getVariance());
	
//  TODO: ChangedFragmentAttribute
//  TODO: VarianceChangedFragmentAttribute
	
	
}

