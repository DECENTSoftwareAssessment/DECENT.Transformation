import "../libraries/famix/init.etl";
import "../libraries/decent/common.eol";
import "../libraries/decent/logging.eol";

pre mgInitPre {

  //Some initialization
  //More generic (might be simplified)
  //TODO: may be exported to a separate module
  //("System "+System.getContext().getModule()).log(1);
  "Running mg2decent v3".log(1);
  var start = Native("java.lang.System").currentTimeMillis();
  /********************************** INIT (1x) *******************************/
  
  var Model : new DECENT!Model;
  Model.artifactTypeHierarchy = new DECENT!ArtifactTypeHierarchy;
  Model.agentPool = new DECENT!AgentPool;
  Model.attributePool = new DECENT!AttributePool;
  //Model.projects = new List;
  
  var BranchArtifactType = new DECENT!ArtifactType;
  BranchArtifactType.name = "Branch";
  Model.artifactTypeHierarchy.types.add(BranchArtifactType);
    
  var FilePathAttribute = new DECENT!Attribute;
  FilePathAttribute.name = "FilePath";
  Model.attributePool.attributes.add(FilePathAttribute);

  var BranchAttribute = new DECENT!Attribute;
  BranchAttribute.name = "Branch";
  Model.attributePool.attributes.add(BranchAttribute);

  var attributes = new Map;
  attributes.put("FileSize","File size in bytes");
  attributes.put("LOC","Lines of code");
  attributes.put("LinesAdded","Lines added");
  attributes.put("LinesRemoved","Lines removed");
  attributes.put("IsBugFix","Revision is labeled as bug fix");
  attributes.put("BugFixCount","Number of bug fixes in past revisions");
  attributes.put("AggregateFragmentCount","");
  attributes.put("FragmentCount","Number of fragments");
  attributes.put("HunkCount","Number of changed fragments");
  attributes.put("ChangedFragments","Changed and unchanged fragments");
  attributes.put("Fragments","Fragments");
  attributes.put("VarianceChangedFragments","Variance of changed and unchanged fragments");
  attributes.put("VarianceFragments","Variance of fragments");
  attributes.put("Message","Commit message");
  attributes.put("LinesPre","Affected lines from the previous state");
  attributes.put("LinesPost","Affected lines in the resulting state");
  attributes.put("LinesMerged","Affected lines from both the previous and the resulting state (merged)");
  attributes.put("VarianceLinesPre","Variance of the affected lines from the previous state");
  attributes.put("VarianceLinesPost","Variance of the affected lines in the resulting state");
  attributes.put("VarianceLinesMerged","Variance of the affected lines from both the previous and the resulting state");

  Model.addAttributes(attributes);

  var FileSizeAttribute = DECENT!Attribute.allInstances().select(a|a.name = "FileSize").first();
  var LOCAttribute = DECENT!Attribute.allInstances().select(a|a.name = "LOC").first();
  var LinesAddedAttribute = DECENT!Attribute.allInstances().select(a|a.name = "LinesAdded").first();
  var LinesRemovedAttribute = DECENT!Attribute.allInstances().select(a|a.name = "LinesRemoved").first();
  var IsBugFixAttribute = DECENT!Attribute.allInstances().select(a|a.name = "IsBugFix").first();
  var BugFixCountAttribute = DECENT!Attribute.allInstances().select(a|a.name = "BugFixCount").first();
  var AggregateFragmentCountAttribute = DECENT!Attribute.allInstances().select(a|a.name = "AggregateFragmentCount").first();
  var FragmentCountAttribute = DECENT!Attribute.allInstances().select(a|a.name = "FragmentCount").first();
  var HunkCountAttribute = DECENT!Attribute.allInstances().select(a|a.name = "HunkCount").first();
  var ChangedFragmentAttribute = DECENT!Attribute.allInstances().select(a|a.name = "ChangedFragments").first();
  var FragmentsAttribute = DECENT!Attribute.allInstances().select(a|a.name = "Fragments").first();
  var VarianceChangedFragmentAttribute = DECENT!Attribute.allInstances().select(a|a.name = "VarianceChangedFragments").first();
  var VarianceFragmentsAttribute = DECENT!Attribute.allInstances().select(a|a.name = "VarianceFragments").first();
  var MessageAttribute = DECENT!Attribute.allInstances().select(a|a.name = "Message").first();
  var LinesPreAttribute = DECENT!Attribute.allInstances().select(a|a.name = "LinesPre").first();
  var LinesPostAttribute = DECENT!Attribute.allInstances().select(a|a.name = "LinesPost").first();
  var LinesMergedAttribute = DECENT!Attribute.allInstances().select(a|a.name = "LinesMerged").first();
  var VarianceLinesPreAttribute = DECENT!Attribute.allInstances().select(a|a.name = "VarianceLinesPre").first();
  var VarianceLinesPostAttribute = DECENT!Attribute.allInstances().select(a|a.name = "VarianceLinesPost").first();
  var VarianceLinesMergedAttribute = DECENT!Attribute.allInstances().select(a|a.name = "VarianceLinesMerged").first();

  var Project = new DECENT!Project;
  Project.name = MG!Model.allInstances().first().name;
  Model.projects.add(Project);
    
  for (b in MG!Branch.allInstances()){
	var Location = new DECENT!Location;
	Location.name = b.name;
	Location.type = BranchArtifactType;
	Project.location.add(Location);
//	var RootArtifact = new DECENT!Artifact;
//	RootArtifact.name = "/";
//	Location.rootArtifact = RootArtifact;
  }
  
  //TODO: handle all branches
  var RootArtifact = Project.location.select(l|l.name = 'master').first().rootArtifact;

  var artifactCount = MG!File.allInstances().size();
  var processedCount = 0;

}

post mgInitPost{
  ("Post processing... ").log(2);
  //TODO: move to a separate standalone module?
  //stats for debugging...
  for (a in DECENT!Artifact.allInstances()) {
  	(""+a.name).log(3);
  	for (s in a.states) {
  		for (v in s.values.select(v|v.isTypeOf(DoubleValue) or v.isTypeOf(IntegerValue))) {
  			s.fromActivity.get(0).addDelta(v.ofAttribute);
  		}
  	}
  }

    //TODO: adjust branching structure
  Model.content.add("mg2decent3");
  
  var end = Native("java.lang.System").currentTimeMillis();
  var duration = end - start;
  ("Duration: "+duration.toMinutes().round(5)).log(1);
  
}

operation String replaceExtension() : String {
    return self.replace('\\.h','.cpp');
}

operation String replaceInclude() : String {
    return self.replace('include','src');
}

operation dumpFileCopies() {
  for (f in MG!File.allInstances()) {
    (""+f.file_name).log(3);
  
  	for (a in f.actions) {
  		("  " +a.type + " "+a.revision.commit_id + " " + a.revision.message.trim()).log(3);
  		if (a.copy.isDefined()) {
  			("  "+a.copy.fromRevision.commit_id +" ("+a.copy.fromFile.file_name+")" + " -> "+ a.revision.commit_id+ " ("+f.file_name+")").log(3);
  		}
  	}
  }
}


rule People2Agent 
    transform p : MG!People 
    to a : DECENT!Agent {
    
	a.name = p.name;
    ("Transforming agent "+a.name).log(3);
	a.eMail = p.email;
	Model.agentPool.agents.add(a);
	Model.projects.get(0).agents.add(a);
}

//rule-based
rule File2Artifact 
    transform f : MG!File 
    to a : DECENT!Artifact {
    
    a.name = f.file_name;
   	a.setArtifactType(f.file_type);
    var parentName = "ROOT";
    if (f.parentLinks.size()>0) {
    	//("Adding parents... "+f.parentLinks.size()).log(1);
    	("Adding parents... "+f.parentLinks.get(0).parent.equivalent().name).log(4);
	    var parentArtifact = f.parentLinks.get(0).parent.equivalent();
	    a.parent = parentArtifact;
	    parentName = parentArtifact.name;
    } else {
    	//TODO: handle branches properly
    	DECENT!Location.allInstances.select(l|l.name = "master").first().rootArtifact=a;
    }
    ("Transforming artifact "+f.file_name+" ("+f.file_type+") in "+parentName+" ("+processedCount+"/"+artifactCount+" completed)").log(3);
    
	processedCount = processedCount + 1;
}

rule Revision2AgentState 
    transform r : MG!Revision
    to s : DECENT!AgentState {
    
    var agent = r.author.equivalent(); 
    s.agent = agent;
    ("Transforming revision "+ r.commit_id + " to agent state for " + agent.name).log(3);
    s.ID = r.commit_id;
    s.name = r.rev;
    s.date = r.author_date;
}

rule Action2State 
    transform a : MG!Action
    to s : DECENT!State {

	s.name = a.revision.rev;
    ("Transforming action "+ a.revision.commit_id + " for " + a.file.file_name).log(3);
	s.ID = a.revision.commit_id;
	s.artifact = a.file.equivalent();
	
	s.addValue(FilePathAttribute, a.current_file_path);
	s.addValue(BranchAttribute, a.branch.name);
	
	var lastState = null;
	var aIndex = a.file.actions.indexOf(a);
	if (aIndex > 0) {
		//("  Previous Action "+a.file.actions.at(aIndex-1).revision.commit_id + " mapped to " + a.file.actions.at(aIndex-1).equivalent()).log(1);
		lastState = a.file.actions.at(aIndex-1).equivalent();
		s.previous.add(lastState);
	}
	
    //dealing with file copies
    //DONE: see notes on this
    //if (a.copy.isDefined()){
    //	var copySourceState = a.copy.fromRevision.actions.select(af|af.file = a.copy.fromFile).first().equivalent();
    //	("  Copy from "+ a.copy.fromFile.equivalent() + " in state " + copySourceState).log(1);
    //	s.previous.add(copySourceState);
    //}
    
    //dealing with file moves
    //TODO: peform a small study similar to file copies

    var content = a.revision.content.select(c|c.file = a.file).first();
	if (content.isDefined()){
		s.addValue(FileSizeAttribute, a.revision.content.select(c|c.file = a.file).first().size.asDouble());
		s.addValue(LOCAttribute, a.revision.content.select(c|c.file = a.file).first().loc.asDouble());
	} else {
		s.addValue(FileSizeAttribute, -1.asDouble());
		s.addValue(LOCAttribute, -1.asDouble());
	}

    s.addValue(AggregateFragmentCountAttribute, a.revision.lineBlames->select(l|l.file = a.file).size().asDouble());
	
	s.addSpatialCharacteristics(a.revision.hunks->select(h|h.file = a.file));
	//TODO: add temporal characteristics
	//TODO: also add distances between bugs, own changes, all changes, bug lifetimes..
	
	//TODO: handle activities and deltas (as a post step?)
	//TODO: deltas!
    var activity = new DECENT!Activity;
    activity.targetState = s;
    activity.state = lastState;            
    activity.date = a.revision.author_date;
    activity.setActivityType(a.type);
    activity.agent = a.revision.author.equivalent();
	
    
    var linesAdded = "0".asDouble();
    var linesRemoved = "0".asDouble();
    var difference = "0".asDouble();
    var patchLines = a.revision.patchLines->select(l|l.file = a.file);
    if (patchLines.size() > 0) {
        linesAdded = patchLines.asOrderedSet().first().added.asDouble();
        linesRemoved = patchLines.asOrderedSet().first().removed.asDouble();
        difference = linesAdded - linesRemoved;
    }

    activity.addValue(HunkCountAttribute, a.revision.hunks->select(h|h.file = a.file).size().asDouble());
	activity.addValue(MessageAttribute, a.revision.message);
    activity.addValue(LinesAddedAttribute, linesAdded);
    activity.addValue(LinesRemovedAttribute, linesRemoved);

}


operation DECENT!State addSpatialCharacteristics(hunks : Collection) {
	//consider outsourcing
	var linesPre = new OrderedSet;
	var linesPost = new OrderedSet;
	var linesMerged = new OrderedSet;
	var fragments = new OrderedSet;
	var size = 0;
	var preDifference = 0;
	var postDifference = 0;
	var fragmentCount = 0;
	var tailChanged = false;
    for (h in hunks) {
		var oldStartLine = h.old_start_line_normalized;
		var newStartLine = h.new_start_line_normalized;
		var oldEndLine = h.old_end_line_normalized;
		var newEndLine = h.new_end_line_normalized;
		oldEndLine = oldEndLine + 1;
		newEndLine = newEndLine + 1;
		if (h.old_start_line = 0) {
			oldEndLine = oldEndLine - 1;
		}
		if (h.new_start_line = 0) {
			newEndLine = newEndLine - 1;
		}
		//can be further refined into addAll(Sequence{oldStartLine..(oldEndLine-1)})
		//and addAll(Sequence{oldStartLine..(oldEndLine-1)}.collect(v|v + postDifference)
		var i = 0;
		while (i < (oldEndLine - oldStartLine)){
			linesPre.add(oldStartLine + i);
			linesMerged.add(oldStartLine + i + postDifference);
			i = i + 1;
		}
		i = 0;
		while (i < (newEndLine - newStartLine)){
			linesPost.add(newStartLine + i);
			if (h.old_end_line = 0 ) {
				linesMerged.add(newStartLine + i + preDifference);
			}
			i = i + 1;
		}

		size=size+h.difference;
		
		if (h.difference > 0) {
			postDifference = postDifference + h.difference.abs();
		} 
		if (h.difference < 0) {
			preDifference = preDifference + h.difference.abs();
		}
    	
		if (oldStartLine = 1 or newStartLine = 1) {
		} else {
			fragmentCount = fragmentCount + 1;
			fragments.add(fragmentCount);
		}
		if (oldEndLine-1 = size or newEndLine-1 = size) {
			tailChanged = true;
		}
		fragmentCount = fragmentCount + 1;
		fragments.add(fragmentCount);
    	
    }
	if (not tailChanged) {
		fragmentCount = fragmentCount + 1;
		fragments.add(fragmentCount);
	}
	self.addIntegerCollectionValue(LinesPreAttribute, linesPre.sortBy(l|l));
	self.addIntegerCollectionValue(LinesPostAttribute, linesPost.sortBy(l|l));
	self.addIntegerCollectionValue(LinesMergedAttribute, linesMerged.sortBy(l|l));
	self.addValue(FragmentCountAttribute, fragments.size().asDouble());
	self.addValue(VarianceLinesPreAttribute, linesPre.getVariance());
	self.addValue(VarianceLinesPostAttribute, linesPost.getVariance());
	self.addValue(VarianceLinesMergedAttribute, linesMerged.getVariance());
	self.addIntegerCollectionValue(FragmentsAttribute, fragments.sortBy(l|l));
	self.addValue(VarianceFragmentsAttribute, fragments.getVariance());
	
//  TODO: ChangedFragmentAttribute
//  TODO: VarianceChangedFragmentAttribute
	
	
}

