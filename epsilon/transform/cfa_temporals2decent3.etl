//import "cfa-init.etl";
import "../libraries/cfa/common.eol";
import "../libraries/decent/common.eol";
import "../libraries/decent/logging.eol";

pre {
  //Some initialization
  var step = "cfa_temporals2decent3"; 
  ("Running "+step).log(1);
  var start = Native("java.lang.System").currentTimeMillis();
  
  var resolution = Native("java.lang.System").getProperty("epsilon.transformation.temporals.resolution").asDouble();
  var twostage = Native("java.lang.System").getProperty("epsilon.transformation.temporals.twostagecfa").asBoolean();
  
  var selectedFactors = Native("java.lang.System").getProperty("epsilon.transformation.cfa2decent.factor").split(",");
  
  //("DECENT States: "+DECENT!State.allInstances().size()).log(2);
  var Model = DECENT!DECENT::Model.allInstances().first();
  //TODO: fix hierarchy
  //NOTE: requires Logical States
  //var Project = CFA!LogicalState.allInstances().first().artifact.getProject();
  //var Model = Project.eContainer;

  var CFAWeightFactor = "WeightFactor".getCFAAttribute();
  var CFAAverageWeight = "AverageWeight".getCFAAttribute();
  var CFATotalWeight = "TotalWeight".getCFAAttribute();
  var FilePathAttribute = "FilePath".getAttribute();
  
  //TODO: need to accumulate a value? i.e. keep a balance of sorts? bug cause adds, bug fix removes
  // - or do we focus only on the states that introduce a bug and the activities that lead to them??
  //   in which case it would make sense to report the target state instead of the source state
  //   which would also prompt the use of a balance for all the weights in order to have a meaningful
  //   delta, or alternatively these could become activity values, although the intuition behind that 
  //   may be unclear 
  //DONE: also investigate the reasons behind those off-the-charts values in the preliminary report
  // -> asumed to be number conversion issues with numbers
  // -> TODO: add normalizationn
  //DONE: need to investigate the failed assignments too, see the log for details
  // -> still an issue after improved assignments?
  //TODO: add ratios, e.g. averageBugWeight/averageWeight, also for totals, define interpretation
  //TODO: add lifespans

  //var profiler : new Native("org.eclipse.epsilon.eol.tools.ProfilerTool");
  
  //TODO: this needs to be rethought tho, as it is now it is providing too much noise
  //addTemporalAttributes();
  //addArtifactTemporals();
  //addAgentTemporals();
  var targetWriter;
  if (twostage) {
  	var cfaFilename = CFA.getModelImpl().getURI().toString().replaceAll("^file:","");
  	var targetFile = new Native("java.io.File") (cfaFilename+".temporals");
	targetWriter = new Native("java.io.FileWriter") (targetFile);  
  }
  
  getAllTemporals();

  if (twostage) {
	targetWriter.close();  
  }
  
  ("...done!").log(2);
}

post {
    var end = Native("java.lang.System").currentTimeMillis();
    var duration = end - start;
  	Model.content.add(step);
  	Model.addStep(step,duration.toMinutes().round(5));
    ("Duration: "+duration.toMinutes().round(5)).log(1);
    //TODO: use this check to enable BZ based processing
}

//extract
operation Any getProject() : Any {
	var project = null;
	if (self.eClass.name.equals("Project")) {
		project = self;
	} else {
		if (self.eContainer.isDefined()) {
			project = self.eContainer.getProject();
		}
	}
	return project;
}

operation dumpAgentStates() {
  var separator = "\t";
  var h = false;
  
  for (s in DECENT!AgentState.allInstances()) {
  	var o = ""+s.ID+separator;
  	var header = ""+"State"+separator;
	if (not h) {
	  	for (v in s.values) {
	  		header = header + v.ofAttribute.name + separator;
		}
		header.println();
		h = true;
	}
  	for (v in s.values) {
  		
  		o = o + v.content + separator;
  	}
  	o.replaceAll("\\.",",").println();
  }
}

operation addTemporalAttributes() {
  ("Initializing CFA definitions").log(2);
  //This should only run once!!!
  
  var attributes = new Map;
  //TODO: make configurable
  for (f in CFA!Factor.allInstances()) {
  	//TODO: add dimension
 	attributes.put(f.name+".AverageFixedLifespan","");
  	attributes.put(f.name+".AverageCausedLifespan","");

 	attributes.put(f.name+".FixedRelativeDistanceVariance","Variance of distance divided by relative time");
  	attributes.put(f.name+".CausedRelativeDistanceVariance","Variance of distance divided by relative time");
 	attributes.put(f.name+".FixedRelativeDistanceAverage","Average of distance divided by relative time");
  	attributes.put(f.name+".CausedRelativeDistanceAverage","Average of distance divided by relative time");

  	attributes.put(f.name+".CausesAbsoluteTime","Set of distances for causing states to the beginning of time");
  	attributes.put(f.name+".CausesRelativeTime","Set of distances for causing states to the first state");
  	attributes.put(f.name+".CausesDistanceTime","Set of distances for causing states to fixing state");

  	attributes.put(f.name+".CausesAbsoluteTimeVariance","Variance of distances for causing states to the beginning of time");
  	attributes.put(f.name+".CausesRelativeTimeVariance","Variance of distances for causing states to the first state");
  	attributes.put(f.name+".CausesDistanceTimeVariance","Variance of distances for causing states to fixing state");

  	attributes.put(f.name+".FixesAbsoluteTime","Set of distances for fixing states to the beginning of time");
  	attributes.put(f.name+".FixesRelativeTime","Set of distances for fixing states to the first state");
  	attributes.put(f.name+".FixesDistanceTime","Set of distances for fixing states to causing states");

  	attributes.put(f.name+".FixesAbsoluteTimeVariance","Variance of distances for fixing states to the beginning of time");
  	attributes.put(f.name+".FixesRelativeTimeVariance","Variance of distances for fixing states to the first state");
  	attributes.put(f.name+".FixesDistanceTimeVariance","Variance of distances for fixing states to causing state");  	
  }

  //TODO: these may need to be pre-calculated in mg2cfa
  Model.addAttributes(attributes);

}


operation CFA!GlobalState getTime() : Any {
	return self.revision.author_date.time;
}

operation CFA!ArtifactState getTime() : Any {
	return self.globalState.getTime();
}

operation CFA!LogicalState getTime() : Any {
	return self.globalState.getTime();
}

operation CFA!CFAState removesWeight(f : CFA!Factor, threshold : Real) : Boolean {
	return self.factors.get(f).get(CFAWeightFactor)>threshold;
}

operation Collection getStats() {
	//in days
	("    Min:\t"+self.getMin()/resolution).log(2);
	("    Max:\t"+self.getMax()/resolution).log(2);
	("    Mean:\t"+self.getMean()/resolution).log(2);
	("    Deviation:\t"+self.getStandardDeviation()/resolution).log(2);
	//("    Mean:\t"+self.getMean()).log(2);
	//("    Deviation:\t"+self.getStandardDeviation()).log(2);
}

operation getAllTemporals() {
	("Project Layer...").log(2);
	CFA!GlobalState.allInstances().getTemporals("Project");
	("Artifact Layer (code)...").log(2);
	CFA!ArtifactState.allInstances().select(s|s.file.file_type = "code").getTemporals("Artifact:code");
	("Logical Layer (Class)...").log(2);
	CFA!LogicalState.allInstances().select(s|s.artifact.type.name = "Class").getTemporals("Logical:Class");
	("Logical Layer (Method)...").log(2);
	CFA!LogicalState.allInstances().select(s|s.artifact.type.name = "Method").getTemporals("Logical:Method");
}

operation Collection getTemporals(layer : String) {
	if (self.size()>0) {
	  	("...getting temporals...").log(2);
	
		//Distance to Start //relative time 
		var startDistance = new Sequence;
		var start = self.sortBy(x|x.getTime()).first().getTime();
	  	for (g in self) {
			var t = g.getTime();
			startDistance.add(t-start);
		}
		("  Distance to start:").log(2);
		startDistance.getStats();
		
		//Fix distance => covered by default factor
		/*
		var fixDistance = new Sequence;
  		for (g in self) {
			var t = g.getTime();
			for (fix in g.causes) {
				fixDistance.add(fix.getTime()-t);
			}
		}
		("  Cause-Fix Distance:").log(2);
		fixDistance.getStats();
		*/
	
		//Fix distance over factor
	  	for (f in CFA!Factor.allInstances().select(x|selectedFactors.contains(x.name))) {
	  		("Processing factor "+f.name+"...").log(2);
			var factoredFixDistance = new Sequence;
	
			//TODO: add average weight threshold?
		  	for (g in self) {
				var t = g.getTime();
				var removedWeightThreshold = 0.asDouble();
				for (fix in g.causes) {
					if (fix.removesWeight(f, removedWeightThreshold)) {
						//TODO: check if negative?
						factoredFixDistance.add(fix.getTime()-t);
					}
				}
			}
			if (factoredFixDistance.size() > 0) {
				("  Cause-Fix Distance over factor "+f.name+":").log(2);
				factoredFixDistance.getStats();
				factoredFixDistance.storeProjectTemporals("CFA."+layer+"."+f.name);
			}
		}
	}
}

operation Collection storeProjectTemporals(attributeName : String) {
	if (twostage) {
		(attributeName+".Min"+"="+self.getMin()/resolution).printlno(targetWriter);
		(attributeName+".Max"+"="+self.getMax()/resolution).printlno(targetWriter);
		(attributeName+".Mean"+"="+self.getMean()/resolution).printlno(targetWriter);
		(attributeName+".Deviation"+"="+self.getStandardDeviation()/resolution).printlno(targetWriter);
	} else {
		var project = DECENT!DECENT::Project.allInstances().first();
		project.addValue(addAttribute(attributeName+".Min"),self.getMin()/resolution);
		project.addValue(addAttribute(attributeName+".Max"),self.getMax()/resolution);
		project.addValue(addAttribute(attributeName+".Mean"),self.getMean()/resolution);
		project.addValue(addAttribute(attributeName+".Deviation"),self.getStandardDeviation()/resolution);
	}
}

operation addArtifactTemporals() {
	//TODO: these should be factor specific as well
  	("...adding artifact temporals...").log(2);

	var start = CFA!GlobalState.allInstances().sortBy(x|x.revision.author_date.time).first().revision.author_date.time;

  	for (f in CFA!Factor.allInstances().select(x|selectedFactors.contains(x.name))) {
  		
  		var AverageFixedLifespanAttribute = (f.name+".AverageFixedLifespan").getAttribute();
  		var AverageCausedLifespanAttribute = (f.name+".AverageCausedLifespan").getAttribute();

  		var FixedRelativeDistanceVarianceAttribute = (f.name+".FixedRelativeDistanceVariance").getAttribute();
  		var CausedRelativeDistanceVarianceAttribute = (f.name+".CausedRelativeDistanceVariance").getAttribute();

  		var FixedRelativeDistanceAverageAttribute = (f.name+".FixedRelativeDistanceAverage").getAttribute();
  		var CausedRelativeDistanceAverageAttribute = (f.name+".CausedRelativeDistanceAverage").getAttribute();

  		var CausesDistanceTimeVarianceAttribute = (f.name+".CausesDistanceTimeVariance").getAttribute();
  		var FixesDistanceTimeVarianceAttribute = (f.name+".FixesDistanceTimeVariance").getAttribute();

		var relativeTime = new Sequence;
		var distanceTime = new Sequence;
		
	  	for (g in CFA!GlobalState.allInstances()) {
  			var states = g.ID.getMGStatesForID();
		
		
			for (s in g.artifactStates) {
				("  " + s.file.file_name + " @ "+s.ID).log(3);
			  	var fileName = s.file.file_name;
			  	var filePath = s.action.current_file_path;
			  	var matchedStates = states.getMatchingStateForPath(filePath);
			  	var size = matchedStates.size();
				//check if correct matches can be found 
			  	if (size <> 1) {
			  		("  "+size+" DECENT matches found for: "+fileName+" at "+s.ID).log(4);
			  		("    Avaliable states at "+s.ID+" are:").log(4);
			  		//for (x in DECENT!State.allInstances().select(x|x.artifact.isMGType() and x.ID = s.ID)) {
			  			//("      "+x.artifact.name+" at "+x.ID+" ("+x.getValue(FilePathAttribute).content+")").log(4);
			  		//}
			  	} else {
	
	
			  		var state = matchedStates.first();
			  
			   		//TODO: consider moving to mg2cfa 
			   		//TODO: consider filtering by weight
			   		//TODO: considering adding further temporals
			   		//TODO: describe intuitions (in particular for average caused lifespans):
			   		// - average caused lifespan indicates the lifespan of the changes / lines changed in the state
			   		// - average caused bug lifespan indicates the lifespan of the buggy changes / buggy lines changed in the state
			   		// - difference between the two above would indicate that buggy parts were removed faster 
			   		//   it would also create bias thus needs to be hidden for machine learning
			   		//   but could be used for statistics, filtering, comparison with issue lifetimes and other purposes
			   		//   could also be used as target for prediction (whether a piece looks like it may soon be changed, 
			   		//   or perhaps also contain a bug that will survive a given number of days)
			   		// - not sure what to make out of the average fixed lifespan - i.e. the age of the changed lines
			   		//TODO: add for the global states as well for reference
			   		//TODO: also consider projecting on the project, agent, and artifact lifespans
			   		// - separate values can be calculated for agents
			   		var averageFixedLifespan = 0.asDouble();
			   		var averageCausedLifespan = 0.asDouble();
			
					relativeTime.clear();
					distanceTime.clear();
			
					var time = s.action.revision.author_date.time;
					var totalFixedTime = 0;
					//TODO: export threshold
					var threshold = 0.1.asDouble();
					//select only buggy changes
					var selectedFixes = s.fixes.select(x|x.factors.get(f).get(CFAAverageWeight) > threshold);
					for (c in selectedFixes) {
						var causeTime = c.action.revision.author_date.time;
						totalFixedTime = totalFixedTime + (time - causeTime);
						relativeTime.add(((time - causeTime).asDouble()/(time - start).asDouble()));
						distanceTime.add((time - causeTime).asDouble()/resolution);
					}
					if (selectedFixes.size() > 0) {
						averageFixedLifespan = s.factors.get(f).get(CFAWeightFactor)*(totalFixedTime / selectedFixes.size().asDouble()).toDays();
					}
					//TODO: This should be inverse in fact Fixed...Attribute
					state.addValue(CausedRelativeDistanceVarianceAttribute, relativeTime.getVariance());
					state.addValue(CausedRelativeDistanceAverageAttribute, relativeTime.getMean());
					state.addValue(CausesDistanceTimeVarianceAttribute, distanceTime.getVariance());
			
					relativeTime.clear();
					distanceTime.clear();
	
					//TODO: This should be inverse in fact Fixed...Attribute
					var totalCausedTime = 0;
					var selectedCauses = s.causes.select(c|c.factors.get(f).get(CFAWeightFactor) > 0);
					for (f in selectedCauses) {
						var fixTime = f.action.revision.author_date.time;
						totalCausedTime = totalCausedTime + (fixTime - time);
						relativeTime.add(((fixTime - time).asDouble()/(fixTime - start).asDouble()));
						distanceTime.add((fixTime - time).asDouble()/resolution);
					}
					if (selectedCauses.size() > 0) {
						averageCausedLifespan = (totalCausedTime / selectedCauses.size().asDouble()).toDays();
					}
					
					state.addValue(FixedRelativeDistanceVarianceAttribute, relativeTime.getVariance());
					state.addValue(FixedRelativeDistanceAverageAttribute, relativeTime.getMean());
					state.addValue(FixesDistanceTimeVarianceAttribute, distanceTime.getVariance());
					
			   		state.addValue(AverageFixedLifespanAttribute, averageFixedLifespan);
			   		state.addValue(AverageCausedLifespanAttribute, averageCausedLifespan);
				}
			}
		}
	}
}

operation addAgentTemporals() {
  	("...adding agent temporals...").log(2);
  
    for (f in CFA!Factor.allInstances().select(x|selectedFactors.contains(x.name))) {
  		var AverageFixedLifespanAttribute = (f.name+".AverageFixedLifespan").getAttribute();
  		var AverageCausedLifespanAttribute = (f.name+".AverageCausedLifespan").getAttribute();

  		var FixedRelativeDistanceVarianceAttribute = (f.name+".FixedRelativeDistanceVariance").getAttribute();
  		var CausedRelativeDistanceVarianceAttribute = (f.name+".CausedRelativeDistanceVariance").getAttribute();

  		var FixedRelativeDistanceAverageAttribute = (f.name+".FixedRelativeDistanceAverage").getAttribute();
  		var CausedRelativeDistanceAverageAttribute = (f.name+".CausedRelativeDistanceAverage").getAttribute();

  		var CausesDistanceTimeVarianceAttribute = (f.name+".CausesDistanceTimeVariance").getAttribute();
  		var FixesDistanceTimeVarianceAttribute = (f.name+".FixesDistanceTimeVariance").getAttribute();
  
	  	var relativeTime = new Sequence;
	  	var distanceTime = new Sequence;
	  
	  	var start = CFA!GlobalState.allInstances().sortBy(x|x.revision.author_date.time).first().revision.author_date.time;
	  
	  	for (s in CFA!GlobalState.allInstances()) {
			("  " + " @ "+s.ID).log(3);
		  	var authorName = s.revision.author.name;
		  	var matchedStates = DECENT!AgentState.allInstances().select(m|m.ID = s.ID);
		  	var size = matchedStates.size();
			//check if correct matches can be found 
		  	if (size <> 1) {
		  		("  "+size+" DECENT matches found for: "+authorName+" at "+s.ID).log(1);
		  	} else {
		  		var state = matchedStates.first();
		  		
		   		var averageFixedLifespan = 0.asDouble();
		   		var averageCausedLifespan = 0.asDouble();
		
				var time = s.revision.author_date.time;
				var totalFixedTime = 0;
				
				relativeTime.clear();
				distanceTime.clear();
				//TODO: adapt similar to artifact temporals above
				for (c in s.fixes) {
					var causeTime = c.revision.author_date.time;
					totalFixedTime = totalFixedTime + (time - causeTime);
					relativeTime.add(((time - causeTime).asDouble()/(time - start).asDouble()));
					distanceTime.add((time - causeTime).asDouble()/resolution);
				}
				if (s.fixes.size() > 0) {
					averageFixedLifespan = s.factors.get(f).get(CFAWeightFactor)*(totalFixedTime / s.fixes.size().asDouble()).toDays();
				}

				state.addValue(CausedRelativeDistanceVarianceAttribute, relativeTime.getVariance());
				state.addValue(CausedRelativeDistanceAverageAttribute, relativeTime.getMean());
				state.addValue(CausesDistanceTimeVarianceAttribute, distanceTime.getVariance());
				
				relativeTime.clear();
				distanceTime.clear();
				
				var totalCausedTime = 0;
				var selectedCauses = s.causes.select(c|c.factors.get(f).get(CFAWeightFactor) > 0);
				for (f in selectedCauses) {
					var fixTime = f.revision.author_date.time;
					totalCausedTime = totalCausedTime + (fixTime - time);
					relativeTime.add(((fixTime - time).asDouble()/(fixTime - start).asDouble()));
					distanceTime.add((fixTime - time).asDouble()/resolution);
				}
				if (selectedCauses.size() > 0) {
					averageCausedLifespan = (totalCausedTime / selectedCauses.size().asDouble()).toDays();
				}

				state.addValue(FixedRelativeDistanceVarianceAttribute, relativeTime.getVariance());
				state.addValue(FixedRelativeDistanceAverageAttribute, relativeTime.getMean());
				state.addValue(FixesDistanceTimeVarianceAttribute, distanceTime.getVariance());
		
		   		state.addValue(AverageFixedLifespanAttribute, averageFixedLifespan);
		   		state.addValue(AverageCausedLifespanAttribute, averageCausedLifespan);
			}	   		
		}
  	}
}

