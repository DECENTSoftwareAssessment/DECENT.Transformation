import "../libraries/cfa/cfa2plantuml.eol";
import "../libraries/decent/common.eol";
import "../libraries/decent/logging.eol";

pre mgInitPre {

  //Some initialization
  //More generic (might be simplified)
  "Running mg2cfa".log(1);
  var start = Native("java.lang.System").currentTimeMillis();
  /********************************** INIT (1x) *******************************/

  var attributes = new Map;
  attributes.put("Hunks","Number of changed fragments");
  attributes.put("BugFix","Bug Fix revision label based on regular expressions applied to revision messages");
  attributes.put("WeightFactor","Weight factor for state used in calculating weights for causes");
  attributes.put("TotalWeight","Calculated total weight reflecting all caused states disregarding whether they were labelled as states of interest and assigned a corresponding weight factor");
  attributes.put("TotalBugWeight","Calculated total bug weight reflecting all caused states that were labelled as states of interest and assigned a corresponding weight factor");
  attributes.put("AverageWeight","Calculated average weight by dividing the total weight by the number of caused states");
  attributes.put("AverageBugWeight","Calculated average bug weight by dividing the total bug weight by the number of caused states");
  
  for (a in attributes.keySet()) {
	var Attribute = new CFA!Attribute;
	Attribute.name = a;
	Attribute.description = attributes.get(a);
  }

  var HunksAttribute = CFA!Attribute.allInstances().select(a|a.name = "Hunks").first();
  var BugFixAttribute = CFA!Attribute.allInstances().select(a|a.name = "BugFix").first();
  var WeightFactorAttribute = CFA!Attribute.allInstances().select(a|a.name = "WeightFactor").first();
  var TotalWeightAttribute = CFA!Attribute.allInstances().select(a|a.name = "TotalWeight").first();
  var TotalBugWeightAttribute = CFA!Attribute.allInstances().select(a|a.name = "TotalBugWeight").first();
  var AverageBugWeightAttribute = CFA!Attribute.allInstances().select(a|a.name = "AverageBugWeight").first();
  var AverageWeightAttribute = CFA!Attribute.allInstances().select(a|a.name = "AverageWeight").first();
  

  var factors = new Map;
  factors.put("BugFix","Bug Fix factor derived from revision label based on regular expressions applied to revision messages");
  for (a in factors.keySet()) {
	var factor = new CFA!Factor;
	factor.name = a;
	factor.description = factors.get(a);
  }
  
  var BugFixFactor = CFA!Factor.allInstances().select(a|a.name = "BugFix").first();
  


}

post mgInitPost{
    ("Post processing... ").log(2);
    //initialize all attributes to 0?
	var defaultValue = 0.asDouble();
    for (s in CFA!State.allInstances()) {
		for (factor in s.factors.values) {
			factor.put(TotalWeightAttribute,defaultValue);
			factor.put(TotalBugWeightAttribute,defaultValue);
			factor.put(AverageWeightAttribute,defaultValue);
			factor.put(AverageBugWeightAttribute,defaultValue);
    	}
    }
    for (s in CFA!State.allInstances()) {
    	var fixes = s.fixes.size();
    	if (fixes = 0) {
    		fixes = 1.asDouble();
    	}
        for (f in s.fixes) {
        	//TODO:Handle other factors as well
        	//TODO:Consider moving the hard attributes to the attribute entry to avoid the mess
        	var value; 
        	for (factor in f.factors.values) {
        		value = factor.get(TotalWeightAttribute) + (1/fixes);
        		factor.put(TotalWeightAttribute,value);
        		value = factor.get(TotalBugWeightAttribute) + factor.get(WeightFactorAttribute) * (1/fixes);
        		factor.put(TotalBugWeightAttribute,value);
        	}
        	
        	//TODO: legacy
            f.totalWeight = f.totalWeight + (1/fixes);
            f.totalBugWeight = f.totalBugWeight + s.weightFactor * (1/fixes);
        }
    }
    for (s in CFA!State.allInstances()) {
    	var causes = s.causes.size();
    	if (causes = 0) {
    		causes = 1.asDouble();
    	}
    	var value; 
    	for (factor in s.factors.values) {
    		value = factor.get(TotalWeightAttribute) / causes;
    		factor.put(AverageWeightAttribute,value);
    		//TODO: differentiate between bug causes?
    		value = factor.get(TotalBugWeightAttribute) / causes;
    		factor.put(AverageBugWeightAttribute,value);
    	}
    	
    	//TODO: legacy
        s.averageWeight = s.totalWeight / causes;
        s.averageBugWeight = s.totalBugWeight / causes;
    }
        
    var end = Native("java.lang.System").currentTimeMillis();
    var duration = end - start;
    ("Duration: "+duration.toMinutes().round(5)).log(1);
        
}


rule Models
    transform s : MG!Model 
    to t : CFA!CFN {
    ("Transforming model "+ s.name +", URI: " +s.uri).log(3);    
    t.name = s.name;
    for (a in attributes.keySet()) {
		var Attribute = CFA!Attribute.allInstances().select(x|x.name = a).first();
		t.attributes.add(Attribute);
 	}
    for (a in factors.keySet()) {
		var factor = CFA!Factor.allInstances().select(x|x.name = a).first();
		t.factors.add(factor);
 	}
    
}

rule Revisions
    transform r : MG!Revision 
    to s : CFA!GlobalState {
    //TODO: remove limits
    ("Transforming "+ r.commit_id +" Fix: " +r.is_bug_fix).log(3);
    s.cfn = r.repository.equivalent();
    s.revision = r;
    s.ID = r.commit_id;
    s.name = ""+r.commit_id;
    
    s.factors.put(BugFixFactor,new Map);
    s.factors.get(BugFixFactor).put(HunksAttribute, r.hunks.size().asDouble());
    s.factors.get(BugFixFactor).put(BugFixAttribute, r.is_bug_fix.asDouble());
    s.factors.get(BugFixFactor).put(WeightFactorAttribute, r.is_bug_fix.asDouble());

	//TODO: legacy
    s.hunks = r.hunks.size();
    s.bugFix = r.is_bug_fix.asDouble();
    s.weightFactor = r.is_bug_fix.asDouble();

    //s.fixesWeightFactor = 1.asDouble();
    
    //necessary?
    var totalFixCount = 0;
    for (h in r.hunks) {
        totalFixCount = totalFixCount+h.hunkBlame.size();
	}
    
    for (h in r.hunks) {
        for (hb in h.hunkBlame) {
            var cause = hb.lastRevision.equivalent(); 
            s.fixes.add(cause);
            cause.causes.add(s); 
            
            //necessary?
            //var weight = 1/totalFixCount.asDouble();
            //cause.totalWeight = cause.totalWeight + weight;
            //cause.totalBugWeight = cause.totalBugWeight + s.weightFactor*weight;
        }
    }        
}

rule Actions
    transform a : MG!Action 
    to s : CFA!ArtifactState {
    //TODO: investigate causes for missing links (copy, rename, other?), try branch filtering, etc...
    //-> keep in mind potential odd issues with svn-bridges and such 
    //-> use different projects for the time being (yakuake?)
    //-> disregard these problems for the time being

    ("Transforming "+ a.file.file_name+"_Mr"+a.revision.commit_id+" Fix: " +a.revision.is_bug_fix).log(3);
    s.file = a.file;
    s.action = a;
    //s.name = a.file.file_name+"_Mr"+a.revision.commit_id;
    s.name = a.current_file_path;
    s.ID = a.revision.commit_id;
    
    var hunks = a.revision.hunks.select(h|h.file = a.file);
    
    s.factors.put(BugFixFactor,new Map);
    s.factors.get(BugFixFactor).put(HunksAttribute, hunks.size().asDouble());
    s.factors.get(BugFixFactor).put(BugFixAttribute, a.revision.is_bug_fix.asDouble());
    s.factors.get(BugFixFactor).put(WeightFactorAttribute, a.revision.is_bug_fix.asDouble());
    
    //TODO: legacy
    s.hunks = hunks.size();
    s.bugFix = a.revision.is_bug_fix.asDouble();
    s.weightFactor = a.revision.is_bug_fix.asDouble();

    s.globalState = a.revision.equivalent();

	//consider moving to preprocessing
	//not sure this is needed any longer
	if (a.copy.isDefined()) {
        a.file.~copyFrom = a.copy.fromFile;
	}	

	//consider moving to post for performance
    for (h in hunks) {
        for (hb in h.hunkBlame) {
        	//NOTE: using the file name rather than the file seems to fix resolution issues
            var cause = hb.lastRevision.actions.select(ax|ax.file.file_name = a.file.file_name).first().equivalent();

			if (cause.isUndefined()) {
            	//NOTE: file name may still be a problem with renaming, try backup approach with file itself
            	cause = hb.lastRevision.actions.select(ax|ax.file = a.file).first().equivalent();
			}

            if (cause.isDefined()) {
	            s.fixes.add(cause);
	            cause.causes.add(s); 
            } 
            else {
            	//log and investigate errors (wrong blames or copied/renamed files?)
            	//("  Cause link for File "+a.file.file_name+" from Revision "+h.revision.commit_id+" to Revision "+hb.lastRevision.commit_id+" cannot be resolved.. Investigate!").log(1);
/*	            	if (a.file.~copyFrom.isUndefined()) {
	            		if (a.copy.isDefined()) {
				            a.file.~copyFrom = a.copy.fromFile;
	            		} else {
	            			("  Cause link for File "+a.file.file_name+" from Revision "+h.revision.commit_id+" to Revision "+hb.lastRevision.commit_id+" cannot be resolved.. Investigate!").log(1);
	            		}
	            	}
*/	            	cause = hb.lastRevision.actions.select(ax|ax.file = a.file.~copyFrom).first().equivalent();
	            if (cause.isDefined()) {
		            s.fixes.add(cause);
		            cause.causes.add(s);
	            } else {
	            	("  Cause link for File "+a.file.file_name+" from Revision "+h.revision.commit_id+" to Revision "+hb.lastRevision.commit_id+" still cannot be resolved.. Investigate!").log(2);
	            } 
            	
            }
	            
            //necessary?
            //var weight = 1/totalFixCount.asDouble();
            //cause.totalWeight = cause.totalWeight + weight;
            //cause.totalBugWeight = cause.totalBugWeight + s.weightFactor*weight;
        }
    }        


}
