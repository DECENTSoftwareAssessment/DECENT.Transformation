import "../libraries/cfa/cfa2plantuml.eol";
import "../libraries/cfa/common.eol";
import "../libraries/decent/common.eol";
import "../libraries/decent/logging.eol";

pre mgInitPre {

  //Some initialization
  //More generic (might be simplified)
  "Running mg2cfa".log(1);
  var start = Native("java.lang.System").currentTimeMillis();
  /********************************** INIT (1x) *******************************/

  var attributes = new Map;
  attributes.put("WeightFactor","Weight factor for state used in calculating weights for causes");
  attributes.put("TotalWeight","Calculated total weight reflecting all caused states disregarding whether they were labelled as states of interest and assigned a corresponding weight factor");
  attributes.put("AverageWeight","Calculated average weight by dividing the total weight by the number of caused states");
  
  for (a in attributes.keySet()) {
	var Attribute = new CFA!CFAAttribute;
	Attribute.name = a;
	Attribute.description = attributes.get(a);
  }

  var HunksAttribute = "Hunks".getCFAAttribute();
  var BugFixAttribute = "BugFix".getCFAAttribute();
  var WeightFactorAttribute = "WeightFactor".getCFAAttribute();
  var TotalWeightAttribute = "TotalWeight".getCFAAttribute();
  var AverageWeightAttribute = "AverageWeight".getCFAAttribute();
  
  var factors = new Map;
  factors.put("BugFix","Bug Fix factor derived from revision label based on regular expressions applied to revision messages");
  factors.put("Default","Default factor - for every change, used as a baseline");

  //var traceAvailable = repository.getModelByNameSafe("TRACE").isDefined();

  for (a in factors.keySet()) {
	var factor = new CFA!Factor;
	factor.name = a;
	factor.description = factors.get(a);
  }
  
  var BugFixFactor = CFA!Factor.allInstances().select(a|a.name = "BugFix").first();
  var DefaultFactor = CFA!Factor.allInstances().select(a|a.name = "Default").first();
}


post mgInitPost{
    ("Post processing... ").log(2);
    calculateTotalFactorWeights();
    calculateAverageFactorWeights();
        
    var end = Native("java.lang.System").currentTimeMillis();
    var duration = end - start;
    ("Duration: "+duration.toMinutes().round(5)).log(1);
        
}

rule Models
    transform s : MG!Model 
    to t : CFA!CFN {
    ("Transforming model "+ s.name +", URI: " +s.uri).log(3);    
    t.name = s.name;
    for (a in attributes.keySet()) {
		var Attribute = a.getCFAAttribute();
		t.attributes.add(Attribute);
 	}
    for (a in factors.keySet()) {
		var factor = CFA!Factor.allInstances().select(x|x.name = a).first();
		t.factors.add(factor);
 	}
    
}

rule Revisions
    transform r : MG!Revision 
    to s : CFA!GlobalState {
    //TODO: remove limits
    ("Transforming "+ r.commit_id +" Fix: " +r.is_bug_fix).log(3);
    s.cfn = r.repository.equivalent();
    s.revision = r;
    s.ID = r.commit_id;
    s.name = ""+r.commit_id;
    
    s.addFactor(BugFixFactor, r.is_bug_fix.asDouble());
    s.addFactor(DefaultFactor, 1.asDouble());
	
    s.hunks = r.hunks.size();
    s.bugFix = r.is_bug_fix.asDouble();
    s.weightFactor = r.is_bug_fix.asDouble();
    
    for (h in r.hunks) {
        for (hb in h.hunkBlame) {
            var cause = hb.lastRevision.equivalent(); 
            s.fixes.add(cause);
        }
    }        
}

rule Actions
    transform a : MG!Action 
    to s : CFA!ArtifactState {
    //TODO: investigate causes for missing links (copy, rename, other?), try branch filtering, etc...
    //-> keep in mind potential odd issues with svn-bridges and such 
    //-> use different projects for the time being (yakuake?)
    //-> disregard these problems for the time being

    ("Transforming "+ a.file.file_name+"_Mr"+a.revision.commit_id+" Fix: " +a.revision.is_bug_fix).log(3);
    s.file = a.file;
    s.action = a;
    s.name = a.current_file_path;
    s.ID = a.revision.commit_id;
    
    //TODO: restructure such that network is created as default and factors and weights are added afterwards
    //as separate modules 
    //TODO: split these across the number of artifact states?
    //->default inherits the bug_fix as is
    //->change only if sufficient evidence present
    //->perform necessary investigations to collect evidence
    s.addFactor(BugFixFactor, a.revision.is_bug_fix.asDouble());
    s.addFactor(DefaultFactor, 1.asDouble());
    
    //legacy
    var hunks = a.revision.hunks.select(h|h.file = a.file);
    s.hunks = hunks.size();
    s.bugFix = a.revision.is_bug_fix.asDouble();
    s.weightFactor = a.revision.is_bug_fix.asDouble();

    s.globalState = a.revision.equivalent();

	//consider moving to post for performance
    for (h in hunks) {
        for (hb in h.hunkBlame) {
        	//NOTE: using the file name rather than the file seems to fix resolution issues
            var cause = hb.lastRevision.actions.select(ax|ax.file.file_name = a.file.file_name).first().equivalent();

			if (cause.isUndefined()) {
            	//NOTE: file name may still be a problem with renaming, try backup approach with file itself
            	cause = hb.lastRevision.actions.select(ax|ax.file = a.file).first().equivalent();
			}

            if (cause.isDefined()) {
	            s.fixes.add(cause);
            } 
            else {
            	cause = hb.lastRevision.actions.select(ax|ax.file = a.file.~copyFrom).first().equivalent();
	            if (cause.isDefined()) {
		            s.fixes.add(cause);
	            } else {
	            	("  Cause link for File "+a.file.file_name+" from Revision "+h.revision.commit_id+" to Revision "+hb.lastRevision.commit_id+" still cannot be resolved.. Investigate!").log(2);
	            } 
            	
            }
	            
        }
    }        


}
