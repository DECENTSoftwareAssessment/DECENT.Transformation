import "../libraries/decent/common.eol";
import "../libraries/decent/logging.eol";

var step = "experience2decent3"; 
("Running "+step).log(1);

var start = Native("java.lang.System").currentTimeMillis();

var Model = DECENT!Model.allInstances().first();

  var NOA = addAttribute("Agent.EXP.NOA","Number of own activities");
  var NFA = addAttribute("Agent.EXP.NFA","Number of foreign activities");
  var NKA = addAttribute("Agent.EXP.NKA","Number of known artifacts");
  var RKA = addAttribute("Agent.EXP.RKA","Ratio of known artifacts");
  var ROF = addAttribute("Agent.EXP.ROF","Ratio of own to foreign activities");
  var ROA = addAttribute("Agent.EXP.ROA","Ratio of own activities");

  var ATime = "VCS.AuthorTime".getAttribute();
  var CTime = "VCS.CommitTime".getAttribute();

  var CC = addAttribute("EXP.CC","Number of states of the artifact authored by the author of the target state");
  var CCR = addAttribute("EXP.CCR","Ratio of states authored by the developer to states authored by everyone");
  var ACCR = addAttribute("EXP.ACCR","1 / EXP.CC");
  var CF = addAttribute("EXP.CF","Developer contribution focus (EXP.CC/EXP.NOA)");
  var CL = addAttribute("EXP.CL","Developer contributed LOC");
  var CR = addAttribute("EXP.CR","Developer contributed LOC ratio");

  //TODO: consider also adding fractals or variance over contributions in a state and overall
  var OCL = addAttribute("Agent.EXP.OCL","Overall developer contributed LOC");
  var OCR = addAttribute("Agent.EXP.OCR","Overall developer contributed LOC ratio");


  var LinesPostAttribute = "VCS.LinesPost".getAttribute();
  var HitsPostAttribute = "HITS.LinesPostHits".getAttribute();


var nestedAnonymousClassFilter = "\"[\\w]+\\$[\\d]+.*\"";


addActivityCounts(null);
addTypedActivityCounts();

addActivityDeltas(null);
addTypedActivityDeltas();

addArtifactExperience();

var end = Native("java.lang.System").currentTimeMillis();
var duration = end - start;
Model.content.add(step);
Model.addStep(step,duration.toMinutes().round(5));

("Duration: "+duration.toMinutes().round(5)).log(1);

//TODO: MOVE TO A SEPARATE MODULE
var tool = new Native("epsilon.tools.Bridge");
tool.run(Model.agentPool.agents);


operation addArtifactExperience() {
	var artifacts = DECENT!Artifact.allInstances().select(x|not x.name.matches(nestedAnonymousClassFilter)).sortBy(x|x.name);
	for (a in artifacts) {
		("Processing ["+a.type.name+"] "+a.name).log(2);
		var HA = HitsPostAttribute;
		if (a.isMGType()) {
			HA = LinesPostAttribute;
		}
		for (agent in DECENT!Agent.allInstances()) {
			agent.~cloc = 0;
		}
		var tcloc = 0;
		var states = a.states.select(x|x.isHit()).sortBy(x|x.ID);
		for (s in states) {
			var agent = s.fromActivity.first().agentState.agent;
			
			var authorExperience = states.select(x|x.fromActivity.first().agentState.agent = agent and x.ID <= s.ID).size();
			s.addValue(CC, authorExperience.asDouble());
			var statesSoFar = states.select(x|x.ID <= s.ID).size();		
			s.addValue(CCR, authorExperience.asDouble()/statesSoFar.asDouble());
			var collaboratorCount = states.select(x|x.ID <= s.ID).collect(x|x.fromActivity.first().agentState.agent).asSet().size();
			s.addValue(ACCR, 1.asDouble()/collaboratorCount.asDouble());
			var NOAt = (NOA.name+"."+a.type.name).getAttribute();
			var cf = authorExperience.asDouble()/s.fromActivity.first().agentState.getValue(NOAt).content;
			s.addValue(CF, cf);
			
			var hits = s.getValue(HA).content.size();
			agent.~cloc = agent.~cloc+hits;
			tcloc = tcloc+hits;
			s.addValue(CL, agent.~cloc.asDouble());
			s.addValue(CR, agent.~cloc.asDouble()/tcloc.asDouble());

			var aState = s.fromActivity.first().agentState;
			aState.~cloc = aState.~cloc+hits; 
		}
	}
}

operation addActivityDeltas(type : DECENT!ArtifactType) {
	var NOAt = NOA;
	var NFAt = NFA;
	var NKAt = NKA;
	var RKAt = RKA;
	var ROFt = ROF;
	var ROAt = ROA;
	var OCLt = OCL;
	var OCRt = OCR;
	if (not type.isUndefined()) {
		("+++++++++++ "+type.name + " ++++++++++++++").log(3);
		NOAt = addAttribute(NOA.name+"."+type.name,NOA.description+" ("+type.name+")");
		NFAt = addAttribute(NFA.name+"."+type.name,NFA.description+" ("+type.name+")");
		NKAt = addAttribute(NKA.name+"."+type.name,NKA.description+" ("+type.name+")");
		RKAt = addAttribute(RKA.name+"."+type.name,RKA.description+" ("+type.name+")");
		ROFt = addAttribute(ROF.name+"."+type.name,ROF.description+" ("+type.name+")");
		ROAt = addAttribute(ROA.name+"."+type.name,ROA.description+" ("+type.name+")");
		OCLt = addAttribute(OCL.name+"."+type.name,OCL.description+" ("+type.name+")");
		OCRt = addAttribute(OCR.name+"."+type.name,OCR.description+" ("+type.name+")");
		
	}
	for (a in DECENT!Agent.allInstances()) {
		for (s in a.states) {
			s.fromWorkload.addDelta(NOAt);
			s.fromWorkload.addDelta(NFAt);
			s.fromWorkload.addDelta(NKAt);
			s.fromWorkload.addDelta(RKAt);
			s.fromWorkload.addDelta(ROFt);
			s.fromWorkload.addDelta(ROAt);
			s.fromWorkload.addDelta(OCLt);
			s.fromWorkload.addDelta(OCRt);
		}
	}
}


operation addActivityCounts(type : DECENT!ArtifactType) {
	var NOAt = NOA;
	var NFAt = NFA;
	var NKAt = NKA;
	var RKAt = RKA;
	var ROFt = ROF;
	var ROAt = ROA;
	var OCLt = OCL;
	var OCRt = OCR;
	if (not type.isUndefined()) {
		("+++++++++++ "+type.name + " ++++++++++++++").log(3);
		NOAt = addAttribute(NOA.name+"."+type.name,NOA.description+" ("+type.name+")");
		NFAt = addAttribute(NFA.name+"."+type.name,NFA.description+" ("+type.name+")");
		NKAt = addAttribute(NKA.name+"."+type.name,NKA.description+" ("+type.name+")");
		RKAt = addAttribute(RKA.name+"."+type.name,RKA.description+" ("+type.name+")");
		ROFt = addAttribute(ROF.name+"."+type.name,ROF.description+" ("+type.name+")");
		ROAt = addAttribute(ROA.name+"."+type.name,ROA.description+" ("+type.name+")");
		OCLt = addAttribute(OCL.name+"."+type.name,OCL.description+" ("+type.name+")");
		OCRt = addAttribute(OCR.name+"."+type.name,OCR.description+" ("+type.name+")");
	}
	
	var counts = new Map();
	var total = 0;
	var allArtifacts = new Set();
	var tcl = 0.asDouble();
	for (agent in DECENT!Agent.allInstances()) {
		agent.~ocl = 0.asDouble();
	}
	
	
	for (s in DECENT!AgentState.allInstances().sortBy(x|x.date.time)) {
		(s.agent.name +" : " + s.ID + " : " + s.date).log(3);
		var activities = s.activities.select(a|a.targetState.isHit());
		if (not type.isUndefined()) {
			activities = activities.select(a|a.targetState.artifact.type = type);
		}
		
		var stateArtifacts = activities.collect(a|a.targetState.artifact);
		for (a in stateArtifacts) {
			("  "+a.name).log(3);
		}
		allArtifacts.addAll(stateArtifacts);
		
		var aCount = activities.size(); //TODO: filter?
		total = total + aCount;
		if (not counts.containsKey(s.agent)) {
			counts.put(s.agent,new Map());
			counts.get(s.agent).put(NOAt, 0);
			counts.get(s.agent).put(NFAt, 0);
			counts.get(s.agent).put(NKAt, new Set());
		}
		var own = counts.get(s.agent).get(NOAt)+aCount;
		var foreign = total-counts.get(s.agent).get(NOAt)-aCount;
		//("  " +total +" = " + own + " + " + foreign +" ::: " +aCount).log(1);

		counts.get(s.agent).put(NOAt, own);
		counts.get(s.agent).put(NFAt, foreign);
		counts.get(s.agent).get(NKAt).addAll(stateArtifacts);
		//counts.get(s.agent).put(ROFt, own/foreign);
		//counts.get(s.agent).put(ROAt, own/total);
		
		s.addValue(NOAt, counts.get(s.agent).get(NOAt).asDouble());
		s.addValue(NFAt, counts.get(s.agent).get(NFAt).asDouble());
		if (total > 0) {
			s.addValue(ROAt, own.asDouble()/total.asDouble());
		} else {
			s.addValue(ROAt, own.asDouble());
		}
		if (foreign > 0) {
			s.addValue(ROFt, own.asDouble()/foreign.asDouble());
		} else {
			s.addValue(ROFt, own.asDouble());
		}

		s.addValue(NKAt, counts.get(s.agent).get(NKAt).size().asDouble());
		if (allArtifacts.size() > 0) {
			s.addValue(RKAt, counts.get(s.agent).get(NKAt).size().asDouble()/allArtifacts.size().asDouble());
		} else {
			s.addValue(RKAt, counts.get(s.agent).get(NKAt).size().asDouble());
		}
		
		
		var ocl = 0.asDouble();
		var ocr = 0.asDouble();
		for (ax in activities) {
			var ts = ax.targetState;
			var artifact = ts.artifact;
			var HA = HitsPostAttribute;
			if (artifact.isMGType()) {
				HA = LinesPostAttribute;
			}
			var hits = ts.getValue(HA).content.size();
			ocl = ocl+hits;
		}
		tcl = tcl + ocl;
		s.agent.~ocl = s.agent.~ocl+ocl;
		if (tcl > 0) {
			ocr = s.agent.~ocl/tcl;
		} 
		s.addValue(OCLt, s.agent.~ocl);
		s.addValue(OCRt, ocr);
	}
}

operation addTypedActivityCounts() {
	for (t in DECENT!ArtifactType.allInstances().sortBy(x|x.name)) {
		addActivityCounts(t);
	}
}

operation addTypedActivityDeltas() {
	for (t in DECENT!ArtifactType.allInstances().sortBy(x|x.name)) {
		addActivityDeltas(t);
	}
}
