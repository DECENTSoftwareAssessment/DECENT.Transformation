//import "cfa-init.etl";
import "../libraries/decent/common.eol";

pre {
  //Some initialization
  "Running cfa2decent3".println();
  ("DECENT States: "+DECENT!State.allInstances().size()).println();
  var Model = DECENT!Model.allInstances().first();


  ("Initializing CFA definitions").println();
  //This should only run once!!!
  
  var attributes = new Map;
  
  attributes.put("BugFix","Local (artifact) label as bug fix from revision message");
  attributes.put("WeightFactor","Local (artifact) weight factor from CFA analysis");
  attributes.put("TotalWeight","Total local (artifact) cause weight from CFA analysis (total weight for caused changes)");
  attributes.put("AverageWeight","Average local (artifact) cause weight from CFA analysis (average weight for caused changes)");
  attributes.put("TotalBugWeight","Total local (artifact) bug cause weight from CFA analysis (total weight for caused fixes)");
  attributes.put("AverageBugWeight","Average local (artifact) bug cause weight from CFA analysis (average weight for caused fixes)");
  attributes.put("CausesCount","Number of caused changes in future states of artifact");
  attributes.put("FixesCount","Number of causing past states of artifact");
  attributes.put("GlobalBugFix","Global label as bug fix from revision message");
  attributes.put("GlobalWeightFactor","Global (revision) weight factor from CFA analysis");
  attributes.put("GlobalTotalWeight","Total global (revision) cause weight from CFA analysis (total weight for caused changes)");
  attributes.put("GlobalAverageWeight","Average global (revision) cause weight from CFA analysis (average weight for caused changes)");
  attributes.put("GlobalTotalBugWeight","Total global (revision) bug cause weight from CFA analysis (total weight for caused fixes)");
  attributes.put("GlobalAverageBugWeight","Average global (revision) bug cause weight from CFA analysis (average weight for caused fixes)");
  attributes.put("GlobalCausesCount","Number of caused changes in future states of global state (revision)");
  attributes.put("GlobalFixesCount","Number of causing past states of global state (revision)");

  attributes.put("CarriedTotalBugWeight","Accumulated total local (artifact) bug cause weight from past states");
  attributes.put("ClearedTotalBugWeight","Cleared total local (artifact) bug cause weight");

  //TODO: these may need to be pre-calculated in mg2cfa
  attributes.put("AverageFixedLifespan","");
  attributes.put("AverageFixedBugLifespan","");
  attributes.put("AverageCausedLifespan","");
  attributes.put("AverageCausedBugLifespan","");

  Model.addAttributes(attributes);
  
  var BugFixAttribute = DECENT!Attribute.allInstances().select(a|a.name = "BugFix").first();
  var WeightFactorAttribute = DECENT!Attribute.allInstances().select(a|a.name = "WeightFactor").first();
  var TotalWeightAttribute = DECENT!Attribute.allInstances().select(a|a.name = "TotalWeight").first();
  var AverageWeightAttribute = DECENT!Attribute.allInstances().select(a|a.name = "AverageWeight").first();
  var TotalBugWeightAttribute = DECENT!Attribute.allInstances().select(a|a.name = "TotalBugWeight").first();
  var AverageBugWeightAttribute = DECENT!Attribute.allInstances().select(a|a.name = "AverageBugWeight").first();
  var CausesCountAttribute = DECENT!Attribute.allInstances().select(a|a.name = "CausesCount").first();
  var FixesCountAttribute = DECENT!Attribute.allInstances().select(a|a.name = "FixesCount").first();

  var GlobalBugFixAttribute = DECENT!Attribute.allInstances().select(a|a.name = "GlobalBugFix").first();
  var GlobalWeightFactorAttribute = DECENT!Attribute.allInstances().select(a|a.name = "GlobalWeightFactor").first();
  var GlobalTotalWeightAttribute = DECENT!Attribute.allInstances().select(a|a.name = "GlobalTotalWeight").first();
  var GlobalAverageWeightAttribute = DECENT!Attribute.allInstances().select(a|a.name = "GlobalAverageWeight").first();
  var GlobalTotalBugWeightAttribute = DECENT!Attribute.allInstances().select(a|a.name = "GlobalTotalBugWeight").first();
  var GlobalAverageBugWeightAttribute = DECENT!Attribute.allInstances().select(a|a.name = "GlobalAverageBugWeight").first();
  var GlobalCausesCountAttribute = DECENT!Attribute.allInstances().select(a|a.name = "GlobalCausesCount").first();
  var GlobalFixesCountAttribute = DECENT!Attribute.allInstances().select(a|a.name = "GlobalFixesCount").first();

  var CarriedTotalBugWeightAttribute = DECENT!Attribute.allInstances().select(a|a.name = "CarriedTotalBugWeight").first();
  var ClearedTotalBugWeightAttribute = DECENT!Attribute.allInstances().select(a|a.name = "ClearedTotalBugWeight").first();

  var AverageFixedLifespanAttribute = DECENT!Attribute.allInstances().select(a|a.name = "AverageFixedLifespan").first();
  var AverageFixedBugLifespanAttribute = DECENT!Attribute.allInstances().select(a|a.name = "AverageFixedBugLifespan").first();
  var AverageCausedLifespanAttribute = DECENT!Attribute.allInstances().select(a|a.name = "AverageCausedLifespan").first();
  var AverageCausedBugLifespanAttribute = DECENT!Attribute.allInstances().select(a|a.name = "AverageCausedBugLifespan").first();

  //TODO: need to accumulate a value? i.e. keep a balance of sorts? bug cause adds, bug fix removes
  // - or do we focus only on the states that introduce a bug and the activities that lead to them??
  //   in which case it would make sense to report the target state instead of the source state
  //   which would also prompt the use of a balance for all the weights in order to have a meaningful
  //   delta, or alternatively these could become activity values, although the intuition behind that 
  //   may be unclear 
  //DONE: also investigate the reasons behind those off-the-charts values in the preliminary report
  // -> asumed to be number conversion issues with numbers
  // -> TODO: add normalizationn
  //DONE: need to investigate the failed assignments too, see the log for details
  // -> still an issue after improved assignments?
  //TODO: add ratios, e.g. averageBugWeight/averageWeight, also for totals, define interpretation
  //TODO: add lifespans

  ("...transforming states...").println();
  for (s in CFA!ArtifactState.allInstances()) {
  	var fileName = s.file.file_name;
  	var filePath = s.action.current_file_path;
  	var matchedStates = DECENT!State.allInstances().select(m|m.artifact.isMGtype() and m.ID = s.ID and m.values.select(v|v.name = "FilePath").first().content = filePath);
  	var size = matchedStates.size();
	//check if correct matches can be found 
  	if (size <> 1) {
  		("  "+size+" DECENT matches found for: "+fileName+" at "+s.ID).println();
  		("    Avaliable states at "+s.ID+" are:").println();
  		for (x in DECENT!State.allInstances().select(x|x.artifact.isMGtype() and x.ID = s.ID)) {
  			("      "+x.artifact.name+" at "+x.ID+" ("+x.values.select(v|v.name = "FilePath").first().content+")").println();
  		}
  	} else {
  		var state = matchedStates.first();
  		
  		for (a in attributes.keySet()) {
			state.values.removeAll(state.values.select(v|v.ofAttribute.name = a));
		}
  		
  		state.addValue(BugFixAttribute, s.bugFix);
  		state.addValue(WeightFactorAttribute, s.weightFactor);
  		state.addValue(TotalWeightAttribute, s.totalWeight);
  		state.addValue(TotalBugWeightAttribute, s.totalBugWeight);
  		state.addValue(AverageWeightAttribute, s.averageWeight);
  		state.addValue(AverageBugWeightAttribute, s.averageBugWeight);
  		state.addValue(CausesCountAttribute, s.causes.size().asDouble());
  		state.addValue(FixesCountAttribute, s.fixes.size().asDouble());

  		state.addValue(GlobalBugFixAttribute, s.globalState.bugFix);
  		state.addValue(GlobalWeightFactorAttribute, s.globalState.weightFactor);
  		state.addValue(GlobalTotalWeightAttribute, s.globalState.totalWeight);
  		state.addValue(GlobalTotalBugWeightAttribute, s.globalState.totalBugWeight);
  		state.addValue(GlobalAverageWeightAttribute, s.globalState.averageWeight);
  		state.addValue(GlobalAverageBugWeightAttribute, s.globalState.averageBugWeight);
  		state.addValue(GlobalCausesCountAttribute, s.globalState.causes.size().asDouble());
  		state.addValue(GlobalFixesCountAttribute, s.globalState.fixes.size().asDouble());
  		
  		var clearedBugWeight = 0.asDouble();
  		if (s.fixes.size()>0) {
  			clearedBugWeight = s.weightFactor * (s.fixes.size().asDouble()/s.fixes.size().asDouble());
  		}
   		state.addValue(ClearedTotalBugWeightAttribute, clearedBugWeight);
   		
   		//temporal
   		//TODO: consider moving to mg2cfa 
   		//TODO: consider filtering by weight
   		//TODO: considering adding further temporals
   		//TODO: describe intuitions (in particular for average caused lifespans):
   		// - average caused lifespan indicates the lifespan of the changes / lines changed in the state
   		// - average caused bug lifespan indicates the lifespan of the buggy changes / buggy lines changed in the state
   		// - difference between the two above would indicate that buggy parts were removed faster 
   		//   it would also create bias thus needs to be hidden for machine learning
   		//   but could be used for statistics, filtering, comparison with issue lifetimes and other purposes
   		//   could also be used as target for prediction (whether a piece looks like it may soon be changed, 
   		//   or perhaps also contain a bug that will survive a given number of days)
   		// - not sure what to make out of the average fixed lifespan - i.e. the age of the changed lines
   		//TODO: add for the global states as well for reference
   		//TODO: also consider projecting on the project, agent, and artifact lifespans
   		// - separate values can be calculated for agents
   		var averageFixedLifespan = 0.asDouble();
   		var averageFixedBugLifespan = 0.asDouble();
   		var averageCausedLifespan = 0.asDouble();
   		var averageCausedBugLifespan = 0.asDouble();

		var time = s.action.revision.author_date.time;
		var totalFixedTime = 0;
		for (c in s.fixes) {
			var causeTime = c.action.revision.author_date.time;
			totalFixedTime = totalFixedTime + (time - causeTime);
		}
		if (s.fixes.size() > 0) {
			averageFixedLifespan = (totalFixedTime / s.fixes.size().asDouble()).toDays();
			averageFixedBugLifespan = s.weightFactor*(totalFixedTime / s.fixes.size().asDouble()).toDays();
		}
		
		var totalCausedTime = 0;
		for (f in s.causes) {
			var fixTime = f.action.revision.author_date.time;
			totalCausedTime = totalCausedTime + (fixTime - time);
		}
		if (s.causes.size() > 0) {
			averageCausedLifespan = (totalCausedTime / s.causes.size().asDouble()).toDays();
		}
		
		var totalCausedBugTime = 0;
		var selectedCauses = s.causes.select(c|c.weightFactor > 0);
		for (f in selectedCauses) {
			var fixTime = f.action.revision.author_date.time;
			totalCausedBugTime = totalCausedBugTime + (fixTime - time);
		}
		if (selectedCauses.size() > 0) {
			averageCausedBugLifespan = (totalCausedBugTime / selectedCauses.size().asDouble()).toDays();
		}
		
   		state.addValue(AverageFixedLifespanAttribute, averageFixedLifespan);
   		state.addValue(AverageFixedBugLifespanAttribute, averageFixedBugLifespan);
   		state.addValue(AverageCausedLifespanAttribute, averageCausedLifespan);
   		state.addValue(AverageCausedBugLifespanAttribute, averageCausedBugLifespan);
  		
  	}
  	
  }
  ("...adding carried weights...").println();
  
  for (a in DECENT!Artifact.allInstances().select(x|x.isMGtype())) {
  	var lastWeight = 0.asDouble();
  	for (s in a.states) {
  		var totalBugWeight = s.values.select(v|v.ofAttribute = TotalBugWeightAttribute).first().content;
  		lastWeight = lastWeight + totalBugWeight;
  		var clearedBugWeight = s.values.select(v|v.ofAttribute = ClearedTotalBugWeightAttribute).first().content;
  		lastWeight = lastWeight - clearedBugWeight;
  		s.addValue(CarriedTotalBugWeightAttribute, lastWeight);
  	}
  }
  
  ("...done!").println();
}

post {
  Model.content.add("cfa2decent3");
}

operation DECENT!Artifact isMGtype() : Boolean {
	return self.type.name = "code" or 
		self.type.name = "documentation" or 
		self.type.name = "image" or 
		self.type.name = "devel-doc" or 
		self.type.name = "unknown" or 
		self.type.name = "build" or 
		self.type.name = "ui";
}
