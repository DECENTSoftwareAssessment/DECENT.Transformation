//import "cfa-init.etl";
import "../libraries/decent/common.eol";
import "../libraries/decent/logging.eol";

pre {
  //Some initialization
  "Running cfa2decent3".log(1);
  var start = Native("java.lang.System").currentTimeMillis();
  
  ("DECENT States: "+DECENT!State.allInstances().size()).log(2);
  var Model = DECENT!Model.allInstances().first();


  ("Initializing CFA definitions").log(2);
  //This should only run once!!!
  
  var attributes = new Map;
  
  for (f in CFA!Factor.allInstances()) {
  	//TODO: add dimension
  	for (a in CFA!Attribute.allInstances()) {
  		//TODO: assign dimensions
		attributes.put(f.name+"."+a.name+".Local","Local/Artifact: "+a.description+" ("+f.name+")");
		attributes.put(f.name+"."+a.name+".Global","Global/Agent: "+a.description+" ("+f.name+")");
  	}
  	attributes.put(f.name+".ClearedWeight.Local","Local/Artifact: Cleared weight ("+f.name+")");
  	attributes.put(f.name+".CarriedWeight.Local","Local/Artifact: Carried weight ("+f.name+")");
  }
  //TODO: initialize attributes automagically?
  
  attributes.put("BugFix","Local (artifact) label as bug fix from revision message");
  attributes.put("WeightFactor","Local (artifact) weight factor from CFA analysis");
  attributes.put("TotalWeight","Total local (artifact) cause weight from CFA analysis (total weight for caused changes)");
  attributes.put("AverageWeight","Average local (artifact) cause weight from CFA analysis (average weight for caused changes)");
  attributes.put("TotalBugWeight","Total local (artifact) bug cause weight from CFA analysis (total weight for caused fixes)");
  attributes.put("AverageBugWeight","Average local (artifact) bug cause weight from CFA analysis (average weight for caused fixes)");
  attributes.put("CausesCount","Number of caused changes in future states of artifact");
  attributes.put("FixesCount","Number of causing past states of artifact");
  attributes.put("GlobalBugFix","Global label as bug fix from revision message");
  attributes.put("GlobalWeightFactor","Global (revision) weight factor from CFA analysis");
  attributes.put("GlobalTotalWeight","Total global (revision) cause weight from CFA analysis (total weight for caused changes)");
  attributes.put("GlobalAverageWeight","Average global (revision) cause weight from CFA analysis (average weight for caused changes)");
  attributes.put("GlobalTotalBugWeight","Total global (revision) bug cause weight from CFA analysis (total weight for caused fixes)");
  attributes.put("GlobalAverageBugWeight","Average global (revision) bug cause weight from CFA analysis (average weight for caused fixes)");
  attributes.put("GlobalCausesCount","Number of caused changes in future states of global state (revision)");
  attributes.put("GlobalFixesCount","Number of causing past states of global state (revision)");

  attributes.put("CarriedTotalBugWeight","Accumulated total local (artifact) bug cause weight from past states");
  attributes.put("ClearedTotalBugWeight","Cleared total local (artifact) bug cause weight");

  //TODO: these may need to be pre-calculated in mg2cfa
  attributes.put("AverageFixedLifespan","");
  attributes.put("AverageFixedBugLifespan","");
  attributes.put("AverageCausedLifespan","");
  attributes.put("AverageCausedBugLifespan","");


  attributes.put("CausesAbsoluteTime","Set of distances for causing states to the beginning of time");
  attributes.put("CausesRelativeTime","Set of distances for causing states to the first state");
  attributes.put("CausesDistanceTime","Set of distances for causing states to fixing state");

  attributes.put("CausesAbsoluteTimeVariance","Variance of distances for causing states to the beginning of time");
  attributes.put("CausesRelativeTimeVariance","Variance of distances for causing states to the first state");
  attributes.put("CausesDistanceTimeVariance","Variance of distances for causing states to fixing state");

  attributes.put("FixesAbsoluteTime","Set of distances for fixing states to the beginning of time");
  attributes.put("FixesRelativeTime","Set of distances for fixing states to the first state");
  attributes.put("FixesDistanceTime","Set of distances for fixing states to causing state");

  attributes.put("FixesAbsoluteTimeVariance","Variance of distances for fixing states to the beginning of time");
  attributes.put("FixesRelativeTimeVariance","Variance of distances for fixing states to the first state");
  attributes.put("FixesDistanceTimeVariance","Variance of distances for fixing states to causing state");

  attributes.put("BugFixesAbsoluteTime","Set of distances for bug fixing states to the beginning of time");
  attributes.put("BugFixesRelativeTime","Set of distances for bug fixing states to the first state");
  attributes.put("BugFixesDistanceTime","Set of distances for bug fixing states to causing states");

  attributes.put("BugFixesAbsoluteTimeVariance","Variance of distances for bug fixing states to the beginning of time");
  attributes.put("BugFixesRelativeTimeVariance","Variance of distances for bug fixing states to the first state");
  attributes.put("BugFixesDistanceTimeVariance","Variance of distances for bug fixing states to causing state");


  Model.addAttributes(attributes);
  
  var CFAWeightFactor = CFA!Attribute.allInstances().select(a|a.name = "WeightFactor").first();
  var FilePathAttribute = DECENT!Attribute.allInstances().select(a|a.name = "FilePath").first();
  
  
  var BugFixAttribute = DECENT!Attribute.allInstances().select(a|a.name = "BugFix").first();
  var WeightFactorAttribute = DECENT!Attribute.allInstances().select(a|a.name = "WeightFactor").first();
  var TotalWeightAttribute = DECENT!Attribute.allInstances().select(a|a.name = "TotalWeight").first();
  var AverageWeightAttribute = DECENT!Attribute.allInstances().select(a|a.name = "AverageWeight").first();
  var TotalBugWeightAttribute = DECENT!Attribute.allInstances().select(a|a.name = "TotalBugWeight").first();
  var AverageBugWeightAttribute = DECENT!Attribute.allInstances().select(a|a.name = "AverageBugWeight").first();
  var CausesCountAttribute = DECENT!Attribute.allInstances().select(a|a.name = "CausesCount").first();
  var FixesCountAttribute = DECENT!Attribute.allInstances().select(a|a.name = "FixesCount").first();

  var GlobalBugFixAttribute = DECENT!Attribute.allInstances().select(a|a.name = "GlobalBugFix").first();
  var GlobalWeightFactorAttribute = DECENT!Attribute.allInstances().select(a|a.name = "GlobalWeightFactor").first();
  var GlobalTotalWeightAttribute = DECENT!Attribute.allInstances().select(a|a.name = "GlobalTotalWeight").first();
  var GlobalAverageWeightAttribute = DECENT!Attribute.allInstances().select(a|a.name = "GlobalAverageWeight").first();
  var GlobalTotalBugWeightAttribute = DECENT!Attribute.allInstances().select(a|a.name = "GlobalTotalBugWeight").first();
  var GlobalAverageBugWeightAttribute = DECENT!Attribute.allInstances().select(a|a.name = "GlobalAverageBugWeight").first();
  var GlobalCausesCountAttribute = DECENT!Attribute.allInstances().select(a|a.name = "GlobalCausesCount").first();
  var GlobalFixesCountAttribute = DECENT!Attribute.allInstances().select(a|a.name = "GlobalFixesCount").first();

  var CarriedTotalBugWeightAttribute = DECENT!Attribute.allInstances().select(a|a.name = "CarriedTotalBugWeight").first();
  var ClearedTotalBugWeightAttribute = DECENT!Attribute.allInstances().select(a|a.name = "ClearedTotalBugWeight").first();

  var AverageFixedLifespanAttribute = DECENT!Attribute.allInstances().select(a|a.name = "AverageFixedLifespan").first();
  var AverageFixedBugLifespanAttribute = DECENT!Attribute.allInstances().select(a|a.name = "AverageFixedBugLifespan").first();
  var AverageCausedLifespanAttribute = DECENT!Attribute.allInstances().select(a|a.name = "AverageCausedLifespan").first();
  var AverageCausedBugLifespanAttribute = DECENT!Attribute.allInstances().select(a|a.name = "AverageCausedBugLifespan").first();

  var CausesAbsoluteTimeAttribute = DECENT!Attribute.allInstances().select(a|a.name = "CausesAbsoluteTime").first();
  var CausesRelativeTimeAttribute = DECENT!Attribute.allInstances().select(a|a.name = "CausesRelativeTime").first();
  var CausesDistanceTimeAttribute = DECENT!Attribute.allInstances().select(a|a.name = "CausesDistanceTime").first();

  var CausesAbsoluteTimeVarianceAttribute = DECENT!Attribute.allInstances().select(a|a.name = "CausesAbsoluteTimeVariance").first();
  var CausesRelativeTimeVarianceAttribute = DECENT!Attribute.allInstances().select(a|a.name = "CausesRelativeTimeVariance").first();
  var CausesDistanceTimeVarianceAttribute = DECENT!Attribute.allInstances().select(a|a.name = "CausesDistanceTimeVariance").first();

  var FixesAbsoluteTimeAttribute = DECENT!Attribute.allInstances().select(a|a.name = "FixesAbsoluteTime").first();
  var FixesRelativeTimeAttribute = DECENT!Attribute.allInstances().select(a|a.name = "FixesRelativeTime").first();
  var FixesDistanceTimeAttribute = DECENT!Attribute.allInstances().select(a|a.name = "FixesDistanceTime").first();

  var FixesAbsoluteTimeVarianceAttribute = DECENT!Attribute.allInstances().select(a|a.name = "FixesAbsoluteTimeVariance").first();
  var FixesRelativeTimeVarianceAttribute = DECENT!Attribute.allInstances().select(a|a.name = "FixesRelativeTimeVariance").first();
  var FixesDistanceTimeVarianceAttribute = DECENT!Attribute.allInstances().select(a|a.name = "FixesDistanceTimeVariance").first();

  var BugFixesAbsoluteTimeAttribute = DECENT!Attribute.allInstances().select(a|a.name = "BugFixesAbsoluteTime").first();
  var BugFixesRelativeTimeAttribute = DECENT!Attribute.allInstances().select(a|a.name = "BugFixesRelativeTime").first();
  var BugFixesDistanceTimeAttribute = DECENT!Attribute.allInstances().select(a|a.name = "BugFixesDistanceTime").first();

  var BugFixesAbsoluteTimeVarianceAttribute = DECENT!Attribute.allInstances().select(a|a.name = "BugFixesAbsoluteTimeVariance").first();
  var BugFixesRelativeTimeVarianceAttribute = DECENT!Attribute.allInstances().select(a|a.name = "BugFixesRelativeTimeVariance").first();
  var BugFixesDistanceTimeVarianceAttribute = DECENT!Attribute.allInstances().select(a|a.name = "BugFixesDistanceTimeVariance").first();

  //TODO: need to accumulate a value? i.e. keep a balance of sorts? bug cause adds, bug fix removes
  // - or do we focus only on the states that introduce a bug and the activities that lead to them??
  //   in which case it would make sense to report the target state instead of the source state
  //   which would also prompt the use of a balance for all the weights in order to have a meaningful
  //   delta, or alternatively these could become activity values, although the intuition behind that 
  //   may be unclear 
  //DONE: also investigate the reasons behind those off-the-charts values in the preliminary report
  // -> asumed to be number conversion issues with numbers
  // -> TODO: add normalizationn
  //DONE: need to investigate the failed assignments too, see the log for details
  // -> still an issue after improved assignments?
  //TODO: add ratios, e.g. averageBugWeight/averageWeight, also for totals, define interpretation
  //TODO: add lifespans

  transformArtifactStates();
  addCarriedWeights();
  //addDeltas();
  transformAgentStates();
  
  addArtifactTemporals();
  addAgentTemporals();
  
  ("...done!").log(2);
}

post {
  	Model.content.add("cfa2decent3");
  
    var end = Native("java.lang.System").currentTimeMillis();
    var duration = end - start;
    ("Duration: "+duration.toMinutes().round(5)).log(1);
  
}

operation addArtifactTemporals() {
  ("...adding artifact temporals...").log(2);
  var absoluteTime = new Sequence;
  var relativeTime = new Sequence;
  var distanceTime = new Sequence;
  var resolution = 24*60*60*1000;//days*hours*minutes*seconds
  //resolution = 60*1000;//minutes*seconds
  
  var start = CFA!GlobalState.allInstances().sortBy(x|x.revision.author_date.time).first().revision.author_date.time;
  
  for (s in CFA!ArtifactState.allInstances()) {
	("  " + s.file.file_name + " @ "+s.ID).log(3);
  	var fileName = s.file.file_name;
  	var filePath = s.action.current_file_path;
  	var matchedStates = DECENT!State.allInstances().select(m|m.artifact.isMGtype() and m.ID = s.ID and m.getValue(FilePathAttribute).content = filePath);
  	var size = matchedStates.size();
	//check if correct matches can be found 
  	if (size <> 1) {
  		("  "+size+" DECENT matches found for: "+fileName+" at "+s.ID).log(4);
  		("    Avaliable states at "+s.ID+" are:").log(4);
  		//for (x in DECENT!State.allInstances().select(x|x.artifact.isMGtype() and x.ID = s.ID)) {
  			//("      "+x.artifact.name+" at "+x.ID+" ("+x.getValue(FilePathAttribute).content+")").log(4);
  		//}
  	} else {
  		var state = matchedStates.first();
  
   		//TODO: consider moving to mg2cfa 
   		//TODO: consider filtering by weight
   		//TODO: considering adding further temporals
   		//TODO: describe intuitions (in particular for average caused lifespans):
   		// - average caused lifespan indicates the lifespan of the changes / lines changed in the state
   		// - average caused bug lifespan indicates the lifespan of the buggy changes / buggy lines changed in the state
   		// - difference between the two above would indicate that buggy parts were removed faster 
   		//   it would also create bias thus needs to be hidden for machine learning
   		//   but could be used for statistics, filtering, comparison with issue lifetimes and other purposes
   		//   could also be used as target for prediction (whether a piece looks like it may soon be changed, 
   		//   or perhaps also contain a bug that will survive a given number of days)
   		// - not sure what to make out of the average fixed lifespan - i.e. the age of the changed lines
   		//TODO: add for the global states as well for reference
   		//TODO: also consider projecting on the project, agent, and artifact lifespans
   		// - separate values can be calculated for agents
   		var averageFixedLifespan = 0.asDouble();
   		var averageFixedBugLifespan = 0.asDouble();
   		var averageCausedLifespan = 0.asDouble();
   		var averageCausedBugLifespan = 0.asDouble();

		absoluteTime.clear();
		relativeTime.clear();
		distanceTime.clear();

		var time = s.action.revision.author_date.time;
		var totalFixedTime = 0;
		for (c in s.fixes) {
			var causeTime = c.action.revision.author_date.time;
			totalFixedTime = totalFixedTime + (time - causeTime);
			absoluteTime.add(causeTime.asDouble()/resolution);
			relativeTime.add((causeTime - start).asDouble()/resolution);
			distanceTime.add((time - causeTime).asDouble()/resolution);
		}
		if (s.fixes.size() > 0) {
			averageFixedLifespan = (totalFixedTime / s.fixes.size().asDouble()).toDays();
			averageFixedBugLifespan = s.weightFactor*(totalFixedTime / s.fixes.size().asDouble()).toDays();
		}
		
  		state.addDoubleCollectionValue(CausesAbsoluteTimeAttribute, absoluteTime);
  		state.addValue(CausesAbsoluteTimeVarianceAttribute, absoluteTime.getVariance());

  		state.addDoubleCollectionValue(CausesRelativeTimeAttribute, relativeTime);
		state.addValue(CausesRelativeTimeVarianceAttribute, relativeTime.getVariance());
		
  		state.addDoubleCollectionValue(CausesDistanceTimeAttribute, distanceTime);
		state.addValue(CausesDistanceTimeVarianceAttribute, distanceTime.getVariance());

		
		absoluteTime.clear();
		relativeTime.clear();
		distanceTime.clear();
		
		var totalCausedTime = 0;
		for (f in s.causes) {
			var fixTime = f.action.revision.author_date.time;
			totalCausedTime = totalCausedTime + (fixTime - time);
			absoluteTime.add(fixTime.asDouble()/resolution);
			relativeTime.add((fixTime - start).asDouble()/resolution);
			distanceTime.add((fixTime - time).asDouble()/resolution);
		}
		if (s.causes.size() > 0) {
			averageCausedLifespan = (totalCausedTime / s.causes.size().asDouble()).toDays();
		}
		
  		state.addDoubleCollectionValue(FixesAbsoluteTimeAttribute, absoluteTime);
  		state.addValue(FixesAbsoluteTimeVarianceAttribute, absoluteTime.getVariance());

  		state.addDoubleCollectionValue(FixesRelativeTimeAttribute, relativeTime);
		state.addValue(FixesRelativeTimeVarianceAttribute, relativeTime.getVariance());
		
  		state.addDoubleCollectionValue(FixesDistanceTimeAttribute, distanceTime);
		state.addValue(FixesDistanceTimeVarianceAttribute, distanceTime.getVariance());

		absoluteTime.clear();
		relativeTime.clear();
		distanceTime.clear();


		var totalCausedBugTime = 0;
		var selectedCauses = s.causes.select(c|c.weightFactor > 0);
		for (f in selectedCauses) {
			var fixTime = f.action.revision.author_date.time;
			totalCausedBugTime = totalCausedBugTime + (fixTime - time);
			absoluteTime.add(fixTime.asDouble()/resolution);
			relativeTime.add((fixTime - start).asDouble()/resolution);
			distanceTime.add((fixTime - time).asDouble()/resolution);
		}
		if (selectedCauses.size() > 0) {
			averageCausedBugLifespan = (totalCausedBugTime / selectedCauses.size().asDouble()).toDays();
		}
		
  		state.addDoubleCollectionValue(BugFixesAbsoluteTimeAttribute, absoluteTime);
  		state.addValue(BugFixesAbsoluteTimeVarianceAttribute, absoluteTime.getVariance());

  		state.addDoubleCollectionValue(BugFixesRelativeTimeAttribute, relativeTime);
		state.addValue(BugFixesRelativeTimeVarianceAttribute, relativeTime.getVariance());
		
  		state.addDoubleCollectionValue(BugFixesDistanceTimeAttribute, distanceTime);
		state.addValue(BugFixesDistanceTimeVarianceAttribute, distanceTime.getVariance());

		
   		state.addValue(AverageFixedLifespanAttribute, averageFixedLifespan);
   		state.addValue(AverageFixedBugLifespanAttribute, averageFixedBugLifespan);
   		state.addValue(AverageCausedLifespanAttribute, averageCausedLifespan);
   		state.addValue(AverageCausedBugLifespanAttribute, averageCausedBugLifespan);
	}
  }
}

operation addAgentTemporals() {
  ("...adding agent temporals...").log(2);
  var absoluteTime = new Sequence;
  var relativeTime = new Sequence;
  var distanceTime = new Sequence;
  var resolution = 24*60*60*1000;//days*hours*minutes*seconds
  //resolution = 60*1000;//minutes*seconds
  
  var start = CFA!GlobalState.allInstances().sortBy(x|x.revision.author_date.time).first().revision.author_date.time;
  
  for (s in CFA!GlobalState.allInstances()) {
	("  " + " @ "+s.ID).log(3);
  	var authorName = s.revision.author.name;
  	var matchedStates = DECENT!AgentState.allInstances().select(m|m.ID = s.ID);
  	var size = matchedStates.size();
	//check if correct matches can be found 
  	if (size <> 1) {
  		("  "+size+" DECENT matches found for: "+authorName+" at "+s.ID).log(1);
  	} else {
  		var state = matchedStates.first();
  		
   		var averageFixedLifespan = 0.asDouble();
   		var averageFixedBugLifespan = 0.asDouble();
   		var averageCausedLifespan = 0.asDouble();
   		var averageCausedBugLifespan = 0.asDouble();

		var time = s.revision.author_date.time;
		var totalFixedTime = 0;
		
		absoluteTime.clear();
		relativeTime.clear();
		distanceTime.clear();
		
		for (c in s.fixes) {
			var causeTime = c.revision.author_date.time;
			totalFixedTime = totalFixedTime + (time - causeTime);
			absoluteTime.add(causeTime.asDouble()/resolution);
			relativeTime.add((causeTime - start).asDouble()/resolution);
			distanceTime.add((time - causeTime).asDouble()/resolution);
		}
		if (s.fixes.size() > 0) {
			averageFixedLifespan = (totalFixedTime / s.fixes.size().asDouble()).toDays();
			averageFixedBugLifespan = s.weightFactor*(totalFixedTime / s.fixes.size().asDouble()).toDays();
		}
  		state.addDoubleCollectionValue(CausesAbsoluteTimeAttribute, absoluteTime);
  		state.addValue(CausesAbsoluteTimeVarianceAttribute, absoluteTime.getVariance());

  		state.addDoubleCollectionValue(CausesRelativeTimeAttribute, relativeTime);
		state.addValue(CausesRelativeTimeVarianceAttribute, relativeTime.getVariance());
		
  		state.addDoubleCollectionValue(CausesDistanceTimeAttribute, distanceTime);
		state.addValue(CausesDistanceTimeVarianceAttribute, distanceTime.getVariance());

		
		absoluteTime.clear();
		relativeTime.clear();
		distanceTime.clear();
		
		var totalCausedTime = 0;
		for (f in s.causes) {
			var fixTime = f.revision.author_date.time;
			totalCausedTime = totalCausedTime + (fixTime - time);
			absoluteTime.add(fixTime.asDouble()/resolution);
			relativeTime.add((fixTime - start).asDouble()/resolution);
			distanceTime.add((fixTime - time).asDouble()/resolution);
		}
		if (s.causes.size() > 0) {
			averageCausedLifespan = (totalCausedTime / s.causes.size().asDouble()).toDays();
		}

  		state.addDoubleCollectionValue(FixesAbsoluteTimeAttribute, absoluteTime);
  		state.addValue(FixesAbsoluteTimeVarianceAttribute, absoluteTime.getVariance());

  		state.addDoubleCollectionValue(FixesRelativeTimeAttribute, relativeTime);
		state.addValue(FixesRelativeTimeVarianceAttribute, relativeTime.getVariance());
		
  		state.addDoubleCollectionValue(FixesDistanceTimeAttribute, distanceTime);
		state.addValue(FixesDistanceTimeVarianceAttribute, distanceTime.getVariance());

		absoluteTime.clear();
		relativeTime.clear();
		distanceTime.clear();
		
		var totalCausedBugTime = 0;
		var selectedCauses = s.causes.select(c|c.weightFactor > 0);
		for (f in selectedCauses) {
			var fixTime = f.revision.author_date.time;
			totalCausedBugTime = totalCausedBugTime + (fixTime - time);
			absoluteTime.add(fixTime.asDouble()/resolution);
			relativeTime.add((fixTime - start).asDouble()/resolution);
			distanceTime.add((fixTime - time).asDouble()/resolution);
		}
		if (selectedCauses.size() > 0) {
			averageCausedBugLifespan = (totalCausedBugTime / selectedCauses.size().asDouble()).toDays();
		}

  		state.addDoubleCollectionValue(BugFixesAbsoluteTimeAttribute, absoluteTime);
  		state.addValue(BugFixesAbsoluteTimeVarianceAttribute, absoluteTime.getVariance());

  		state.addDoubleCollectionValue(BugFixesRelativeTimeAttribute, relativeTime);
		state.addValue(BugFixesRelativeTimeVarianceAttribute, relativeTime.getVariance());
		
  		state.addDoubleCollectionValue(BugFixesDistanceTimeAttribute, distanceTime);
		state.addValue(BugFixesDistanceTimeVarianceAttribute, distanceTime.getVariance());

		
   		state.addValue(AverageFixedLifespanAttribute, averageFixedLifespan);
   		state.addValue(AverageFixedBugLifespanAttribute, averageFixedBugLifespan);
   		state.addValue(AverageCausedLifespanAttribute, averageCausedLifespan);
   		state.addValue(AverageCausedBugLifespanAttribute, averageCausedBugLifespan);
   		
	}
  }
}


operation transformArtifactStates() {
  ("...transforming artifact states...").log(2);
  
  for (s in CFA!ArtifactState.allInstances()) {
	("  " + s.file.file_name + " @ "+s.ID).log(3);
  	var fileName = s.file.file_name;
  	var filePath = s.action.current_file_path;
  	var matchedStates = DECENT!State.allInstances().select(m|m.artifact.isMGtype() and m.ID = s.ID and m.getValue(FilePathAttribute).content = filePath);
  	var size = matchedStates.size();
	//check if correct matches can be found 
  	if (size <> 1) {
  		("  "+size+" DECENT matches found for: "+fileName+" at "+s.ID).log(4);
  		("    Avaliable states at "+s.ID+" are:").log(4);
  		//for (x in DECENT!State.allInstances().select(x|x.artifact.isMGtype() and x.ID = s.ID)) {
  			//("      "+x.artifact.name+" at "+x.ID+" ("+x.getValue(FilePathAttribute).content+")").log(4);
  		//}
  	} else {
  		var state = matchedStates.first();
  		
  		for (a in attributes.keySet()) {
			state.values.removeAll(state.values.select(v|v.ofAttribute.name = a));
		}
  		
  		for (f in s.factors.keySet()) {
		  	var factorValues = s.factors.get(f);
		  	var globalStateFactorValues = s.globalState.factors.get(f);
		  	for (a in factorValues.keySet()) {
	  			var LocalAttribute = DECENT!Attribute.allInstances().select(x|x.name = f.name+"."+a.name+".Local").first();
	  			var GlobalAttribute = DECENT!Attribute.allInstances().select(x|x.name = f.name+"."+a.name+".Global").first();
	  			//state.values.removeAll(state.values.select(v|v.ofAttribute.name = LocalAttribute));
	  			//state.values.removeAll(state.values.select(v|v.ofAttribute.name = GlobalAttribute));
	  			state.addValue(LocalAttribute,factorValues.get(a));
	  			state.addValue(GlobalAttribute,globalStateFactorValues.get(a));
		  	}
		  	
  	  		var clearedBugWeight = 0.asDouble();
	  		if (s.fixes.size()>0) {
	  			//TODO: what's the sense behind the multiplication below???
	  			clearedBugWeight = factorValues.get(CFAWeightFactor) * (s.fixes.size().asDouble()/s.fixes.size().asDouble());
	  		}
	  		var ClearedWeightAttribute = DECENT!Attribute.allInstances().select(x|x.name = f.name+".ClearedWeight.Local").first();
	   		state.addValue(ClearedWeightAttribute, clearedBugWeight);
		}
  		
  		//TODO: legacy
  		state.addValue(BugFixAttribute, s.bugFix);
  		state.addValue(WeightFactorAttribute, s.weightFactor);
  		state.addValue(TotalWeightAttribute, s.totalWeight);
  		state.addValue(TotalBugWeightAttribute, s.totalBugWeight);
  		state.addValue(AverageWeightAttribute, s.averageWeight);
  		state.addValue(AverageBugWeightAttribute, s.averageBugWeight);
  		state.addValue(CausesCountAttribute, s.causes.size().asDouble());
  		state.addValue(FixesCountAttribute, s.fixes.size().asDouble());

		//TODO: this may be removed as it is also included in the agent state
  		state.addValue(GlobalBugFixAttribute, s.globalState.bugFix);
  		state.addValue(GlobalWeightFactorAttribute, s.globalState.weightFactor);
  		state.addValue(GlobalTotalWeightAttribute, s.globalState.totalWeight);
  		state.addValue(GlobalTotalBugWeightAttribute, s.globalState.totalBugWeight);
  		state.addValue(GlobalAverageWeightAttribute, s.globalState.averageWeight);
  		state.addValue(GlobalAverageBugWeightAttribute, s.globalState.averageBugWeight);
  		state.addValue(GlobalCausesCountAttribute, s.globalState.causes.size().asDouble());
  		state.addValue(GlobalFixesCountAttribute, s.globalState.fixes.size().asDouble());
  		
  		var clearedBugWeight = 0.asDouble();
  		if (s.fixes.size()>0) {
  			//TODO: what's the sense behind the multiplicaiton below?!
  			clearedBugWeight = s.weightFactor * (s.fixes.size().asDouble()/s.fixes.size().asDouble());
  		}
   		state.addValue(ClearedTotalBugWeightAttribute, clearedBugWeight);
   		
  	}
  }
}

operation addCarriedWeights() {
  ("...adding carried weights...").log(2);

  	for (f in CFA!Factor.allInstances()) {
		var CarriedWeightAttribute = DECENT!Attribute.allInstances().select(x|x.name = f.name+".CarriedWeight.Local").first();
		var TotalWeightAttribute = DECENT!Attribute.allInstances().select(x|x.name = f.name+".TotalWeight.Local").first();
	  	var ClearedWeightAttribute = DECENT!Attribute.allInstances().select(x|x.name = f.name+".ClearedWeight.Local").first();

	    for (a in DECENT!Artifact.allInstances().select(x|x.isMGtype())) {
		  	var lastWeight = 0.asDouble();
	  		for (s in a.states) {
	  			var totalWeight = s.getValue(TotalWeightAttribute).content;
		  		lastWeight = lastWeight + totalWeight;
	  			var clearedWeight = s.getValue(ClearedWeightAttribute).content;
		  		lastWeight = lastWeight - clearedWeight;
	  			s.addValue(ClearedWeightAttribute, lastWeight);
	  		}
	  	}
  	}
  	
  //TODO: legacy
  for (a in DECENT!Artifact.allInstances().select(x|x.isMGtype())) {
  	var lastWeight = 0.asDouble();
  	for (s in a.states) {
  		var totalBugWeight = s.getValue(TotalBugWeightAttribute).content;
  		lastWeight = lastWeight + totalBugWeight;
  		var clearedBugWeight = s.getValue(ClearedTotalBugWeightAttribute).content;
  		lastWeight = lastWeight - clearedBugWeight;
  		s.addValue(CarriedTotalBugWeightAttribute, lastWeight);
  	}
  }
}

operation addDeltas() {
  ("...adding deltas...").log(2);
  for (a in DECENT!Artifact.allInstances().select(x|x.isMGtype())) {
  	for (s in a.states) {
  		for (v in s.values.select(v|v.isTypeOf(DECENT!DoubleValue) or v.isTypeOf(DECENT!IntegerValue))) {
  			s.fromActivity.get(0).addDelta(v.ofAttribute);
  		}
  	}
  }
}

//TODO: largely copied from trasnformArtifactStates
operation transformAgentStates() {
  ("...adding agent state values...").log(2);
  
  for (s in CFA!GlobalState.allInstances()) {
	("  " + " @ "+s.ID).log(3);
  	var authorName = s.revision.author.name;
  	var matchedStates = DECENT!AgentState.allInstances().select(m|m.ID = s.ID);
  	var size = matchedStates.size();
	//check if correct matches can be found 
  	if (size <> 1) {
  		("  "+size+" DECENT matches found for: "+authorName+" at "+s.ID).log(1);
  	} else {
  		var state = matchedStates.first();
  		
  		for (a in attributes.keySet()) {
			state.values.removeAll(state.values.select(v|v.ofAttribute.name = a));
		}
  		
  		for (f in s.factors.keySet()) {
		  	var factorValues = s.factors.get(f);
		  	for (a in factorValues.keySet()) {
	  			var GlobalAttribute = DECENT!Attribute.allInstances().select(x|x.name = f.name+"."+a.name+".Global").first();
	  			//state.values.removeAll(state.values.select(v|v.ofAttribute.name = GlobalAttribute));
	  			
	  			state.addValue(GlobalAttribute,factorValues.get(a));
		  	}
		  	
  	  		var clearedBugWeight = 0.asDouble();
	  		if (s.fixes.size()>0) {
	  			//TODO: what's the sense behind the multiplication below???
	  			clearedBugWeight = factorValues.get(CFAWeightFactor) * (s.fixes.size().asDouble()/s.fixes.size().asDouble());
	  		}
	  		var ClearedWeightAttribute = DECENT!Attribute.allInstances().select(x|x.name = f.name+".ClearedWeight.Local").first();
	   		state.addValue(ClearedWeightAttribute, clearedBugWeight);
		}
  		
  		//TODO: legacy
  		state.addValue(BugFixAttribute, s.bugFix);
  		state.addValue(WeightFactorAttribute, s.weightFactor);
  		state.addValue(TotalWeightAttribute, s.totalWeight);
  		state.addValue(TotalBugWeightAttribute, s.totalBugWeight);
  		state.addValue(AverageWeightAttribute, s.averageWeight);
  		state.addValue(AverageBugWeightAttribute, s.averageBugWeight);
  		state.addValue(CausesCountAttribute, s.causes.size().asDouble());
  		state.addValue(FixesCountAttribute, s.fixes.size().asDouble());
  		
  		var clearedBugWeight = 0.asDouble();
  		if (s.fixes.size()>0) {
  			//TODO: what's the sense behind the multiplicaiton below?!
  			clearedBugWeight = s.weightFactor * (s.fixes.size().asDouble()/s.fixes.size().asDouble());
  		}
   		state.addValue(ClearedTotalBugWeightAttribute, clearedBugWeight);
	}
  }
}

