import "../decent/logging.eol";

operation OrderedSet calculateHunksDifferences() {
	for (h in self) {
        var oldLines = h.old_end_line-h.old_start_line;
        if (h.old_start_line<>0){
            oldLines=oldLines + 1;
        }
        var newLines = h.new_end_line-h.new_start_line;
        if (h.new_start_line <> 0){
            newLines=newLines + 1;
        }
        h.~difference = newLines - oldLines;
	}

}

operation OrderedSet sortHunks() {
	self.calculateHunksDifferences();
    var difference = 0;
    var insertions = self.select(h|h.old_start_line = 0);
    var deletions = self.select(h|h.new_start_line = 0);
    var modifications = self.select(h|h.old_start_line <> 0 and h.new_start_line <> 0);
    
    insertions = insertions.sortBy(h|h.new_start_line);
    deletions = deletions.sortBy(h|h.old_start_line);
    modifications = modifications.sortBy(h|h.new_start_line);
    
    self.clear;
    var i;
    var d;
    
    for (m in modifications) {
        i = insertions.first();
        //TODO: may need to involve the difference at some point - check out corner cases
        //TODO: try to simplify this mess
        //difference = difference + newLines - oldLines;
    	//(difference).log(1);
        while (i.isDefined() and i.new_start_line < m.new_start_line) {
            d = deletions.first();
            while (d.isDefined() and d.old_start_line + difference < i.new_start_line) {
                self.add(d);
                difference = difference + d.~difference;
                ("  Adding d1 ("+difference+") "+d).log(1);
                deletions.remove(d);
                d = deletions.first();
            }
            
            self.add(i);
            difference = difference + i.~difference;
            ("  Adding i1 ("+difference+") "+i).log(1);
            insertions.remove(i);
            i = insertions.first();
        }

        d = deletions.first();
        while (d.isDefined() and d.old_start_line < m.old_start_line) {
	        ("    About to add d2:" + (d.~difference)).log(1);
	        ("    ::  "+d.old_start_line+" + "+difference+" < " + m.old_start_line).log(1);
            self.add(d);
            difference = difference + d.~difference;
            ("  Adding d2 ("+difference+") "+d).log(1);
            deletions.remove(d);
            d = deletions.first();
        }
        
        self.add(m);
        difference = difference + m.~difference;
        ("  Adding m ("+difference+") "+m).log(1);    
    }
    
    i = insertions.first();
    while (i.isDefined()) {
        d = deletions.first();
        while (d.isDefined() and d.old_start_line + difference < i.new_start_line) {
            self.add(d);
			difference = difference + d.~difference;
            ("  Adding d3 ("+difference+") "+d).log(1);
            deletions.remove(d);
            d = deletions.first();
        }
        
        self.add(i);
        difference = difference + i.~difference;
        ("  Adding i2 ("+difference+") "+i).log(1);
        insertions.remove(i);
        i = insertions.first();
    }
    
    d = deletions.first();
    while (d.isDefined()) {
        self.add(d);
        difference = difference + d.~difference;
        ("  Adding d4 ("+difference+")"+d).log(1);
        deletions.remove(d);
        d = deletions.first();
    }
    
//    for (h in self) {
//        ("    "+h.old_start_line+":"+h.old_end_line+"->"+h.new_start_line+":"+h.new_end_line).log(1);
//    }
}


operation OrderedSet normalizeHunks() {
    var difference = 0;
    for (h in self) {
        h.~old_start_line_normalized = h.old_start_line;
        h.~old_end_line_normalized = h.old_end_line;
        h.~new_start_line_normalized = h.new_start_line;
        h.~new_end_line_normalized = h.new_end_line;
        
        if (h.old_start_line == 0 ){ //and h.new_start_line <> 1
            h.~old_start_line_normalized = h.new_start_line - difference;
        }
        if (h.new_start_line == 0 ){ //and h.new_line <> 1
            h.~new_start_line_normalized = h.old_start_line + difference;
        }
        if (h.old_end_line == 0 ){ //and h.new_start_line <> 1
            h.~old_end_line_normalized = h.new_start_line - difference;
        }
        if (h.new_start_line == 0 ){ //and h.new_line <> 1
            h.~new_end_line_normalized = h.old_start_line + difference;
        }
        
        //split
        var oldLines = h.old_end_line-h.old_start_line;
        if (h.old_start_line<>0){
            oldLines=oldLines + 1;
        }
        var newLines = h.new_end_line-h.new_start_line;
        if (h.new_start_line <> 0){
            newLines=newLines + 1;
        }
        h.~difference = newLines - oldLines;
        difference = difference + h.~difference;
        
       	h.old_start_line_normalized = h.~old_start_line_normalized;
        h.old_end_line_normalized = h.~old_end_line_normalized;
        h.new_start_line_normalized = h.~new_start_line_normalized;
        h.new_end_line_normalized = h.~new_end_line_normalized;
        h.difference = h.~difference;
        
    }
}
