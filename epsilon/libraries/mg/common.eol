operation dumpFileCopies() {
  for (f in MG!File.allInstances()) {
    (""+f.file_name).log(3);
  
  	for (a in f.actions) {
  		("  " +a.type + " "+a.revision.commit_id + " " + a.revision.message.trim()).log(3);
  		if (a.copy.isDefined()) {
  			("  "+a.copy.fromRevision.commit_id +" ("+a.copy.fromFile.file_name+")" + " -> "+ a.revision.commit_id+ " ("+f.file_name+")").log(3);
  		}
  	}
  }
}

@cached
operation MG!File getBranch() : MG!Branch {
	if (self.file_type = "directory") {
		if (self.childrenLinks.size()>0) {
			return self.childrenLinks.first().revision.getBranch();
		} else {
			return self.parentLinks.first().parent.getBranch();	
		}
	} else {
		return self.actions.first().branch;
	}
}

@cached
operation MG!Revision getBranch() : MG!Branch {
	if (self.actions.size() = 0) {
		//TODO: DAG can help here
		("  No actions for " +self.commit_id + " / " + self.rev + " ! Branch cannot be determined, defaulting to master!").log(1);
		return MG!Branch.all().select(b|b.name=defaultBranch).first();
	}
	return self.actions.first().branch;
}

@cached
operation MG!Revision getPatchLinesSum() : Real {
	return self.patchLines.collect(x|x.added + x.removed).sum();
}

operation MG!Revision getPatchLinesSum(file : MG!File) : Real {
	return self.patchLines.select(x|x.file = file).collect(x|x.added + x.removed).sum();
}
