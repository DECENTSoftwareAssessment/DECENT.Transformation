operation Any addValue(attribute : DECENT!Attribute, content : Any, value : DECENT!Value) : DECENT!Value {
    value.name = attribute.name;
    value.content = content;
    self.values.add(value);
    value.ofAttribute = attribute;
    //TODO: outsource these
//    self.artifact.attributes.add(attribute);
//    attribute.artifactTypes.add(self.artifact.type);
    return value;
}

operation Any getValue(attribute : DECENT!Attribute) : DECENT!Value {
    return self.values.select(v|v.ofAttribute = attribute).first();
}

@cached
operation String getAttribute() : DECENT!Attribute {
    return DECENT!Attribute.allInstances().select(a|a.name = self).first();
}

operation Any addValue(attribute : DECENT!Attribute, content : String) : DECENT!Value {
    var value : new DECENT!StringValue;
    return self.addValue(attribute, content, value);
}

//NOTE: order matters, otherwise integers are mistakenly treated as reals
operation Any addValue(attribute : DECENT!Attribute, content : Integer) : DECENT!Value {
    var value : new DECENT!IntegerValue;
    return self.addValue(attribute, content, value);
}

operation Any addValue(attribute : DECENT!Attribute, content : Real) : DECENT!Value {
    var value : new DECENT!DoubleValue;
    return self.addValue(attribute, content, value);
}

operation Any addValue(attribute : DECENT!Attribute, content : Collection) : DECENT!Value {
    var value : new DECENT!ListValue;
    ("collection "+content).println();
    return self.addValue(attribute, content, value);
}

operation Any addStringCollectionValue(attribute : DECENT!Attribute, content : Collection(String)) : DECENT!Value {
    var value : new DECENT!StringListValue;
    return self.addValue(attribute, content, value);
}

operation Any addIntegerCollectionValue(attribute : DECENT!Attribute, content : Collection(Integer)) : DECENT!Value {
    var value : new DECENT!IntegerListValue;
    return self.addValue(attribute, content, value);
}

operation Any addDoubleCollectionValue(attribute : DECENT!Attribute, content : Collection(Real)) : DECENT!Value {
    var value : new DECENT!DoubleListValue;
    return self.addValue(attribute, content, value);
}


operation DECENT!Activity addDelta(attribute : DECENT!Attribute) : DECENT!Delta {
    return self.addDelta(attribute, self.targetState.values.select(v|v.ofAttribute = attribute).first());
}


operation DECENT!Activity addDelta(attribute : DECENT!Attribute, value : DECENT!Value) : DECENT!Delta {
    var delta : new DECENT!Delta;
    delta.onAttribute = attribute;
	//TODO: see if there is any impact of removing these
	// probably only on loading and saving times
	// ***slighly negative performance impact for whatever reason*** 
    //delta.targetValue = value;
    if (self.state.isDefined()){
    	//delta.sourceValue = self.state.getValue(attribute);
    	//delta.change = delta.targetValue.content - delta.sourceValue.content;
        delta.change = value.content - self.state.getValue(attribute);
    } else {
    	//delta.change = delta.targetValue.content;
        delta.change = value.content;
    }
    self.deltas.add(delta);
    return delta;
}

operation Any toDays() : Real {
	return self.asDouble() / (3600*1000*24);
}

operation Any toMinutes() : Real {
	return self.asDouble() / (60*1000);
}

operation Real round(places : Integer) : Real {
	var factor = 10.pow(places).asDouble();
	return (self.asDouble() * factor).round() / factor;
}


operation DECENT!Activity setActivityType(type : String) {
	var t = DECENT!ActivityType.allInstances().select(a|a.name = type).first();
	if (t.isUndefined()) {
		t = new DECENT!ActivityType();
		t.name = type;
		DECENT!Model.allInstances().first().activityTypes.add(t);
	}
	self.type.add(t);
}


operation DECENT!Model addAttributes(attributes : Map) {
	for (a in attributes.keySet()) {
    	if (Model.attributePool.attributes.select(att|att.name = a).size() = 0) {
		  	var Attribute = new DECENT!Attribute;
		  	Attribute.name = a;
		  	Attribute.description = attributes.get(a);
	      	Model.attributePool.attributes.add(Attribute);
      	}
  	}
}

operation DECENT!Artifact setArtifactType(fileType : String) {
    var artifactType = DECENT!ArtifactType.allInstances().
        select(at|at.name = fileType).first;
    if (not artifactType.isDefined()){
        //("  Artifact type not defined. Initializing "+fcl.child.file_type+" ").println();
        artifactType = new DECENT!ArtifactType;
        artifactType.name = fileType;
        Model.artifactTypeHierarchy.types.add(artifactType);
    }
    self.type = artifactType;

}

operation Real normalize(min : Real, max : Real) : Real {
	return ((self - min) / (max - min))*(1-0) + 0;
}

@cached
operation DECENT!Artifact isMGtype() : Boolean {
	return self.type.name = "code" or 
		self.type.name = "documentation" or 
		self.type.name = "image" or 
		self.type.name = "devel-doc" or 
		self.type.name = "unknown" or 
		self.type.name = "build" or 
		self.type.name = "ui";
}

operation Collection getMean() : Real {
	if (self.size <= 1) {
	    //mean for a set of 1 elememts shall be 0
		return 0.asReal();
	}
    var n = 0.asReal();
    var sum1 = 0.asReal();
    for (x in self){
        n = n + 1;
        sum1 = sum1 + x;
    }
    var mean = sum1/n;
	return mean;
}

operation Collection getVariance() : Real {
	if (self.size <= 1) {
	    //variance for a set of 1 elememts shall be 0
		return 0.asReal();
	}
	
    var n = 0.asReal();
    var sum1 = 0.asReal();
    for (x in self){
        n = n + 1;
        sum1 = sum1 + x;
    }
    var mean = sum1/n;
 
    var sum2 = 0.asReal();
    var sum3 = 0.asReal();
    for (x in self){
        sum2 = sum2 + ((x - mean) * (x - mean));
        sum3 = sum3 + (x - mean);
    
    }
    var variance = (sum2 - (sum3*sum3)/n)/(n - 1);
    return variance;
}