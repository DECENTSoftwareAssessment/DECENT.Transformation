

operation Sequence cfaToPlantUMLFile (filename : String) {
    var file = new Native("java.io.File") (filename);
    writer = new Native("java.io.FileWriter") (file);
    self.cfaToPlantUML();
    writer.close();
}


operation Sequence cfaToPlantUML() {
    ("visualizing..").println();
	var output = "";
	("@startuml").printlno();
	("skinparam classArrowColor #444488").printlno();
	("skinparam objectBorderColor #444444").printlno();
	("skinparam objectBackgroundColor #EDEDED").printlno();
	("skinparam classArrowFontStyle bold").printlno();
	("skinparam classArrowFontSize 16").printlno();
	("skinparam classArrowFontColor #AA4444").printlno();
	("").printlno();
	
	var HunksAttribute = "Hunks".getCFAAttribute();
  	var BugFixAttribute = "BugFix".getCFAAttribute();
  	var WeightFactorAttribute = "WeightFactor".getCFAAttribute();
  	var TotalWeightAttribute = "TotalWeight".getCFAAttribute();
  	var AverageWeightAttribute = "AverageWeight".getCFAAttribute();
	
	var lastState;
	for (s in self) {
		s.~uniqueName = "Mr"+s.ID;
        ("processing object "+s.~uniqueName).println();
        var color = "";
       	var colorR = "AA";
       	var colorG = "AA";
       	var colorB = "AA";
       	
  		for (f in s.factors.keySet()) {
  			//TODO: handle multiple factors
		  	var factorValues = s.factors.get(f);
		  	if (factorValues.get(TotalWeightAttribute) > 0) {
		  		switch (f.name) {
			  		case "Default":
		        		colorG = "EE";
			  		case "BugFix" :
		        		colorR = "EE";
			  		default :
		        		colorB = "EE";
		  		}
		  	}
		}        
		color = " #" + colorR + colorG + colorB;
        ("object "+s.~uniqueName + color).printlno();

  		for (f in s.factors.keySet()) {
		  	var factorValues = s.factors.get(f);
		  	for (a in factorValues.keySet()) {
		        (s.~uniqueName+" : "+f.name+"."+a.name+" = "+factorValues.get(a)).printlno();
		  	}
		}        

        (s.~uniqueName+" : hunks = "+s.hunks).printlno();
        if (lastState.isDefined()) {
            (lastState.~uniqueName +" -right- "+s.~uniqueName).printlno();
        }
        //files?
        var offsetDistance = "\\n\\n";
        
        for (f in s.fixes){
        	f.~uniqueName = "Mr"+f.ID;
        	
            (s.~uniqueName +" : fixes = "+f.~uniqueName +" ("+1+"/"+s.fixes.size()+")").printlno();
    		if (f.ID < lowerBound) {
        		continue;
    		}
        	
            offsetDistance = offsetDistance + "\\n";
            
            var distance = "";
	        var d = 0;
	        while (d < (s.ID - f.ID)) {
	            distance = distance + "\\n";
	            d = d+1;
	        }
	        
			var label = "";
            var weightFactor;

	  		for (f in s.factors.keySet()) {
			  	var factorValues = s.factors.get(f);
			  	weightFactor = factorValues.get(WeightFactorAttribute);
			  	label = label + f.name+".BugCauseWeight";
	            label = label + ": " + weightFactor + "*" + 1 + "/" + s.fixes.size();
	            label = label + "=" + (weightFactor*(1/s.fixes.size().asDouble()));
	            label = label + "\\n";
			}        
			            
            var notename = f.~uniqueName+"_"+s.~uniqueName;
			("note \""+s.~uniqueName + ":" + 1 + "/" + f.causes.size()+" -> "+f.~uniqueName + ":" + 1 + "/" + s.fixes.size()+"\\n"+label+"\" as " + notename).printlno();
			(f.~uniqueName + " <..down.. " + notename).printlno();
			(notename + " ..down.. " + s.~uniqueName).printlno();
    
        }
        for (c in s.causes) {
        	c.~uniqueName = "Mr"+c.ID;
			var weightFactor;
	  		for (f in c.factors.keySet()) {
			  	var factorValues = c.factors.get(f);
			  	weightFactor = factorValues.get(WeightFactorAttribute);
            	(s.~uniqueName +" : causes = "+c.~uniqueName +" (c="+1+"/"+s.causes.size()+",f="+1+"/"+c.fixes.size()+","+f.name+".bcw=" +(weightFactor*(1/c.fixes.size().asDouble()))+",fcw=" +((1/c.fixes.size().asDouble()))+ ")").printlno();
			}
        }
        
		//essentially duplicated from above...
        for (a in s.artifactStates) {
        	if (a.name <> "src/terminal_splitter.cpp") {
        		//continue;
        	}
        	a.~uniqueName = a.name + "_Mr"+a.ID;
        	a.~uniqueName = a.~uniqueName.replaceAll("[\\.\\/]", "_");
	        //("object "+a.~uniqueName).printlno();
	        var color = "";
	       	var colorR = "AA";
	       	var colorG = "AA";
	       	var colorB = "AA";

		    for (f in a.factors.keySet()) {
	  			//TODO: handle multiple factors
			  	var factorValues = a.factors.get(f);
			  	if (factorValues.get(TotalWeightAttribute) > 0) {
			  		switch (f.name) {
				  		case "Default":
			        		colorG = "EE";
				  		case "BugFix" :
			        		colorR = "EE";
				  		default :
			        		colorB = "EE";
			  		}
			  	}
			}        

    		color = " #" + colorR + colorG + colorB;
	        ("object "+a.~uniqueName + color).printlno();

	  		for (f in a.factors.keySet()) {
			  	var factorValues = a.factors.get(f);
			  	for (ax in factorValues.keySet()) {
			        (a.~uniqueName+" : "+f.name+"."+ax.name+" = "+factorValues.get(ax)).printlno();
			  	}
			}        

  			//TODO: legacy
        	(a.~uniqueName+" : hunks = "+a.hunks).printlno();
        	(a.~uniqueName+" : weight factor (bug fix) = "+a.weightFactor).printlno();
        	
        	(s.~uniqueName+" --down-- "+a.~uniqueName).printlno();
        	for (f in a.fixes) {
	        	f.~uniqueName = f.name + "_Mr"+f.ID;
	        	f.~uniqueName = f.~uniqueName.replaceAll("[\\.\\/]", "_");		
	            (a.~uniqueName +" : fixes = "+f.~uniqueName +" ("+1+"/"+a.fixes.size()+")").printlno();
        		if (f.ID < lowerBound) {
	        		continue;
        		}

	            offsetDistance = offsetDistance + "\\n";
	            
	            var distance = "";
		        var d = 0;
		        while (d < (a.ID - f.ID)) {
		            distance = distance + "\\n";
		            d = d+1;
		        }
		        
		        var label = "";
		        var weightFactor;

		  		for (f in a.factors.keySet()) {
				  	var factorValues = a.factors.get(f);
				  	weightFactor = factorValues.get(WeightFactorAttribute);
				  	label = label + f.name+".BugCauseWeight";
		            label = label + ": " + weightFactor + "*" + 1 + "/" + a.fixes.size();
		            label = label + "=" + (weightFactor*(1/a.fixes.size().asDouble()));
		            label = label + "\\n";
				}        

				var notename = f.~uniqueName+"_"+a.~uniqueName;
				("note \""+a.~uniqueName + ":" + 1 + "/" + f.causes.size()+" -> "+f.~uniqueName + ":" + 1 + "/" + a.fixes.size()+"\\n"+label+"\" as " + notename).printlno();
				(f.~uniqueName + " <..up.. " + notename).printlno();
				(notename + " ..up.. " + a.~uniqueName).printlno();
        	}
	        for (c in a.causes) {
	        	c.~uniqueName = c.name + "_Mr"+c.ID;
	        	c.~uniqueName = c.~uniqueName.replaceAll("[\\.\\/]", "_");
				var weightFactor;
		  		for (f in c.factors.keySet()) {
				  	var factorValues = c.factors.get(f);
				  	weightFactor = factorValues.get(WeightFactorAttribute);
	            	(a.~uniqueName +" : causes = "+c.~uniqueName +" (c="+1+"/"+a.causes.size()+",f="+1+"/"+c.fixes.size()+","+f.name+".bcw=" +(weightFactor*(1/c.fixes.size().asDouble()))+",fcw=" +((1/c.fixes.size().asDouble()))+ ")").printlno();
				}
	        }
        }


        lastState = s;
	}
	("@enduml").printlno();
	("finishing..").println();
}

operation String printlno() {
    writer.write(self.replaceAll("(?:[\\w\\d])-(?:[\\w\\d])", "_") + "\n");
    writer.flush();
}	
