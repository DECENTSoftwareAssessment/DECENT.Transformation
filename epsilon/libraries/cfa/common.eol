@cached
operation String getCFAAttribute() : CFA!CFAAttribute {
    return CFA!CFAAttribute.allInstances().select(a|a.name = self).first();
}

@cached
operation String getCFAFactor() : CFA!Factor {
    return CFA!Factor.allInstances().select(a|a.name = self).first();
}

operation calculateTotalFactorWeights(selectedFactor : CFA!Factor) {
    for (s in CFA!CFAState.allInstances()) {
    	var fixes = s.fixes.size().asDouble();
    	if (fixes = 0) {
    		fixes = 1.asDouble();
    	}
        for (f in s.fixes) {
        	var value; 
        	var factor = f.factors.get(selectedFactor);
        	value = factor.get(TotalWeightAttribute) + s.factors.get(selectedFactor).get(WeightFactorAttribute) * (1/fixes);
        	factor.put(TotalWeightAttribute,value);
        }
    }
}

operation resetTotalWeights(selectedFactor : CFA!Factor) {
    var defaultValue = 0.asDouble();
    for (s in CFA!CFAState.allInstances()) {
    	var factor = s.factors.get(selectedFactor);
		factor.value.put(TotalWeightAttribute,defaultValue);
    }
}

operation resetTotalWeights() {
    var defaultValue = 0.asDouble();
    for (s in CFA!CFAState.allInstances()) {
    	for (factor in s.factors) {
    		factor.value.put(TotalWeightAttribute,defaultValue);
    	}
    }
}

operation calculateTotalFactorWeights() {
    for (s in CFA!CFAState.allInstances()) {
    	var fixes = s.fixes.size().asDouble();
    	if (fixes = 0) {
    		fixes = 1.asDouble();
    	}
        for (f in s.fixes) {
        	var value; 
        	for (factor in f.factors) {
        		value = factor.value.get(TotalWeightAttribute) + s.factors.get(factor.key).get(WeightFactorAttribute) * (1/fixes);
        		factor.value.put(TotalWeightAttribute,value);
        	}
        }
    }
}

operation calculateAverageFactorWeights() {
    for (s in CFA!CFAState.allInstances()) {
    	var causes = s.causes.size().asDouble();
    	if (causes = 0) {
    		causes = 1.asDouble();
    	}
    	var value; 
    	for (factor in s.factors.values) {
    		value = factor.get(TotalWeightAttribute) / causes;
    		factor.put(AverageWeightAttribute,value);
    	}
    }
}
//State needs to be renamed to CFAState to avoid ambiguity due to DECENT import
//TODO: commit and describe
//TODO: adapt other instances CFA!State -> CFA!CFAState, also for attributes?
//TODO: adapt cfa2decent or create a separate transformation?
//TODO: keep in mind implications of direct logical-global association and weighting vs logical-artifact-global weighting
//TODO: double check whether weights need to be distributed among contained artifacts
//TODO: distinguish among different artifact and logical types?
//      - filter code only
//      - different weighting for classes and methods?
operation CFA!CFAState addFactor(factor : CFA!Factor, weightFactor : Real) {
    var defaultValue = 0.asDouble();
    self.factors.put(factor,new Map);
    self.factors.get(factor).put(WeightFactorAttribute, weightFactor);
	self.factors.get(factor).put(TotalWeightAttribute,defaultValue);
	self.factors.get(factor).put(AverageWeightAttribute,defaultValue);
}
