<?xml version="1.0" encoding="UTF-8"?>
<xmi:XMI xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:MG="MG">
  <MG:Model name="git-ws.git" type="git" uri="https://github.com/questor/git-ws.git">
    <people name="Vittorio Romeo" email="vittorio.romeo@outlook.com" revisionsCommitted="/0/@revisions.0 /0/@revisions.1 /0/@revisions.2 /0/@revisions.3 /0/@revisions.4 /0/@revisions.5 /0/@revisions.6 /0/@revisions.7 /0/@revisions.8 /0/@revisions.9 /0/@revisions.10 /0/@revisions.11 /0/@revisions.12 /0/@revisions.13 /0/@revisions.14 /0/@revisions.15 /0/@revisions.16 /0/@revisions.17 /0/@revisions.18 /0/@revisions.19 /0/@revisions.20 /0/@revisions.21 /0/@revisions.22 /0/@revisions.23 /0/@revisions.24 /0/@revisions.25 /0/@revisions.26 /0/@revisions.27 /0/@revisions.28 /0/@revisions.29 /0/@revisions.30 /0/@revisions.31 /0/@revisions.32 /0/@revisions.33 /0/@revisions.34 /0/@revisions.35 /0/@revisions.36 /0/@revisions.37 /0/@revisions.38 /0/@revisions.39 /0/@revisions.40 /0/@revisions.41 /0/@revisions.42 /0/@revisions.43 /0/@revisions.44 /0/@revisions.45 /0/@revisions.46 /0/@revisions.47 /0/@revisions.48 /0/@revisions.49" revisionsAuthored="/0/@revisions.0 /0/@revisions.1 /0/@revisions.2 /0/@revisions.3 /0/@revisions.4 /0/@revisions.5 /0/@revisions.6 /0/@revisions.7 /0/@revisions.8 /0/@revisions.9 /0/@revisions.10 /0/@revisions.11 /0/@revisions.12 /0/@revisions.13 /0/@revisions.14 /0/@revisions.15 /0/@revisions.16 /0/@revisions.17 /0/@revisions.18 /0/@revisions.19 /0/@revisions.20 /0/@revisions.21 /0/@revisions.22 /0/@revisions.23 /0/@revisions.24 /0/@revisions.25 /0/@revisions.26 /0/@revisions.27 /0/@revisions.28 /0/@revisions.29 /0/@revisions.30 /0/@revisions.31 /0/@revisions.32 /0/@revisions.33 /0/@revisions.34 /0/@revisions.35 /0/@revisions.36 /0/@revisions.37 /0/@revisions.38 /0/@revisions.39 /0/@revisions.40 /0/@revisions.41 /0/@revisions.42 /0/@revisions.43 /0/@revisions.44 /0/@revisions.45 /0/@revisions.46 /0/@revisions.47 /0/@revisions.48 /0/@revisions.49" blames="/111 /112 /113 /114 /115 /116 /117 /118 /119 /120 /121 /122 /123 /124 /125 /126 /127 /128 /129 /130 /131 /132 /133 /134 /135 /136 /137 /138 /139 /140 /141 /142 /143 /144 /145 /146 /147 /148 /149 /150 /151 /152 /153 /154 /155 /156 /157 /158 /159 /160 /161 /162 /163 /164 /165 /166 /167 /168 /169 /170 /171 /172 /173 /174 /175 /176 /177 /178 /179 /180 /181 /182 /183 /184 /185 /186 /187 /188 /189 /190 /191 /192 /193"/>
    <revisions commit_id="1" rev="54675d01e4dd3c1c062502e26bc84284eeca5f08" message="    Initial commit&#xA;" author_date="2013-06-15T08:52:02.000+0200" commit_date="2013-06-15T08:52:02.000+0200" file_count="1" author="/0/@people.0" committer="/0/@people.0" actions="/0/@actions.0" fileLinks="/0/@fileLinks.0" patches="/513" patchLines="/1" hunks="/194" hunkBlames="/621 /622"/>
    <revisions commit_id="2" rev="a8d3cf5c072bed72ff4e5b0092570dac269b2800" message="    Initial tests (VERY WIP)&#xA;" author_date="2013-06-18T17:04:53.000+0200" commit_date="2013-06-18T17:04:53.000+0200" file_count="6" author="/0/@people.0" committer="/0/@people.0" actions="/0/@actions.1 /0/@actions.2 /0/@actions.3 /0/@actions.4 /0/@actions.5 /0/@actions.6" fileLinks="/0/@fileLinks.1 /0/@fileLinks.2 /0/@fileLinks.3 /0/@fileLinks.4 /0/@fileLinks.5 /0/@fileLinks.6" patches="/517 /518 /519 /520 /521" patchLines="/2 /3 /4 /5 /6" hunks="/195 /196 /197 /198 /199" hunkBlames="/626 /627 /633 /634 /635 /636 /637 /638 /639 /640 /641 /642 /643 /644 /645 /646 /647 /648 /649 /651 /660 /668 /671 /680 /703" content="/865" blames="/111"/>
    <revisions commit_id="3" rev="69e55f4a858ebc96eae6036cf943a8c489532608" message="    Gitignore&#xA;" author_date="2013-06-18T17:06:04.000+0200" commit_date="2013-06-18T17:06:04.000+0200" file_count="7" author="/0/@people.0" committer="/0/@people.0" actions="/0/@actions.7" fileLinks="/0/@fileLinks.7" patches="/511" patchLines="/7" blames="/113"/>
    <revisions commit_id="4" rev="a4a6369a18e9978ea6a9da67d5e08bd4209d676c" message="    automated submodule update&#xA;" author_date="2013-06-18T17:12:33.000+0200" commit_date="2013-06-18T17:12:33.000+0200" file_count="7" author="/0/@people.0" committer="/0/@people.0" actions="/0/@actions.8 /0/@actions.9" patches="/514 /515" patchLines="/8 /9" hunks="/200 /201"/>
    <revisions commit_id="5" rev="74ecee98ae7a060de37aeae87ef109269bf972dc" message="    automated submodule update&#xA;" author_date="2013-06-18T17:16:32.000+0200" commit_date="2013-06-18T17:16:32.000+0200" file_count="7" author="/0/@people.0" committer="/0/@people.0" actions="/0/@actions.10" patches="/512" patchLines="/10" hunks="/202"/>
    <revisions commit_id="6" rev="81610bd785694b793dba1afbfcb1880c0219b7a1" message="    More testing (semi-working command line)&#xA;" author_date="2013-06-18T22:59:51.000+0200" commit_date="2013-06-18T22:59:51.000+0200" file_count="7" author="/0/@people.0" committer="/0/@people.0" actions="/0/@actions.11" patches="/524" patchLines="/11" hunks="/203 /204 /205 /206 /207 /208 /209 /210 /211 /212 /213 /214 /215 /216 /217 /218 /219 /220 /221 /222 /223 /224 /225" hunkBlames="/650 /652 /653 /654 /655 /656 /657 /658 /659 /661 /662 /663 /664 /665 /666 /667 /669 /670 /673 /681 /705" content="/866" blames="/112"/>
    <revisions commit_id="7" rev="2a20829c9b6b5267de63e01dff8d3522e5d4731a" message="    More progress (WIP)&#xA;" author_date="2013-06-19T18:29:28.000+0200" commit_date="2013-06-19T18:29:28.000+0200" file_count="7" author="/0/@people.0" committer="/0/@people.0" actions="/0/@actions.12" patches="/527" patchLines="/12" hunks="/226 /227 /228 /229 /230 /231 /232 /233 /234 /235 /236 /237 /238 /239 /240 /241 /242 /243 /244 /245 /246 /247 /248 /249 /250 /251 /252" hunkBlames="/672 /674 /675 /676 /677 /678 /679 /702" content="/867" blames="/114"/>
    <revisions commit_id="8" rev="0e5a7493f940a855ea7f4afc555be1136c158dcd" message="    First functional version&#xA;    (INTENDED FOR PERSONAL USE - USE IT AT YOUR OWN RISK)&#xA;" author_date="2013-06-21T11:29:01.000+0200" commit_date="2013-06-21T11:29:01.000+0200" file_count="7" author="/0/@people.0" committer="/0/@people.0" actions="/0/@actions.13 /0/@actions.14" patches="/529 /530" patchLines="/13 /14" hunks="/253 /254 /255 /256 /257 /258 /259 /260 /261 /262 /263 /264 /265 /266 /267 /268 /269 /270" hunkBlames="/632 /682 /706" content="/868" blames="/121"/>
    <revisions commit_id="9" rev="6b9667c0ecbbdd9e66d6c806df757c46c5f649bc" message="    gitignore&#xA;" author_date="2013-06-21T11:29:58.000+0200" commit_date="2013-06-21T11:29:58.000+0200" file_count="7" author="/0/@people.0" committer="/0/@people.0" actions="/0/@actions.15" patches="/516" patchLines="/15" blames="/117"/>
    <revisions commit_id="10" rev="8a156b2c7074ba7e25e6c0f31ec542d5da463bc4" message="    automated submodule update&#xA;" author_date="2013-06-21T11:47:15.000+0200" commit_date="2013-06-21T11:47:15.000+0200" file_count="7" author="/0/@people.0" committer="/0/@people.0" actions="/0/@actions.16 /0/@actions.17" patches="/522 /523" patchLines="/16 /17" hunks="/271 /272" hunkBlames="/707" content="/869" blames="/120"/>
    <revisions commit_id="11" rev="dd783f884a1a06c0d16da47c057a22f026b9702c" message="    automated submodule update&#xA;" author_date="2013-06-21T12:06:52.000+0200" commit_date="2013-06-21T12:06:52.000+0200" file_count="7" author="/0/@people.0" committer="/0/@people.0" actions="/0/@actions.18" patches="/525" patchLines="/18" hunks="/273"/>
    <revisions commit_id="12" rev="f36430fa1031afb1e17dd85045833aa1aabded3b" message="    Status now ignores dirty submodules&#xA;" author_date="2013-06-21T12:18:30.000+0200" commit_date="2013-06-21T12:18:30.000+0200" file_count="7" author="/0/@people.0" committer="/0/@people.0" actions="/0/@actions.19" patches="/528" patchLines="/19" hunks="/274 /275" hunkBlames="/704" content="/873" blames="/122"/>
    <revisions commit_id="13" rev="af94ad850d18218e2d5e56c0c1b0b5513fb428e5" message="    Readme&#xA;" author_date="2013-06-21T12:25:37.000+0200" commit_date="2013-06-21T12:25:37.000+0200" file_count="7" author="/0/@people.0" committer="/0/@people.0" actions="/0/@actions.20" patches="/526" patchLines="/20" hunks="/276 /277" hunkBlames="/623 /624 /629"/>
    <revisions commit_id="14" rev="31a727eee01cc4a49837304619f60de2daa2a728" message="    Major refactoring:&#xA;    Command line parsing is now encapsulated (when it's better, it'll probably go into SSVUtils)&#xA;" author_date="2013-06-21T14:35:27.000+0200" commit_date="2013-06-21T14:35:27.000+0200" file_count="17" author="/0/@people.0" committer="/0/@people.0" actions="/0/@actions.21 /0/@actions.22 /0/@actions.23 /0/@actions.24 /0/@actions.25 /0/@actions.26 /0/@actions.27 /0/@actions.28 /0/@actions.29 /0/@actions.30 /0/@actions.31 /0/@actions.32 /0/@actions.33" fileLinks="/0/@fileLinks.8 /0/@fileLinks.9 /0/@fileLinks.10 /0/@fileLinks.11 /0/@fileLinks.12 /0/@fileLinks.13 /0/@fileLinks.14 /0/@fileLinks.15 /0/@fileLinks.16 /0/@fileLinks.17 /0/@fileLinks.18 /0/@fileLinks.19 /0/@fileLinks.20 /0/@fileLinks.21 /0/@fileLinks.22 /0/@fileLinks.23 /0/@fileLinks.24" patches="/573 /580 /574 /575 /576 /577 /578 /579 /581 /582 /583 /584 /585" patchLines="/21 /22 /23 /24 /25 /26 /27 /28 /29 /30 /31 /32 /33" hunks="/278 /279 /280 /281 /282 /283 /284 /285 /286 /287 /288 /289 /290 /291" hunkBlames="/684 /685 /690 /691 /692 /694 /695 /697 /698 /700 /701 /708 /709 /710 /711 /712 /713 /714 /717 /718 /719 /720 /721 /722 /723 /724 /726 /727 /728 /729 /731 /733 /734 /736 /737 /738 /740 /741 /745 /746 /747 /748 /749 /750 /751 /752 /753 /754 /755 /756 /757 /758 /759 /760 /761 /762 /763 /764 /765 /784 /786 /791 /794 /804 /811 /813 /815 /826 /827 /829 /831 /834 /858 /861 /864" content="/870 /872 /871 /874 /875 /877 /876 /880 /879 /878 /881" blames="/115 /116 /118 /119 /123 /124 /125 /126 /127 /128 /131"/>
    <revisions commit_id="15" rev="abf45b3ccee7ea08e4fa3c31348c0dea50bdb13e" message="    More major refactoring&#xA;" author_date="2013-06-21T14:54:38.000+0200" commit_date="2013-06-21T14:54:38.000+0200" file_count="18" author="/0/@people.0" committer="/0/@people.0" actions="/0/@actions.34 /0/@actions.35 /0/@actions.36 /0/@actions.37 /0/@actions.38 /0/@actions.39" fileLinks="/0/@fileLinks.25" patches="/531 /533 /534 /535 /536 /532" patchLines="/34 /35 /36 /37 /38 /39" hunks="/292 /293 /294 /295 /296 /297 /298 /299 /300 /301 /302 /303 /304 /305 /306 /307 /308 /309 /310 /311 /312 /313 /314 /315 /316 /317 /318 /319 /320" hunkBlames="/696 /732 /735 /743 /744 /766 /767 /768 /769 /773 /774 /775 /776 /777 /778 /779 /780 /781 /787 /795 /797 /798 /802 /806 /822 /832 /833 /837 /841 /842 /843 /845 /859" content="/882 /883 /885 /886 /888 /884" blames="/129 /130 /132 /133 /136 /137"/>
    <revisions commit_id="16" rev="b774123ef6f2445ec9836c0798fcb62ebdf5628f" message="    Using popen instead of system&#xA;" author_date="2013-06-21T15:11:06.000+0200" commit_date="2013-06-21T15:11:06.000+0200" file_count="18" author="/0/@people.0" committer="/0/@people.0" actions="/0/@actions.40" patches="/538" patchLines="/40" hunks="/321 /322 /323 /324" hunkBlames="/771 /783 /785 /805 /807 /812 /820" content="/889" blames="/138"/>
    <revisions commit_id="17" rev="a07ea8649d8a204c1f0a75c6c91ab5a9a330075e" message="    fixed submodules, file permissions&#xA;" author_date="2013-06-21T16:06:44.000+0200" commit_date="2013-06-21T16:06:44.000+0200" file_count="19" is_bug_fix="1" author="/0/@people.0" committer="/0/@people.0" actions="/0/@actions.41 /0/@actions.42" fileLinks="/0/@fileLinks.26" patches="/537" patchLines="/41" hunks="/325" content="/887" blames="/134 /135"/>
    <revisions commit_id="18" rev="19c6b1e0c6b7bdf6ca6ae695b1a1995307c77bb1" message="    added license&#xA;" author_date="2013-06-21T16:09:52.000+0200" commit_date="2013-06-21T16:09:52.000+0200" file_count="20" author="/0/@people.0" committer="/0/@people.0" actions="/0/@actions.43" fileLinks="/0/@fileLinks.27" patches="/540" patchLines="/42" hunks="/326"/>
    <revisions commit_id="19" rev="7d664a696f0b346b5d4c1af5df12875b7b39ed90" message="    Added do command, which executes a shell command in every repo&#xA;" author_date="2013-06-21T16:29:02.000+0200" commit_date="2013-06-21T16:29:02.000+0200" file_count="20" author="/0/@people.0" committer="/0/@people.0" actions="/0/@actions.44" patches="/539" patchLines="/43" hunks="/327 /328 /329" hunkBlames="/782 /801 /808 /816 /850" content="/890" blames="/141"/>
    <revisions commit_id="20" rev="fa9f7e1a906c84706bb622541d1579c5f415648c" message="    license updated&#xA;" author_date="2013-06-21T16:29:32.000+0200" commit_date="2013-06-21T16:29:32.000+0200" file_count="20" author="/0/@people.0" committer="/0/@people.0" actions="/0/@actions.45 /0/@actions.46 /0/@actions.47 /0/@actions.48 /0/@actions.49 /0/@actions.50 /0/@actions.51 /0/@actions.52 /0/@actions.53 /0/@actions.54 /0/@actions.55" patches="/551 /552 /553 /554 /556 /557 /558 /559 /560 /561 /555" patchLines="/44 /45 /46 /47 /48 /49 /50 /51 /52 /53 /54" hunks="/330 /331 /332 /333 /334 /335 /336 /337 /338 /339 /340" content="/891 /892 /893 /894 /896 /897 /898 /900 /899 /902 /895" blames="/139 /140 /142 /143 /144 /145 /146 /147 /148 /149 /150"/>
    <revisions commit_id="21" rev="d7a47fd27e3d49389f98298b9bd892d9064ae0bb" message="    automated submodule update&#xA;" author_date="2013-06-21T17:01:44.000+0200" commit_date="2013-06-21T17:01:44.000+0200" file_count="20" author="/0/@people.0" committer="/0/@people.0" actions="/0/@actions.56 /0/@actions.57 /0/@actions.58 /0/@actions.59 /0/@actions.60 /0/@actions.61 /0/@actions.62 /0/@actions.63 /0/@actions.64" patches="/542 /543 /544 /545 /546 /547 /548 /549 /550" patchLines="/55 /56 /57 /58 /59 /60 /61 /62 /63" hunks="/341 /342 /343 /344 /345 /346 /347 /348 /349 /350 /351 /352" hunkBlames="/625 /683 /686 /688 /689 /715 /742 /770 /793" content="/903 /901 /904 /905 /908" blames="/151 /152 /153 /155 /157"/>
    <revisions commit_id="22" rev="c3d2e45b17758c080a0b5c11045ff81a108e7eee" message="    Added optional args to command line cmds&#xA;" author_date="2013-06-21T17:41:14.000+0200" commit_date="2013-06-21T17:41:14.000+0200" file_count="20" author="/0/@people.0" committer="/0/@people.0" actions="/0/@actions.65 /0/@actions.66 /0/@actions.67 /0/@actions.68 /0/@actions.69 /0/@actions.70" patches="/567 /568 /569 /570 /571 /572" patchLines="/64 /65 /66 /67 /68 /69" hunks="/353 /354 /355 /356 /357 /358 /359 /360 /361 /362 /363 /364 /365 /366 /367 /368 /369 /370 /371 /372 /373 /374 /375 /376 /377" hunkBlames="/687 /693 /699 /716 /725 /730 /739 /772 /788 /789 /792 /800 /821 /836" content="/907 /906 /910 /909 /912 /913" blames="/154 /156 /158 /160 /161 /163"/>
    <revisions commit_id="23" rev="009c3430d0e4e4bf9122af1b6d1fa8c80ee401a1" message="    Minor formatting&#xA;" author_date="2013-06-21T17:46:54.000+0200" commit_date="2013-06-21T17:46:54.000+0200" file_count="20" author="/0/@people.0" committer="/0/@people.0" actions="/0/@actions.71 /0/@actions.72" patches="/541" patchLines="/70" hunks="/378 /379" hunkBlames="/825 /863" content="/911 /914" blames="/159 /162"/>
    <revisions commit_id="24" rev="73fa13ea522fb6d50f7730091f5266a12e901400" message="    minor changes&#xA;" author_date="2013-06-21T18:23:21.000+0200" commit_date="2013-06-21T18:23:21.000+0200" file_count="20" author="/0/@people.0" committer="/0/@people.0" actions="/0/@actions.73" patches="/562" patchLines="/71" hunks="/380 /381" content="/915" blames="/164"/>
    <revisions commit_id="25" rev="ba5cc0da46d4b384bce422296e747e6780392088" message="    automated submodule update&#xA;" author_date="2013-06-21T21:10:45.000+0200" commit_date="2013-06-21T21:10:45.000+0200" file_count="20" author="/0/@people.0" committer="/0/@people.0" actions="/0/@actions.74 /0/@actions.75" patches="/563 /564" patchLines="/72 /73" hunks="/382 /383"/>
    <revisions commit_id="26" rev="5efc35f56a4e4d66b8dc2e9c4b33c7f536f7b968" message="    file permissions&#xA;" author_date="2013-06-22T16:01:53.000+0200" commit_date="2013-06-22T16:01:53.000+0200" file_count="20" author="/0/@people.0" committer="/0/@people.0" actions="/0/@actions.76" blames="/165"/>
    <revisions commit_id="27" rev="8b06cc6f92b114875a59e31ca3b5e736c4e3cc2e" message="    'git-ws status' overhaul:&#xA;    &#xA;    If there are no changes, and '-a || -showall' flag is not set, git-ws status only shows repositories with changes&#xA;" author_date="2013-06-22T18:30:55.000+0200" commit_date="2013-06-22T18:30:55.000+0200" file_count="20" author="/0/@people.0" committer="/0/@people.0" actions="/0/@actions.77" patches="/566" patchLines="/74" hunks="/384 /385 /386 /387" hunkBlames="/799 /803 /817 /847" content="/919" blames="/166"/>
    <revisions commit_id="28" rev="0f5772aafb86bda277bbef8a9d28e50a86707190" message="    automated submodule update&#xA;" author_date="2013-06-22T18:36:08.000+0200" commit_date="2013-06-22T18:36:08.000+0200" file_count="20" author="/0/@people.0" committer="/0/@people.0" actions="/0/@actions.78" patches="/565" patchLines="/75" hunks="/388"/>
    <revisions commit_id="29" rev="42d2c199b8195536979ae33f380650467f4d9dbe" message="    automated submodule update&#xA;" author_date="2013-06-23T01:22:34.000+0200" commit_date="2013-06-23T01:22:34.000+0200" file_count="20" author="/0/@people.0" committer="/0/@people.0" actions="/0/@actions.79" patches="/586" patchLines="/76" hunks="/389"/>
    <revisions commit_id="30" rev="9a67ff954ae164f0db610803bf3460648f322263" message="    automated submodule update&#xA;" author_date="2013-06-23T11:10:16.000+0200" commit_date="2013-06-23T11:10:16.000+0200" file_count="20" author="/0/@people.0" committer="/0/@people.0" actions="/0/@actions.80 /0/@actions.81" patches="/587 /588" patchLines="/77 /78" hunks="/390 /391"/>
    <revisions commit_id="31" rev="458fe9ab23b37db94e940037ef196c885a4bc209" message="    added init repository script&#xA;" author_date="2013-06-24T16:30:17.000+0200" commit_date="2013-06-24T16:30:17.000+0200" file_count="21" author="/0/@people.0" committer="/0/@people.0" actions="/0/@actions.82 /0/@actions.83" fileLinks="/0/@fileLinks.28" patches="/593 /594" patchLines="/79 /80" hunks="/392 /393" content="/916" blames="/167"/>
    <revisions commit_id="32" rev="805c588e5ebabcd61a51e1f801b89976a0dfada5" message="    added force-checkout pull flag&#xA;" author_date="2013-06-24T16:35:53.000+0200" commit_date="2013-06-24T16:35:53.000+0200" file_count="21" author="/0/@people.0" committer="/0/@people.0" actions="/0/@actions.84" patches="/592" patchLines="/81" hunks="/394 /395" hunkBlames="/796 /819" content="/920" blames="/168"/>
    <revisions commit_id="33" rev="44899faddb297edbc6128ff21a9ede93e618d3c1" message="    automated submodule update&#xA;" author_date="2013-06-25T16:50:39.000+0200" commit_date="2013-06-25T16:50:39.000+0200" file_count="21" author="/0/@people.0" committer="/0/@people.0" actions="/0/@actions.85 /0/@actions.86 /0/@actions.87" patches="/589 /590" patchLines="/82 /83" hunks="/396 /397" content="/918" blames="/169"/>
    <revisions commit_id="34" rev="0604ca1c58a653ac8a251051ed7a28420ec565cd" message="    Const correctness&#xA;" author_date="2013-06-27T11:02:50.000+0200" commit_date="2013-06-27T11:02:50.000+0200" file_count="21" author="/0/@people.0" committer="/0/@people.0" actions="/0/@actions.88" patches="/591" patchLines="/84" hunks="/398" content="/917" blames="/171"/>
    <revisions commit_id="35" rev="c797561919338ab0acb3c9d7fa0cde64d165bb1e" message="    Moved OptArg to its own file&#xA;" author_date="2013-06-27T11:02:59.000+0200" commit_date="2013-06-27T11:02:59.000+0200" file_count="22" author="/0/@people.0" committer="/0/@people.0" actions="/0/@actions.89 /0/@actions.90" fileLinks="/0/@fileLinks.29" patches="/595 /596" patchLines="/85 /86" hunks="/399 /400 /401" content="/921 /922" blames="/170 /173"/>
    <revisions commit_id="36" rev="5645e56c7b77536e85b69ca77b8802cebb20730c" message="    Const correctness, minor changes&#xA;" author_date="2013-06-27T11:03:24.000+0200" commit_date="2013-06-27T11:03:24.000+0200" file_count="22" author="/0/@people.0" committer="/0/@people.0" actions="/0/@actions.91 /0/@actions.92 /0/@actions.93 /0/@actions.94 /0/@actions.95 /0/@actions.96 /0/@actions.97 /0/@actions.98" patches="/601 /602 /604 /605 /606 /607 /608 /603" patchLines="/87 /88 /89 /90 /91 /92 /93 /94" hunks="/402 /403 /404 /405 /406 /407 /408 /409 /410 /411 /412 /413 /414 /415 /416 /417 /418 /419 /420 /421 /422 /423 /424 /425 /426 /427 /428 /429 /430 /431 /432 /433 /434 /435 /436" content="/923 /924 /925 /926 /927 /928 /929 /930" blames="/172 /174 /175 /176 /177 /178 /179 /180"/>
    <revisions commit_id="37" rev="08a48845fefcc70eb4c0ec45adebc8c204210eb8" message="    Better help command, minor changes&#xA;" author_date="2013-06-27T11:03:34.000+0200" commit_date="2013-06-27T11:03:34.000+0200" file_count="22" author="/0/@people.0" committer="/0/@people.0" actions="/0/@actions.99" patches="/600" patchLines="/95" hunks="/437 /438 /439" hunkBlames="/818 /828 /862" content="/932" blames="/183"/>
    <revisions commit_id="38" rev="3bf14e9193eb8f592e65e7252ac37256bf9c1ecb" message="    automated submodule update&#xA;" author_date="2013-06-27T11:12:51.000+0200" commit_date="2013-06-27T11:12:51.000+0200" file_count="22" author="/0/@people.0" committer="/0/@people.0" actions="/0/@actions.100 /0/@actions.101" patches="/597 /598" patchLines="/96 /97" hunks="/440 /441"/>
    <revisions commit_id="39" rev="02c3b4e31454b4e8a9059b14523449e4640933f0" message="    automated submodule update&#xA;" author_date="2013-06-27T17:59:40.000+0200" commit_date="2013-06-27T17:59:40.000+0200" file_count="22" author="/0/@people.0" committer="/0/@people.0" actions="/0/@actions.102" patches="/599" patchLines="/98" hunks="/442"/>
    <revisions commit_id="40" rev="3f1032cee77805f54a836de893b93a6917c8b111" message="    automated submodule update&#xA;" author_date="2013-06-27T18:07:37.000+0200" commit_date="2013-06-27T18:07:37.000+0200" file_count="22" author="/0/@people.0" committer="/0/@people.0" actions="/0/@actions.103" content="/931" blames="/181"/>
    <revisions commit_id="41" rev="800f9ac39041370ba9dabfb1695483ac5218d421" message="    Updated readme&#xA;" author_date="2013-06-27T18:15:56.000+0200" commit_date="2013-06-27T18:15:56.000+0200" file_count="22" author="/0/@people.0" committer="/0/@people.0" actions="/0/@actions.104" patches="/610" patchLines="/99" hunks="/443 /444" hunkBlames="/628 /630 /631"/>
    <revisions commit_id="42" rev="1c2ca589c59fcf0266d2abbb5181ecbb1011c580" message="    Major USEFUL update!&#xA;    &#xA;    git-ws now detects repos with changes, and by using the '-c' flag on many commands you can operate exclusively on htem&#xA;" author_date="2013-06-28T17:26:04.000+0200" commit_date="2013-06-28T17:26:04.000+0200" file_count="22" author="/0/@people.0" committer="/0/@people.0" actions="/0/@actions.105" patches="/615" patchLines="/100" hunks="/445 /446 /447 /448 /449 /450 /451 /452 /453 /454 /455 /456 /457 /458 /459" hunkBlames="/790 /809 /810 /824 /835 /839 /840 /844 /846 /848 /849 /851 /855 /857" content="/933" blames="/184"/>
    <revisions commit_id="43" rev="83f1cb827096c8471d954dd4cbf88b5e76091e32" message="    Removed useless log&#xA;" author_date="2013-06-28T17:26:29.000+0200" commit_date="2013-06-28T17:26:29.000+0200" file_count="22" author="/0/@people.0" committer="/0/@people.0" actions="/0/@actions.106" patches="/609" patchLines="/101" hunks="/460" hunkBlames="/814 /856" content="/934" blames="/185"/>
    <revisions commit_id="44" rev="1a4f5f8eba8070ca64103aaf7bf7a2a012eab0ce" message="    Major USEFUL update:&#xA;    * can now push all AHEAD repos (`git-ws push -a`)&#xA;    * can now check all repo status (CHANGED/AHEAD) (`git-ws query`)&#xA;" author_date="2013-06-28T17:40:01.000+0200" commit_date="2013-06-28T17:40:01.000+0200" file_count="22" author="/0/@people.0" committer="/0/@people.0" actions="/0/@actions.107" patches="/611" patchLines="/102" hunks="/461 /462 /463 /464 /465" hunkBlames="/823 /838 /852 /853 /854 /860" content="/935" blames="/186"/>
    <revisions commit_id="45" rev="d4bdd8d8407f81e0d4f35962a9cc411ee923f243" message="    Code cleanup&#xA;" author_date="2013-06-28T18:20:42.000+0200" commit_date="2013-06-28T18:20:42.000+0200" file_count="24" author="/0/@people.0" committer="/0/@people.0" actions="/0/@actions.108 /0/@actions.109 /0/@actions.110 /0/@actions.111" fileLinks="/0/@fileLinks.30 /0/@fileLinks.31 /0/@fileLinks.32 /0/@fileLinks.33" patches="/617 /620 /618 /619" patchLines="/103 /104 /105 /106" hunks="/466 /467 /468 /469 /470 /471 /472 /473 /474 /475 /476 /477 /478 /479 /480 /481 /482 /483 /484 /485 /486 /487 /488 /489 /490 /491 /492 /493 /494 /495 /496 /497 /498" content="/937 /936 /939" blames="/182 /187 /189"/>
    <revisions commit_id="46" rev="eb0e10ef8fe094d8fb00b05c118a2c01e8eb814a" message="    File permissions&#xA;" author_date="2013-06-28T18:21:35.000+0200" commit_date="2013-06-28T18:21:35.000+0200" file_count="24" author="/0/@people.0" committer="/0/@people.0" actions="/0/@actions.112 /0/@actions.113" content="/938 /940" blames="/188 /190"/>
    <revisions commit_id="47" rev="511f0eae1bdfd1c4c1601d16c9f568de4f92c3c1" message="    Updated readme c&#xA;" author_date="2013-06-28T18:26:30.000+0200" commit_date="2013-06-28T18:26:30.000+0200" file_count="24" author="/0/@people.0" committer="/0/@people.0" actions="/0/@actions.114" patches="/614" patchLines="/107" hunks="/499 /500 /501 /502 /503 /504 /505"/>
    <revisions commit_id="48" rev="463e00db81056a48e930c87fe03235b047a5dc15" message="    Added '-a' flag to `git-ws do`&#xA;" author_date="2013-06-28T18:26:42.000+0200" commit_date="2013-06-28T18:26:42.000+0200" file_count="24" author="/0/@people.0" committer="/0/@people.0" actions="/0/@actions.115" patches="/612" patchLines="/108" hunks="/506 /507 /508" content="/941" blames="/191"/>
    <revisions commit_id="49" rev="2b907a46c331dff8ab437129d41b963fa716ae52" message="    Commit test&#xA;" author_date="2013-06-28T21:58:01.000+0200" commit_date="2013-06-28T21:58:01.000+0200" file_count="24" author="/0/@people.0" committer="/0/@people.0" actions="/0/@actions.116" patches="/613" patchLines="/109" hunks="/509" hunkBlames="/830" content="/942" blames="/192"/>
    <revisions commit_id="50" rev="bf3d96af73008746a60935618c98227b7e5208af" message="    test commit&#xA;" author_date="2013-06-28T22:00:06.000+0200" commit_date="2013-06-28T22:00:06.000+0200" file_count="24" author="/0/@people.0" committer="/0/@people.0" actions="/0/@actions.117" patches="/616" patchLines="/110" hunks="/510" content="/943" blames="/193"/>
    <actions type="A" current_file_path="README.md" file="/0/@files.1" revision="/0/@revisions.0" branch="/0/@branches.0"/>
    <actions type="A" current_file_path="CMakeLists.txt" file="/0/@files.2" revision="/0/@revisions.1" branch="/0/@branches.0"/>
    <actions type="M" current_file_path="README.md" file="/0/@files.1" revision="/0/@revisions.1" branch="/0/@branches.0"/>
    <actions type="A" current_file_path="extlibs/SSVJsonCpp" file="/0/@files.4" revision="/0/@revisions.1" branch="/0/@branches.0"/>
    <actions type="A" current_file_path="extlibs/SSVUtils" file="/0/@files.5" revision="/0/@revisions.1" branch="/0/@branches.0"/>
    <actions type="A" current_file_path="extlibs/SSVUtilsJson" file="/0/@files.6" revision="/0/@revisions.1" branch="/0/@branches.0"/>
    <actions type="A" current_file_path="main.cpp" file="/0/@files.7" revision="/0/@revisions.1" branch="/0/@branches.0"/>
    <actions type="A" current_file_path=".gitignore" file="/0/@files.8" revision="/0/@revisions.2" branch="/0/@branches.0"/>
    <actions type="M" current_file_path="extlibs/SSVUtils" file="/0/@files.5" revision="/0/@revisions.3" branch="/0/@branches.0"/>
    <actions type="M" current_file_path="extlibs/SSVUtilsJson" file="/0/@files.6" revision="/0/@revisions.3" branch="/0/@branches.0"/>
    <actions type="M" current_file_path="extlibs/SSVUtilsJson" file="/0/@files.6" revision="/0/@revisions.4" branch="/0/@branches.0"/>
    <actions type="M" current_file_path="main.cpp" file="/0/@files.7" revision="/0/@revisions.5" branch="/0/@branches.0"/>
    <actions type="M" current_file_path="main.cpp" file="/0/@files.7" revision="/0/@revisions.6" branch="/0/@branches.0"/>
    <actions type="M" current_file_path="CMakeLists.txt" file="/0/@files.2" revision="/0/@revisions.7" branch="/0/@branches.0"/>
    <actions type="M" current_file_path="main.cpp" file="/0/@files.7" revision="/0/@revisions.7" branch="/0/@branches.0"/>
    <actions type="M" current_file_path=".gitignore" file="/0/@files.8" revision="/0/@revisions.8" branch="/0/@branches.0"/>
    <actions type="M" current_file_path="extlibs/SSVJsonCpp" file="/0/@files.4" revision="/0/@revisions.9" branch="/0/@branches.0"/>
    <actions type="M" current_file_path="main.cpp" file="/0/@files.7" revision="/0/@revisions.9" branch="/0/@branches.0"/>
    <actions type="M" current_file_path="extlibs/SSVUtilsJson" file="/0/@files.6" revision="/0/@revisions.10" branch="/0/@branches.0"/>
    <actions type="M" current_file_path="main.cpp" file="/0/@files.7" revision="/0/@revisions.11" branch="/0/@branches.0"/>
    <actions type="M" current_file_path="README.md" file="/0/@files.1" revision="/0/@revisions.12" branch="/0/@branches.0"/>
    <actions type="M" current_file_path="CMakeLists.txt" file="/0/@files.2" revision="/0/@revisions.13" branch="/0/@branches.0"/>
    <actions type="A" current_file_path="include/git-ws/CommandLine/Arg.h" file="/0/@files.12" revision="/0/@revisions.13" branch="/0/@branches.0"/>
    <actions type="A" current_file_path="include/git-ws/CommandLine/ArgBase.h" file="/0/@files.13" revision="/0/@revisions.13" branch="/0/@branches.0"/>
    <actions type="A" current_file_path="include/git-ws/CommandLine/Cmd.h" file="/0/@files.14" revision="/0/@revisions.13" branch="/0/@branches.0"/>
    <actions type="A" current_file_path="include/git-ws/CommandLine/CmdLine.h" file="/0/@files.15" revision="/0/@revisions.13" branch="/0/@branches.0"/>
    <actions type="A" current_file_path="include/git-ws/CommandLine/Flag.h" file="/0/@files.16" revision="/0/@revisions.13" branch="/0/@branches.0"/>
    <actions type="A" current_file_path="include/git-ws/CommandLine/Parser.h" file="/0/@files.17" revision="/0/@revisions.13" branch="/0/@branches.0"/>
    <actions type="D" current_file_path="main.cpp" file="/0/@files.7" revision="/0/@revisions.13" branch="/0/@branches.0"/>
    <actions type="A" current_file_path="src/git-ws/CommandLine/ArgBase.cpp" file="/0/@files.21" revision="/0/@revisions.13" branch="/0/@branches.0"/>
    <actions type="A" current_file_path="src/git-ws/CommandLine/Cmd.cpp" file="/0/@files.22" revision="/0/@revisions.13" branch="/0/@branches.0"/>
    <actions type="A" current_file_path="src/git-ws/CommandLine/CmdLine.cpp" file="/0/@files.23" revision="/0/@revisions.13" branch="/0/@branches.0"/>
    <actions type="A" current_file_path="src/git-ws/CommandLine/Flag.cpp" file="/0/@files.24" revision="/0/@revisions.13" branch="/0/@branches.0"/>
    <actions type="A" current_file_path="src/git-ws/main.cpp" file="/0/@files.25" revision="/0/@revisions.13" branch="/0/@branches.0"/>
    <actions type="M" current_file_path="include/git-ws/CommandLine/Cmd.h" file="/0/@files.14" revision="/0/@revisions.14" branch="/0/@branches.0"/>
    <actions type="A" current_file_path="include/git-ws/CommandLine/CommandLine.h" file="/0/@files.26" revision="/0/@revisions.14" branch="/0/@branches.0"/>
    <actions type="M" current_file_path="include/git-ws/CommandLine/Flag.h" file="/0/@files.16" revision="/0/@revisions.14" branch="/0/@branches.0"/>
    <actions type="M" current_file_path="src/git-ws/CommandLine/Cmd.cpp" file="/0/@files.22" revision="/0/@revisions.14" branch="/0/@branches.0"/>
    <actions type="M" current_file_path="src/git-ws/CommandLine/Flag.cpp" file="/0/@files.24" revision="/0/@revisions.14" branch="/0/@branches.0"/>
    <actions type="M" current_file_path="src/git-ws/main.cpp" file="/0/@files.25" revision="/0/@revisions.14" branch="/0/@branches.0"/>
    <actions type="M" current_file_path="src/git-ws/main.cpp" file="/0/@files.25" revision="/0/@revisions.15" branch="/0/@branches.0"/>
    <actions type="A" current_file_path=".gitmodules" file="/0/@files.27" revision="/0/@revisions.16" branch="/0/@branches.0"/>
    <actions type="M" current_file_path="include/git-ws/CommandLine/CommandLine.h" file="/0/@files.26" revision="/0/@revisions.16" branch="/0/@branches.0"/>
    <actions type="A" current_file_path="LICENSE" file="/0/@files.28" revision="/0/@revisions.17" branch="/0/@branches.0"/>
    <actions type="M" current_file_path="src/git-ws/main.cpp" file="/0/@files.25" revision="/0/@revisions.18" branch="/0/@branches.0"/>
    <actions type="M" current_file_path="include/git-ws/CommandLine/Arg.h" file="/0/@files.12" revision="/0/@revisions.19" branch="/0/@branches.0"/>
    <actions type="M" current_file_path="include/git-ws/CommandLine/ArgBase.h" file="/0/@files.13" revision="/0/@revisions.19" branch="/0/@branches.0"/>
    <actions type="M" current_file_path="include/git-ws/CommandLine/Cmd.h" file="/0/@files.14" revision="/0/@revisions.19" branch="/0/@branches.0"/>
    <actions type="M" current_file_path="include/git-ws/CommandLine/CmdLine.h" file="/0/@files.15" revision="/0/@revisions.19" branch="/0/@branches.0"/>
    <actions type="M" current_file_path="include/git-ws/CommandLine/CommandLine.h" file="/0/@files.26" revision="/0/@revisions.19" branch="/0/@branches.0"/>
    <actions type="M" current_file_path="include/git-ws/CommandLine/Flag.h" file="/0/@files.16" revision="/0/@revisions.19" branch="/0/@branches.0"/>
    <actions type="M" current_file_path="include/git-ws/CommandLine/Parser.h" file="/0/@files.17" revision="/0/@revisions.19" branch="/0/@branches.0"/>
    <actions type="M" current_file_path="src/git-ws/CommandLine/ArgBase.cpp" file="/0/@files.21" revision="/0/@revisions.19" branch="/0/@branches.0"/>
    <actions type="M" current_file_path="src/git-ws/CommandLine/Cmd.cpp" file="/0/@files.22" revision="/0/@revisions.19" branch="/0/@branches.0"/>
    <actions type="M" current_file_path="src/git-ws/CommandLine/CmdLine.cpp" file="/0/@files.23" revision="/0/@revisions.19" branch="/0/@branches.0"/>
    <actions type="M" current_file_path="src/git-ws/CommandLine/Flag.cpp" file="/0/@files.24" revision="/0/@revisions.19" branch="/0/@branches.0"/>
    <actions type="M" current_file_path="README.md" file="/0/@files.1" revision="/0/@revisions.20" branch="/0/@branches.0"/>
    <actions type="M" current_file_path="extlibs/SSVJsonCpp" file="/0/@files.4" revision="/0/@revisions.20" branch="/0/@branches.0"/>
    <actions type="M" current_file_path="extlibs/SSVUtils" file="/0/@files.5" revision="/0/@revisions.20" branch="/0/@branches.0"/>
    <actions type="M" current_file_path="extlibs/SSVUtilsJson" file="/0/@files.6" revision="/0/@revisions.20" branch="/0/@branches.0"/>
    <actions type="M" current_file_path="include/git-ws/CommandLine/Arg.h" file="/0/@files.12" revision="/0/@revisions.20" branch="/0/@branches.0"/>
    <actions type="M" current_file_path="include/git-ws/CommandLine/ArgBase.h" file="/0/@files.13" revision="/0/@revisions.20" branch="/0/@branches.0"/>
    <actions type="M" current_file_path="include/git-ws/CommandLine/Cmd.h" file="/0/@files.14" revision="/0/@revisions.20" branch="/0/@branches.0"/>
    <actions type="M" current_file_path="src/git-ws/CommandLine/Cmd.cpp" file="/0/@files.22" revision="/0/@revisions.20" branch="/0/@branches.0"/>
    <actions type="M" current_file_path="src/git-ws/main.cpp" file="/0/@files.25" revision="/0/@revisions.20" branch="/0/@branches.0"/>
    <actions type="M" current_file_path="include/git-ws/CommandLine/Arg.h" file="/0/@files.12" revision="/0/@revisions.21" branch="/0/@branches.0"/>
    <actions type="M" current_file_path="include/git-ws/CommandLine/ArgBase.h" file="/0/@files.13" revision="/0/@revisions.21" branch="/0/@branches.0"/>
    <actions type="M" current_file_path="include/git-ws/CommandLine/Cmd.h" file="/0/@files.14" revision="/0/@revisions.21" branch="/0/@branches.0"/>
    <actions type="M" current_file_path="src/git-ws/CommandLine/Cmd.cpp" file="/0/@files.22" revision="/0/@revisions.21" branch="/0/@branches.0"/>
    <actions type="M" current_file_path="src/git-ws/CommandLine/CmdLine.cpp" file="/0/@files.23" revision="/0/@revisions.21" branch="/0/@branches.0"/>
    <actions type="M" current_file_path="src/git-ws/main.cpp" file="/0/@files.25" revision="/0/@revisions.21" branch="/0/@branches.0"/>
    <actions type="M" current_file_path="src/git-ws/CommandLine/Flag.cpp" file="/0/@files.24" revision="/0/@revisions.22" branch="/0/@branches.0"/>
    <actions type="M" current_file_path="src/git-ws/main.cpp" file="/0/@files.25" revision="/0/@revisions.22" branch="/0/@branches.0"/>
    <actions type="M" current_file_path="src/git-ws/CommandLine/CmdLine.cpp" file="/0/@files.23" revision="/0/@revisions.23" branch="/0/@branches.0"/>
    <actions type="M" current_file_path="extlibs/SSVJsonCpp" file="/0/@files.4" revision="/0/@revisions.24" branch="/0/@branches.0"/>
    <actions type="M" current_file_path="extlibs/SSVUtilsJson" file="/0/@files.6" revision="/0/@revisions.24" branch="/0/@branches.0"/>
    <actions type="M" current_file_path=".gitmodules" file="/0/@files.27" revision="/0/@revisions.25" branch="/0/@branches.0"/>
    <actions type="M" current_file_path="src/git-ws/main.cpp" file="/0/@files.25" revision="/0/@revisions.26" branch="/0/@branches.0"/>
    <actions type="M" current_file_path="extlibs/SSVUtilsJson" file="/0/@files.6" revision="/0/@revisions.27" branch="/0/@branches.0"/>
    <actions type="M" current_file_path="extlibs/SSVUtilsJson" file="/0/@files.6" revision="/0/@revisions.28" branch="/0/@branches.0"/>
    <actions type="M" current_file_path="extlibs/SSVUtils" file="/0/@files.5" revision="/0/@revisions.29" branch="/0/@branches.0"/>
    <actions type="M" current_file_path="extlibs/SSVUtilsJson" file="/0/@files.6" revision="/0/@revisions.29" branch="/0/@branches.0"/>
    <actions type="M" current_file_path="extlibs/SSVUtilsJson" file="/0/@files.6" revision="/0/@revisions.30" branch="/0/@branches.0"/>
    <actions type="A" current_file_path="init-repository.sh" file="/0/@files.29" revision="/0/@revisions.30" branch="/0/@branches.0"/>
    <actions type="M" current_file_path="src/git-ws/main.cpp" file="/0/@files.25" revision="/0/@revisions.31" branch="/0/@branches.0"/>
    <actions type="M" current_file_path="extlibs/SSVUtils" file="/0/@files.5" revision="/0/@revisions.32" branch="/0/@branches.0"/>
    <actions type="M" current_file_path="extlibs/SSVUtilsJson" file="/0/@files.6" revision="/0/@revisions.32" branch="/0/@branches.0"/>
    <actions type="M" current_file_path="src/git-ws/main.cpp" file="/0/@files.25" revision="/0/@revisions.32" branch="/0/@branches.0"/>
    <actions type="M" current_file_path="include/git-ws/CommandLine/ArgBase.h" file="/0/@files.13" revision="/0/@revisions.33" branch="/0/@branches.0"/>
    <actions type="M" current_file_path="include/git-ws/CommandLine/Arg.h" file="/0/@files.12" revision="/0/@revisions.34" branch="/0/@branches.0"/>
    <actions type="C" current_file_path="include/git-ws/CommandLine/OptArg.h" file="/0/@files.30" revision="/0/@revisions.34" branch="/0/@branches.0" copy="/0/@fileCopies.0"/>
    <actions type="M" current_file_path="include/git-ws/CommandLine/Cmd.h" file="/0/@files.14" revision="/0/@revisions.35" branch="/0/@branches.0"/>
    <actions type="M" current_file_path="include/git-ws/CommandLine/CmdLine.h" file="/0/@files.15" revision="/0/@revisions.35" branch="/0/@branches.0"/>
    <actions type="M" current_file_path="include/git-ws/CommandLine/CommandLine.h" file="/0/@files.26" revision="/0/@revisions.35" branch="/0/@branches.0"/>
    <actions type="M" current_file_path="include/git-ws/CommandLine/Flag.h" file="/0/@files.16" revision="/0/@revisions.35" branch="/0/@branches.0"/>
    <actions type="M" current_file_path="src/git-ws/CommandLine/ArgBase.cpp" file="/0/@files.21" revision="/0/@revisions.35" branch="/0/@branches.0"/>
    <actions type="M" current_file_path="src/git-ws/CommandLine/Cmd.cpp" file="/0/@files.22" revision="/0/@revisions.35" branch="/0/@branches.0"/>
    <actions type="M" current_file_path="src/git-ws/CommandLine/CmdLine.cpp" file="/0/@files.23" revision="/0/@revisions.35" branch="/0/@branches.0"/>
    <actions type="M" current_file_path="src/git-ws/CommandLine/Flag.cpp" file="/0/@files.24" revision="/0/@revisions.35" branch="/0/@branches.0"/>
    <actions type="M" current_file_path="src/git-ws/main.cpp" file="/0/@files.25" revision="/0/@revisions.36" branch="/0/@branches.0"/>
    <actions type="M" current_file_path="extlibs/SSVUtils" file="/0/@files.5" revision="/0/@revisions.37" branch="/0/@branches.0"/>
    <actions type="M" current_file_path="extlibs/SSVUtilsJson" file="/0/@files.6" revision="/0/@revisions.37" branch="/0/@branches.0"/>
    <actions type="M" current_file_path="extlibs/SSVUtilsJson" file="/0/@files.6" revision="/0/@revisions.38" branch="/0/@branches.0"/>
    <actions type="M" current_file_path="include/git-ws/CommandLine/OptArg.h" file="/0/@files.30" revision="/0/@revisions.39" branch="/0/@branches.0"/>
    <actions type="M" current_file_path="README.md" file="/0/@files.1" revision="/0/@revisions.40" branch="/0/@branches.0"/>
    <actions type="M" current_file_path="src/git-ws/main.cpp" file="/0/@files.25" revision="/0/@revisions.41" branch="/0/@branches.0"/>
    <actions type="M" current_file_path="src/git-ws/main.cpp" file="/0/@files.25" revision="/0/@revisions.42" branch="/0/@branches.0"/>
    <actions type="M" current_file_path="src/git-ws/main.cpp" file="/0/@files.25" revision="/0/@revisions.43" branch="/0/@branches.0"/>
    <actions type="M" current_file_path="CMakeLists.txt" file="/0/@files.2" revision="/0/@revisions.44" branch="/0/@branches.0"/>
    <actions type="A" current_file_path="include/git-ws/GitWs/GitWs.h" file="/0/@files.32" revision="/0/@revisions.44" branch="/0/@branches.0"/>
    <actions type="C" current_file_path="src/git-ws/GitWs/GitWs.cpp" file="/0/@files.34" revision="/0/@revisions.44" branch="/0/@branches.0" copy="/0/@fileCopies.1"/>
    <actions type="M" current_file_path="src/git-ws/main.cpp" file="/0/@files.25" revision="/0/@revisions.44" branch="/0/@branches.0"/>
    <actions type="M" current_file_path="include/git-ws/GitWs/GitWs.h" file="/0/@files.32" revision="/0/@revisions.45" branch="/0/@branches.0"/>
    <actions type="M" current_file_path="src/git-ws/GitWs/GitWs.cpp" file="/0/@files.34" revision="/0/@revisions.45" branch="/0/@branches.0"/>
    <actions type="M" current_file_path="README.md" file="/0/@files.1" revision="/0/@revisions.46" branch="/0/@branches.0"/>
    <actions type="M" current_file_path="src/git-ws/GitWs/GitWs.cpp" file="/0/@files.34" revision="/0/@revisions.47" branch="/0/@branches.0"/>
    <actions type="M" current_file_path="src/git-ws/GitWs/GitWs.cpp" file="/0/@files.34" revision="/0/@revisions.48" branch="/0/@branches.0"/>
    <actions type="M" current_file_path="src/git-ws/GitWs/GitWs.cpp" file="/0/@files.34" revision="/0/@revisions.49" branch="/0/@branches.0"/>
    <files file_name="ROOT" file_type="directory" childrenLinks="/0/@fileLinks.0 /0/@fileLinks.1 /0/@fileLinks.2 /0/@fileLinks.6 /0/@fileLinks.7 /0/@fileLinks.8 /0/@fileLinks.17 /0/@fileLinks.26 /0/@fileLinks.27 /0/@fileLinks.28"/>
    <files file_name="README.md" file_type="devel-doc" actions="/0/@actions.0 /0/@actions.2 /0/@actions.20 /0/@actions.56 /0/@actions.104 /0/@actions.114" parentLinks="/0/@fileLinks.0" patches="/513 /526 /542 /610 /614" patcheLines="/1 /20 /55 /99 /107" hunks="/194 /276 /277 /341 /443 /444 /500 /501 /503 /499 /502 /504 /505"/>
    <files file_name="CMakeLists.txt" file_type="documentation" actions="/0/@actions.1 /0/@actions.13 /0/@actions.21 /0/@actions.108" parentLinks="/0/@fileLinks.1" patches="/517 /529 /573 /617" patcheLines="/2 /13 /21 /103" hunks="/195 /253 /278 /279 /466"/>
    <files file_name="extlibs" file_type="directory" childrenLinks="/0/@fileLinks.3 /0/@fileLinks.4 /0/@fileLinks.5" parentLinks="/0/@fileLinks.2"/>
    <files file_name="SSVJsonCpp" file_type="unknown" actions="/0/@actions.3 /0/@actions.16 /0/@actions.57 /0/@actions.74" parentLinks="/0/@fileLinks.3" patches="/518 /522 /543 /563" patcheLines="/3 /16 /56 /72" hunks="/196 /271 /342 /382"/>
    <files file_name="SSVUtils" file_type="unknown" actions="/0/@actions.4 /0/@actions.8 /0/@actions.58 /0/@actions.80 /0/@actions.85 /0/@actions.100" parentLinks="/0/@fileLinks.4" patches="/514 /519 /544 /587 /589 /597" patcheLines="/4 /8 /57 /77 /82 /96" hunks="/197 /200 /343 /390 /396 /440"/>
    <files file_name="SSVUtilsJson" file_type="unknown" actions="/0/@actions.5 /0/@actions.9 /0/@actions.10 /0/@actions.18 /0/@actions.59 /0/@actions.75 /0/@actions.78 /0/@actions.79 /0/@actions.81 /0/@actions.82 /0/@actions.86 /0/@actions.101 /0/@actions.102" parentLinks="/0/@fileLinks.5" patches="/512 /515 /520 /525 /545 /564 /565 /586 /588 /590 /593 /598 /599" patcheLines="/5 /9 /10 /18 /58 /73 /75 /76 /78 /79 /83 /97 /98" hunks="/198 /201 /202 /273 /344 /383 /388 /389 /391 /392 /397 /441 /442"/>
    <files file_name="main.cpp" file_type="code" actions="/0/@actions.6 /0/@actions.11 /0/@actions.12 /0/@actions.14 /0/@actions.17 /0/@actions.19 /0/@actions.28" parentLinks="/0/@fileLinks.6" patches="/521 /523 /524 /527 /528 /530 /580" patcheLines="/6 /11 /12 /14 /17 /19 /22" hunks="/199 /203 /204 /205 /206 /210 /211 /207 /208 /209 /212 /213 /214 /215 /216 /217 /218 /219 /220 /221 /222 /223 /224 /225 /228 /229 /230 /231 /232 /237 /243 /251 /226 /227 /233 /234 /235 /236 /238 /239 /240 /241 /242 /244 /245 /246 /247 /248 /249 /250 /252 /254 /260 /261 /268 /269 /270 /255 /256 /257 /258 /259 /262 /263 /264 /265 /266 /267 /272 /275 /274 /280" content="/865 /866 /867 /868 /869 /873" blames="/111 /112 /114 /120 /121 /122"/>
    <files file_name=".gitignore" file_type="unknown" actions="/0/@actions.7 /0/@actions.15" parentLinks="/0/@fileLinks.7" patches="/511 /516" patcheLines="/7 /15" blames="/113 /117"/>
    <files file_name="include" file_type="directory" childrenLinks="/0/@fileLinks.9" parentLinks="/0/@fileLinks.8"/>
    <files file_name="git-ws" file_type="directory" childrenLinks="/0/@fileLinks.10 /0/@fileLinks.30" parentLinks="/0/@fileLinks.9"/>
    <files file_name="CommandLine" file_type="directory" childrenLinks="/0/@fileLinks.11 /0/@fileLinks.12 /0/@fileLinks.13 /0/@fileLinks.14 /0/@fileLinks.15 /0/@fileLinks.16 /0/@fileLinks.25 /0/@fileLinks.29" parentLinks="/0/@fileLinks.10"/>
    <files file_name="Arg.h" file_type="code" actions="/0/@actions.22 /0/@actions.45 /0/@actions.60 /0/@actions.65 /0/@actions.89" parentLinks="/0/@fileLinks.11" copiesFrom="/0/@fileCopies.0" patches="/546 /551 /567 /574 /595" patcheLines="/23 /44 /59 /64 /85" hunks="/281 /330 /345 /355 /353 /354 /399" content="/870 /891 /903 /907 /921" blames="/115 /139 /152 /156 /170"/>
    <files file_name="ArgBase.h" file_type="code" actions="/0/@actions.23 /0/@actions.46 /0/@actions.61 /0/@actions.66 /0/@actions.88" parentLinks="/0/@fileLinks.12" patches="/547 /552 /568 /575 /591" patcheLines="/24 /45 /60 /65 /84" hunks="/282 /331 /346 /356 /398" content="/872 /892 /901 /906 /917" blames="/116 /140 /151 /154 /171"/>
    <files file_name="Cmd.h" file_type="code" actions="/0/@actions.24 /0/@actions.34 /0/@actions.47 /0/@actions.62 /0/@actions.67 /0/@actions.91" parentLinks="/0/@fileLinks.13" patches="/531 /548 /553 /569 /576 /601" patcheLines="/25 /34 /46 /61 /66 /87" hunks="/283 /292 /332 /347 /348 /349 /358 /359 /357 /404 /405 /402 /403 /406 /407 /408 /409 /410" content="/871 /882 /893 /904 /910 /923" blames="/118 /130 /146 /153 /158 /177"/>
    <files file_name="CmdLine.h" file_type="code" actions="/0/@actions.25 /0/@actions.48 /0/@actions.92" parentLinks="/0/@fileLinks.14" patches="/554 /577 /602" patcheLines="/26 /47 /88" hunks="/284 /333 /411 /412" content="/874 /894 /924" blames="/119 /145 /172"/>
    <files file_name="Flag.h" file_type="code" actions="/0/@actions.26 /0/@actions.36 /0/@actions.50 /0/@actions.94" parentLinks="/0/@fileLinks.15" patches="/533 /556 /578 /604" patcheLines="/27 /35 /48 /89" hunks="/285 /293 /334 /413 /414" content="/875 /883 /896 /927" blames="/125 /133 /143 /176"/>
    <files file_name="Parser.h" file_type="code" actions="/0/@actions.27 /0/@actions.51" parentLinks="/0/@fileLinks.16" patches="/557 /579" patcheLines="/28 /49" hunks="/286 /335" content="/877 /897" blames="/124 /144"/>
    <files file_name="src" file_type="directory" childrenLinks="/0/@fileLinks.18" parentLinks="/0/@fileLinks.17"/>
    <files file_name="git-ws" file_type="directory" childrenLinks="/0/@fileLinks.19 /0/@fileLinks.24 /0/@fileLinks.32" parentLinks="/0/@fileLinks.18"/>
    <files file_name="CommandLine" file_type="directory" childrenLinks="/0/@fileLinks.20 /0/@fileLinks.21 /0/@fileLinks.22 /0/@fileLinks.23" parentLinks="/0/@fileLinks.19"/>
    <files file_name="ArgBase.cpp" file_type="code" actions="/0/@actions.29 /0/@actions.52 /0/@actions.95" parentLinks="/0/@fileLinks.20" patches="/558 /581 /605" patcheLines="/29 /50 /90" hunks="/287 /336 /415" content="/876 /898 /926" blames="/123 /147 /175"/>
    <files file_name="Cmd.cpp" file_type="code" actions="/0/@actions.30 /0/@actions.37 /0/@actions.53 /0/@actions.63 /0/@actions.68 /0/@actions.96" parentLinks="/0/@fileLinks.21" patches="/534 /549 /559 /570 /582 /606" patcheLines="/30 /36 /51 /62 /67 /91" hunks="/288 /294 /295 /337 /351 /350 /361 /360 /416 /417 /418 /419 /420 /421 /422 /423 /424 /425 /426" content="/880 /885 /900 /905 /909 /929" blames="/128 /136 /150 /155 /161 /178"/>
    <files file_name="CmdLine.cpp" file_type="code" actions="/0/@actions.31 /0/@actions.54 /0/@actions.69 /0/@actions.73 /0/@actions.97" parentLinks="/0/@fileLinks.22" patches="/560 /562 /571 /583 /607" patcheLines="/31 /52 /68 /71 /92" hunks="/289 /338 /362 /367 /363 /364 /365 /366 /381 /380 /427 /433 /428 /429 /430 /431 /432" content="/879 /899 /912 /915 /930" blames="/127 /149 /160 /164 /179"/>
    <files file_name="Flag.cpp" file_type="code" actions="/0/@actions.32 /0/@actions.38 /0/@actions.55 /0/@actions.71 /0/@actions.98" parentLinks="/0/@fileLinks.23" patches="/535 /561 /584 /608" patcheLines="/32 /37 /53 /93" hunks="/290 /296 /339 /434 /435" content="/878 /886 /902 /911 /928" blames="/126 /132 /148 /159 /180"/>
    <files file_name="main.cpp" file_type="code" actions="/0/@actions.33 /0/@actions.39 /0/@actions.40 /0/@actions.44 /0/@actions.64 /0/@actions.70 /0/@actions.72 /0/@actions.77 /0/@actions.84 /0/@actions.87 /0/@actions.99 /0/@actions.105 /0/@actions.106 /0/@actions.107 /0/@actions.111" parentLinks="/0/@fileLinks.24" copiesFrom="/0/@fileCopies.1" patches="/536 /538 /539 /541 /550 /566 /572 /585 /592 /600 /609 /611 /615 /620" patcheLines="/33 /38 /40 /43 /63 /69 /70 /74 /81 /95 /100 /101 /102 /104" hunks="/291 /314 /318 /297 /298 /299 /300 /301 /302 /303 /304 /305 /306 /307 /308 /309 /310 /311 /312 /313 /315 /316 /317 /319 /321 /322 /323 /324 /327 /328 /329 /352 /368 /369 /370 /371 /372 /373 /374 /375 /376 /377 /378 /379 /386 /384 /385 /387 /394 /395 /437 /438 /439 /445 /449 /451 /453 /446 /447 /448 /450 /452 /454 /455 /456 /457 /458 /459 /460 /461 /464 /462 /463 /465 /467 /468 /469 /470 /471 /472" content="/881 /888 /889 /890 /908 /913 /914 /918 /919 /920 /932 /933 /934 /935 /937" blames="/131 /137 /138 /141 /157 /162 /163 /166 /168 /169 /183 /184 /185 /186 /187"/>
    <files file_name="CommandLine.h" file_type="code" actions="/0/@actions.35 /0/@actions.42 /0/@actions.49 /0/@actions.93" parentLinks="/0/@fileLinks.25" patches="/532 /555 /603" patcheLines="/39 /54 /94" hunks="/320 /340 /436" content="/884 /887 /895 /925" blames="/129 /135 /142 /174"/>
    <files file_name=".gitmodules" file_type="unknown" actions="/0/@actions.41 /0/@actions.76" parentLinks="/0/@fileLinks.26" patches="/537" patcheLines="/41" hunks="/325" blames="/134 /165"/>
    <files file_name="LICENSE" file_type="devel-doc" actions="/0/@actions.43" parentLinks="/0/@fileLinks.27" patches="/540" patcheLines="/42" hunks="/326"/>
    <files file_name="init-repository.sh" file_type="code" actions="/0/@actions.83" parentLinks="/0/@fileLinks.28" patches="/594" patcheLines="/80" hunks="/393" content="/916" blames="/167"/>
    <files file_name="OptArg.h" file_type="code" actions="/0/@actions.90 /0/@actions.103" parentLinks="/0/@fileLinks.29" copiesTo="/0/@fileCopies.0" patches="/596" patcheLines="/86" hunks="/400 /401" content="/922 /931" blames="/173 /181"/>
    <files file_name="GitWs" file_type="directory" childrenLinks="/0/@fileLinks.31" parentLinks="/0/@fileLinks.30"/>
    <files file_name="GitWs.h" file_type="code" actions="/0/@actions.109 /0/@actions.112" parentLinks="/0/@fileLinks.31" patches="/618" patcheLines="/105" hunks="/473" content="/936 /938" blames="/182 /188"/>
    <files file_name="GitWs" file_type="directory" childrenLinks="/0/@fileLinks.33" parentLinks="/0/@fileLinks.32"/>
    <files file_name="GitWs.cpp" file_type="code" actions="/0/@actions.110 /0/@actions.113 /0/@actions.115 /0/@actions.116 /0/@actions.117" parentLinks="/0/@fileLinks.33" copiesTo="/0/@fileCopies.1" patches="/612 /613 /616 /619" patcheLines="/106 /108 /109 /110" hunks="/477 /474 /475 /476 /478 /479 /480 /481 /482 /483 /484 /485 /486 /487 /488 /489 /490 /491 /492 /493 /494 /495 /496 /497 /498 /506 /507 /508 /509 /510" content="/939 /940 /941 /942 /943" blames="/189 /190 /191 /192 /193"/>
    <branches name="master" actions="/0/@actions.0 /0/@actions.1 /0/@actions.2 /0/@actions.3 /0/@actions.4 /0/@actions.5 /0/@actions.6 /0/@actions.7 /0/@actions.8 /0/@actions.9 /0/@actions.10 /0/@actions.11 /0/@actions.12 /0/@actions.13 /0/@actions.14 /0/@actions.15 /0/@actions.16 /0/@actions.17 /0/@actions.18 /0/@actions.19 /0/@actions.20 /0/@actions.21 /0/@actions.22 /0/@actions.23 /0/@actions.24 /0/@actions.25 /0/@actions.26 /0/@actions.27 /0/@actions.28 /0/@actions.29 /0/@actions.30 /0/@actions.31 /0/@actions.32 /0/@actions.33 /0/@actions.34 /0/@actions.35 /0/@actions.36 /0/@actions.37 /0/@actions.38 /0/@actions.39 /0/@actions.40 /0/@actions.41 /0/@actions.42 /0/@actions.43 /0/@actions.44 /0/@actions.45 /0/@actions.46 /0/@actions.47 /0/@actions.48 /0/@actions.49 /0/@actions.50 /0/@actions.51 /0/@actions.52 /0/@actions.53 /0/@actions.54 /0/@actions.55 /0/@actions.56 /0/@actions.57 /0/@actions.58 /0/@actions.59 /0/@actions.60 /0/@actions.61 /0/@actions.62 /0/@actions.63 /0/@actions.64 /0/@actions.65 /0/@actions.66 /0/@actions.67 /0/@actions.68 /0/@actions.69 /0/@actions.70 /0/@actions.71 /0/@actions.72 /0/@actions.73 /0/@actions.74 /0/@actions.75 /0/@actions.76 /0/@actions.77 /0/@actions.78 /0/@actions.79 /0/@actions.80 /0/@actions.81 /0/@actions.82 /0/@actions.83 /0/@actions.84 /0/@actions.85 /0/@actions.86 /0/@actions.87 /0/@actions.88 /0/@actions.89 /0/@actions.90 /0/@actions.91 /0/@actions.92 /0/@actions.93 /0/@actions.94 /0/@actions.95 /0/@actions.96 /0/@actions.97 /0/@actions.98 /0/@actions.99 /0/@actions.100 /0/@actions.101 /0/@actions.102 /0/@actions.103 /0/@actions.104 /0/@actions.105 /0/@actions.106 /0/@actions.107 /0/@actions.108 /0/@actions.109 /0/@actions.110 /0/@actions.111 /0/@actions.112 /0/@actions.113 /0/@actions.114 /0/@actions.115 /0/@actions.116 /0/@actions.117"/>
    <fileLinks parent="/0/@files.0" child="/0/@files.1" revision="/0/@revisions.0"/>
    <fileLinks parent="/0/@files.0" child="/0/@files.2" revision="/0/@revisions.1"/>
    <fileLinks parent="/0/@files.0" child="/0/@files.3" revision="/0/@revisions.1"/>
    <fileLinks parent="/0/@files.3" child="/0/@files.4" revision="/0/@revisions.1"/>
    <fileLinks parent="/0/@files.3" child="/0/@files.5" revision="/0/@revisions.1"/>
    <fileLinks parent="/0/@files.3" child="/0/@files.6" revision="/0/@revisions.1"/>
    <fileLinks parent="/0/@files.0" child="/0/@files.7" revision="/0/@revisions.1"/>
    <fileLinks parent="/0/@files.0" child="/0/@files.8" revision="/0/@revisions.2"/>
    <fileLinks parent="/0/@files.0" child="/0/@files.9" revision="/0/@revisions.13"/>
    <fileLinks parent="/0/@files.9" child="/0/@files.10" revision="/0/@revisions.13"/>
    <fileLinks parent="/0/@files.10" child="/0/@files.11" revision="/0/@revisions.13"/>
    <fileLinks parent="/0/@files.11" child="/0/@files.12" revision="/0/@revisions.13"/>
    <fileLinks parent="/0/@files.11" child="/0/@files.13" revision="/0/@revisions.13"/>
    <fileLinks parent="/0/@files.11" child="/0/@files.14" revision="/0/@revisions.13"/>
    <fileLinks parent="/0/@files.11" child="/0/@files.15" revision="/0/@revisions.13"/>
    <fileLinks parent="/0/@files.11" child="/0/@files.16" revision="/0/@revisions.13"/>
    <fileLinks parent="/0/@files.11" child="/0/@files.17" revision="/0/@revisions.13"/>
    <fileLinks parent="/0/@files.0" child="/0/@files.18" revision="/0/@revisions.13"/>
    <fileLinks parent="/0/@files.18" child="/0/@files.19" revision="/0/@revisions.13"/>
    <fileLinks parent="/0/@files.19" child="/0/@files.20" revision="/0/@revisions.13"/>
    <fileLinks parent="/0/@files.20" child="/0/@files.21" revision="/0/@revisions.13"/>
    <fileLinks parent="/0/@files.20" child="/0/@files.22" revision="/0/@revisions.13"/>
    <fileLinks parent="/0/@files.20" child="/0/@files.23" revision="/0/@revisions.13"/>
    <fileLinks parent="/0/@files.20" child="/0/@files.24" revision="/0/@revisions.13"/>
    <fileLinks parent="/0/@files.19" child="/0/@files.25" revision="/0/@revisions.13"/>
    <fileLinks parent="/0/@files.11" child="/0/@files.26" revision="/0/@revisions.14"/>
    <fileLinks parent="/0/@files.0" child="/0/@files.27" revision="/0/@revisions.16"/>
    <fileLinks parent="/0/@files.0" child="/0/@files.28" revision="/0/@revisions.17"/>
    <fileLinks parent="/0/@files.0" child="/0/@files.29" revision="/0/@revisions.30"/>
    <fileLinks parent="/0/@files.11" child="/0/@files.30" revision="/0/@revisions.34"/>
    <fileLinks parent="/0/@files.10" child="/0/@files.31" revision="/0/@revisions.44"/>
    <fileLinks parent="/0/@files.31" child="/0/@files.32" revision="/0/@revisions.44"/>
    <fileLinks parent="/0/@files.19" child="/0/@files.33" revision="/0/@revisions.44"/>
    <fileLinks parent="/0/@files.33" child="/0/@files.34" revision="/0/@revisions.44"/>
    <fileCopies action="/0/@actions.90" toFile="/0/@files.30" fromFile="/0/@files.12" fromRevision="/0/@revisions.34"/>
    <fileCopies action="/0/@actions.110" toFile="/0/@files.34" fromFile="/0/@files.25" fromRevision="/0/@revisions.44"/>
  </MG:Model>
  <MG:PatchLines added="4" file="/0/@files.1" revision="/0/@revisions.0"/>
  <MG:PatchLines added="34" file="/0/@files.2" revision="/0/@revisions.1"/>
  <MG:PatchLines added="1" file="/0/@files.4" revision="/0/@revisions.1"/>
  <MG:PatchLines added="1" file="/0/@files.5" revision="/0/@revisions.1"/>
  <MG:PatchLines added="1" file="/0/@files.6" revision="/0/@revisions.1"/>
  <MG:PatchLines added="63" file="/0/@files.7" revision="/0/@revisions.1"/>
  <MG:PatchLines file="/0/@files.8" revision="/0/@revisions.2"/>
  <MG:PatchLines added="1" removed="1" file="/0/@files.5" revision="/0/@revisions.3"/>
  <MG:PatchLines added="1" removed="1" file="/0/@files.6" revision="/0/@revisions.3"/>
  <MG:PatchLines added="1" removed="1" file="/0/@files.6" revision="/0/@revisions.4"/>
  <MG:PatchLines added="115" removed="23" file="/0/@files.7" revision="/0/@revisions.5"/>
  <MG:PatchLines added="115" removed="44" file="/0/@files.7" revision="/0/@revisions.6"/>
  <MG:PatchLines added="1" file="/0/@files.2" revision="/0/@revisions.7"/>
  <MG:PatchLines added="64" removed="21" file="/0/@files.7" revision="/0/@revisions.7"/>
  <MG:PatchLines file="/0/@files.8" revision="/0/@revisions.8"/>
  <MG:PatchLines added="1" removed="1" file="/0/@files.4" revision="/0/@revisions.9"/>
  <MG:PatchLines added="2" removed="3" file="/0/@files.7" revision="/0/@revisions.9"/>
  <MG:PatchLines added="1" removed="1" file="/0/@files.6" revision="/0/@revisions.10"/>
  <MG:PatchLines added="2" removed="1" file="/0/@files.7" revision="/0/@revisions.11"/>
  <MG:PatchLines added="19" removed="3" file="/0/@files.1" revision="/0/@revisions.12"/>
  <MG:PatchLines added="10" removed="3" file="/0/@files.2" revision="/0/@revisions.13"/>
  <MG:PatchLines removed="269" file="/0/@files.7" revision="/0/@revisions.13"/>
  <MG:PatchLines added="22" file="/0/@files.12" revision="/0/@revisions.13"/>
  <MG:PatchLines added="23" file="/0/@files.13" revision="/0/@revisions.13"/>
  <MG:PatchLines added="51" file="/0/@files.14" revision="/0/@revisions.13"/>
  <MG:PatchLines added="23" file="/0/@files.15" revision="/0/@revisions.13"/>
  <MG:PatchLines added="32" file="/0/@files.16" revision="/0/@revisions.13"/>
  <MG:PatchLines added="24" file="/0/@files.17" revision="/0/@revisions.13"/>
  <MG:PatchLines added="12" file="/0/@files.21" revision="/0/@revisions.13"/>
  <MG:PatchLines added="69" file="/0/@files.22" revision="/0/@revisions.13"/>
  <MG:PatchLines added="35" file="/0/@files.23" revision="/0/@revisions.13"/>
  <MG:PatchLines added="19" file="/0/@files.24" revision="/0/@revisions.13"/>
  <MG:PatchLines added="107" file="/0/@files.25" revision="/0/@revisions.13"/>
  <MG:PatchLines added="2" removed="1" file="/0/@files.14" revision="/0/@revisions.14"/>
  <MG:PatchLines added="3" removed="2" file="/0/@files.16" revision="/0/@revisions.14"/>
  <MG:PatchLines added="3" removed="3" file="/0/@files.22" revision="/0/@revisions.14"/>
  <MG:PatchLines added="3" removed="2" file="/0/@files.24" revision="/0/@revisions.14"/>
  <MG:PatchLines added="43" removed="62" file="/0/@files.25" revision="/0/@revisions.14"/>
  <MG:PatchLines added="11" file="/0/@files.26" revision="/0/@revisions.14"/>
  <MG:PatchLines added="17" removed="4" file="/0/@files.25" revision="/0/@revisions.15"/>
  <MG:PatchLines added="9" file="/0/@files.27" revision="/0/@revisions.16"/>
  <MG:PatchLines added="26" file="/0/@files.28" revision="/0/@revisions.17"/>
  <MG:PatchLines added="11" removed="1" file="/0/@files.25" revision="/0/@revisions.18"/>
  <MG:PatchLines added="4" file="/0/@files.12" revision="/0/@revisions.19"/>
  <MG:PatchLines added="4" file="/0/@files.13" revision="/0/@revisions.19"/>
  <MG:PatchLines added="4" file="/0/@files.14" revision="/0/@revisions.19"/>
  <MG:PatchLines added="4" file="/0/@files.15" revision="/0/@revisions.19"/>
  <MG:PatchLines added="4" file="/0/@files.16" revision="/0/@revisions.19"/>
  <MG:PatchLines added="4" file="/0/@files.17" revision="/0/@revisions.19"/>
  <MG:PatchLines added="4" file="/0/@files.21" revision="/0/@revisions.19"/>
  <MG:PatchLines added="4" file="/0/@files.22" revision="/0/@revisions.19"/>
  <MG:PatchLines added="4" file="/0/@files.23" revision="/0/@revisions.19"/>
  <MG:PatchLines added="4" file="/0/@files.24" revision="/0/@revisions.19"/>
  <MG:PatchLines added="4" file="/0/@files.26" revision="/0/@revisions.19"/>
  <MG:PatchLines added="1" file="/0/@files.1" revision="/0/@revisions.20"/>
  <MG:PatchLines added="1" removed="1" file="/0/@files.4" revision="/0/@revisions.20"/>
  <MG:PatchLines added="1" removed="1" file="/0/@files.5" revision="/0/@revisions.20"/>
  <MG:PatchLines added="1" removed="1" file="/0/@files.6" revision="/0/@revisions.20"/>
  <MG:PatchLines added="12" file="/0/@files.12" revision="/0/@revisions.20"/>
  <MG:PatchLines added="6" file="/0/@files.13" revision="/0/@revisions.20"/>
  <MG:PatchLines added="5" file="/0/@files.14" revision="/0/@revisions.20"/>
  <MG:PatchLines added="3" removed="1" file="/0/@files.22" revision="/0/@revisions.20"/>
  <MG:PatchLines added="1" removed="1" file="/0/@files.25" revision="/0/@revisions.20"/>
  <MG:PatchLines added="5" removed="2" file="/0/@files.12" revision="/0/@revisions.21"/>
  <MG:PatchLines removed="6" file="/0/@files.13" revision="/0/@revisions.21"/>
  <MG:PatchLines added="3" removed="1" file="/0/@files.14" revision="/0/@revisions.21"/>
  <MG:PatchLines added="12" removed="1" file="/0/@files.22" revision="/0/@revisions.21"/>
  <MG:PatchLines added="31" removed="7" file="/0/@files.23" revision="/0/@revisions.21"/>
  <MG:PatchLines added="11" removed="11" file="/0/@files.25" revision="/0/@revisions.21"/>
  <MG:PatchLines added="2" removed="3" file="/0/@files.25" revision="/0/@revisions.22"/>
  <MG:PatchLines added="2" removed="1" file="/0/@files.23" revision="/0/@revisions.23"/>
  <MG:PatchLines added="1" removed="1" file="/0/@files.4" revision="/0/@revisions.24"/>
  <MG:PatchLines added="1" removed="1" file="/0/@files.6" revision="/0/@revisions.24"/>
  <MG:PatchLines added="10" removed="4" file="/0/@files.25" revision="/0/@revisions.26"/>
  <MG:PatchLines added="1" removed="1" file="/0/@files.6" revision="/0/@revisions.27"/>
  <MG:PatchLines added="1" removed="1" file="/0/@files.6" revision="/0/@revisions.28"/>
  <MG:PatchLines added="1" removed="1" file="/0/@files.5" revision="/0/@revisions.29"/>
  <MG:PatchLines added="1" removed="1" file="/0/@files.6" revision="/0/@revisions.29"/>
  <MG:PatchLines added="1" removed="1" file="/0/@files.6" revision="/0/@revisions.30"/>
  <MG:PatchLines added="12" file="/0/@files.29" revision="/0/@revisions.30"/>
  <MG:PatchLines added="7" removed="2" file="/0/@files.25" revision="/0/@revisions.31"/>
  <MG:PatchLines added="1" removed="1" file="/0/@files.5" revision="/0/@revisions.32"/>
  <MG:PatchLines added="1" removed="1" file="/0/@files.6" revision="/0/@revisions.32"/>
  <MG:PatchLines added="2" removed="2" file="/0/@files.13" revision="/0/@revisions.33"/>
  <MG:PatchLines removed="15" file="/0/@files.12" revision="/0/@revisions.34"/>
  <MG:PatchLines added="2" removed="14" file="/0/@files.30" revision="/0/@revisions.34"/>
  <MG:PatchLines added="19" removed="19" file="/0/@files.14" revision="/0/@revisions.35"/>
  <MG:PatchLines added="5" removed="4" file="/0/@files.15" revision="/0/@revisions.35"/>
  <MG:PatchLines added="6" removed="6" file="/0/@files.16" revision="/0/@revisions.35"/>
  <MG:PatchLines added="2" removed="2" file="/0/@files.21" revision="/0/@revisions.35"/>
  <MG:PatchLines added="20" removed="20" file="/0/@files.22" revision="/0/@revisions.35"/>
  <MG:PatchLines added="8" removed="6" file="/0/@files.23" revision="/0/@revisions.35"/>
  <MG:PatchLines added="6" removed="7" file="/0/@files.24" revision="/0/@revisions.35"/>
  <MG:PatchLines added="1" file="/0/@files.26" revision="/0/@revisions.35"/>
  <MG:PatchLines added="16" removed="3" file="/0/@files.25" revision="/0/@revisions.36"/>
  <MG:PatchLines added="1" removed="1" file="/0/@files.5" revision="/0/@revisions.37"/>
  <MG:PatchLines added="1" removed="1" file="/0/@files.6" revision="/0/@revisions.37"/>
  <MG:PatchLines added="1" removed="1" file="/0/@files.6" revision="/0/@revisions.38"/>
  <MG:PatchLines added="58" removed="11" file="/0/@files.1" revision="/0/@revisions.40"/>
  <MG:PatchLines added="56" removed="18" file="/0/@files.25" revision="/0/@revisions.41"/>
  <MG:PatchLines added="1" removed="1" file="/0/@files.25" revision="/0/@revisions.42"/>
  <MG:PatchLines added="33" removed="4" file="/0/@files.25" revision="/0/@revisions.43"/>
  <MG:PatchLines added="2" file="/0/@files.2" revision="/0/@revisions.44"/>
  <MG:PatchLines added="4" removed="185" file="/0/@files.25" revision="/0/@revisions.44"/>
  <MG:PatchLines added="44" file="/0/@files.32" revision="/0/@revisions.44"/>
  <MG:PatchLines added="31" removed="61" file="/0/@files.34" revision="/0/@revisions.44"/>
  <MG:PatchLines added="11" removed="7" file="/0/@files.1" revision="/0/@revisions.46"/>
  <MG:PatchLines added="5" file="/0/@files.34" revision="/0/@revisions.47"/>
  <MG:PatchLines added="1" file="/0/@files.34" revision="/0/@revisions.48"/>
  <MG:PatchLines removed="1" file="/0/@files.34" revision="/0/@revisions.49"/>
  <MG:Blame lineCount="63" file="/0/@files.7" author="/0/@people.0" revision="/0/@revisions.1"/>
  <MG:Blame lineCount="155" file="/0/@files.7" author="/0/@people.0" revision="/0/@revisions.5"/>
  <MG:Blame lineCount="199" file="/0/@files.8" author="/0/@people.0" revision="/0/@revisions.2"/>
  <MG:Blame lineCount="226" file="/0/@files.7" author="/0/@people.0" revision="/0/@revisions.6"/>
  <MG:Blame lineCount="22" file="/0/@files.12" author="/0/@people.0" revision="/0/@revisions.13"/>
  <MG:Blame lineCount="23" file="/0/@files.13" author="/0/@people.0" revision="/0/@revisions.13"/>
  <MG:Blame lineCount="200" file="/0/@files.8" author="/0/@people.0" revision="/0/@revisions.8"/>
  <MG:Blame lineCount="51" file="/0/@files.14" author="/0/@people.0" revision="/0/@revisions.13"/>
  <MG:Blame lineCount="23" file="/0/@files.15" author="/0/@people.0" revision="/0/@revisions.13"/>
  <MG:Blame lineCount="268" file="/0/@files.7" author="/0/@people.0" revision="/0/@revisions.9"/>
  <MG:Blame lineCount="269" file="/0/@files.7" author="/0/@people.0" revision="/0/@revisions.7"/>
  <MG:Blame lineCount="269" file="/0/@files.7" author="/0/@people.0" revision="/0/@revisions.11"/>
  <MG:Blame lineCount="12" file="/0/@files.21" author="/0/@people.0" revision="/0/@revisions.13"/>
  <MG:Blame lineCount="24" file="/0/@files.17" author="/0/@people.0" revision="/0/@revisions.13"/>
  <MG:Blame lineCount="32" file="/0/@files.16" author="/0/@people.0" revision="/0/@revisions.13"/>
  <MG:Blame lineCount="19" file="/0/@files.24" author="/0/@people.0" revision="/0/@revisions.13"/>
  <MG:Blame lineCount="35" file="/0/@files.23" author="/0/@people.0" revision="/0/@revisions.13"/>
  <MG:Blame lineCount="69" file="/0/@files.22" author="/0/@people.0" revision="/0/@revisions.13"/>
  <MG:Blame lineCount="11" file="/0/@files.26" author="/0/@people.0" revision="/0/@revisions.14"/>
  <MG:Blame lineCount="52" file="/0/@files.14" author="/0/@people.0" revision="/0/@revisions.14"/>
  <MG:Blame lineCount="107" file="/0/@files.25" author="/0/@people.0" revision="/0/@revisions.13"/>
  <MG:Blame lineCount="20" file="/0/@files.24" author="/0/@people.0" revision="/0/@revisions.14"/>
  <MG:Blame lineCount="33" file="/0/@files.16" author="/0/@people.0" revision="/0/@revisions.14"/>
  <MG:Blame lineCount="9" file="/0/@files.27" author="/0/@people.0" revision="/0/@revisions.16"/>
  <MG:Blame lineCount="11" file="/0/@files.26" author="/0/@people.0" revision="/0/@revisions.16"/>
  <MG:Blame lineCount="69" file="/0/@files.22" author="/0/@people.0" revision="/0/@revisions.14"/>
  <MG:Blame lineCount="88" file="/0/@files.25" author="/0/@people.0" revision="/0/@revisions.14"/>
  <MG:Blame lineCount="101" file="/0/@files.25" author="/0/@people.0" revision="/0/@revisions.15"/>
  <MG:Blame lineCount="26" file="/0/@files.12" author="/0/@people.0" revision="/0/@revisions.19"/>
  <MG:Blame lineCount="27" file="/0/@files.13" author="/0/@people.0" revision="/0/@revisions.19"/>
  <MG:Blame lineCount="111" file="/0/@files.25" author="/0/@people.0" revision="/0/@revisions.18"/>
  <MG:Blame lineCount="15" file="/0/@files.26" author="/0/@people.0" revision="/0/@revisions.19"/>
  <MG:Blame lineCount="37" file="/0/@files.16" author="/0/@people.0" revision="/0/@revisions.19"/>
  <MG:Blame lineCount="28" file="/0/@files.17" author="/0/@people.0" revision="/0/@revisions.19"/>
  <MG:Blame lineCount="27" file="/0/@files.15" author="/0/@people.0" revision="/0/@revisions.19"/>
  <MG:Blame lineCount="56" file="/0/@files.14" author="/0/@people.0" revision="/0/@revisions.19"/>
  <MG:Blame lineCount="16" file="/0/@files.21" author="/0/@people.0" revision="/0/@revisions.19"/>
  <MG:Blame lineCount="24" file="/0/@files.24" author="/0/@people.0" revision="/0/@revisions.19"/>
  <MG:Blame lineCount="39" file="/0/@files.23" author="/0/@people.0" revision="/0/@revisions.19"/>
  <MG:Blame lineCount="73" file="/0/@files.22" author="/0/@people.0" revision="/0/@revisions.19"/>
  <MG:Blame lineCount="33" file="/0/@files.13" author="/0/@people.0" revision="/0/@revisions.20"/>
  <MG:Blame lineCount="38" file="/0/@files.12" author="/0/@people.0" revision="/0/@revisions.20"/>
  <MG:Blame lineCount="61" file="/0/@files.14" author="/0/@people.0" revision="/0/@revisions.20"/>
  <MG:Blame lineCount="27" file="/0/@files.13" author="/0/@people.0" revision="/0/@revisions.21"/>
  <MG:Blame lineCount="75" file="/0/@files.22" author="/0/@people.0" revision="/0/@revisions.20"/>
  <MG:Blame lineCount="41" file="/0/@files.12" author="/0/@people.0" revision="/0/@revisions.21"/>
  <MG:Blame lineCount="111" file="/0/@files.25" author="/0/@people.0" revision="/0/@revisions.20"/>
  <MG:Blame lineCount="63" file="/0/@files.14" author="/0/@people.0" revision="/0/@revisions.21"/>
  <MG:Blame lineCount="24" file="/0/@files.24" author="/0/@people.0" revision="/0/@revisions.22"/>
  <MG:Blame lineCount="63" file="/0/@files.23" author="/0/@people.0" revision="/0/@revisions.21"/>
  <MG:Blame lineCount="86" file="/0/@files.22" author="/0/@people.0" revision="/0/@revisions.21"/>
  <MG:Blame lineCount="110" file="/0/@files.25" author="/0/@people.0" revision="/0/@revisions.22"/>
  <MG:Blame lineCount="111" file="/0/@files.25" author="/0/@people.0" revision="/0/@revisions.21"/>
  <MG:Blame lineCount="64" file="/0/@files.23" author="/0/@people.0" revision="/0/@revisions.23"/>
  <MG:Blame lineCount="9" file="/0/@files.27" author="/0/@people.0" revision="/0/@revisions.25"/>
  <MG:Blame lineCount="116" file="/0/@files.25" author="/0/@people.0" revision="/0/@revisions.26"/>
  <MG:Blame lineCount="12" file="/0/@files.29" author="/0/@people.0" revision="/0/@revisions.30"/>
  <MG:Blame lineCount="121" file="/0/@files.25" author="/0/@people.0" revision="/0/@revisions.31"/>
  <MG:Blame lineCount="121" file="/0/@files.25" author="/0/@people.0" revision="/0/@revisions.32"/>
  <MG:Blame lineCount="26" file="/0/@files.12" author="/0/@people.0" revision="/0/@revisions.34"/>
  <MG:Blame lineCount="27" file="/0/@files.13" author="/0/@people.0" revision="/0/@revisions.33"/>
  <MG:Blame lineCount="28" file="/0/@files.15" author="/0/@people.0" revision="/0/@revisions.35"/>
  <MG:Blame lineCount="29" file="/0/@files.30" author="/0/@people.0" revision="/0/@revisions.34"/>
  <MG:Blame lineCount="16" file="/0/@files.26" author="/0/@people.0" revision="/0/@revisions.35"/>
  <MG:Blame lineCount="16" file="/0/@files.21" author="/0/@people.0" revision="/0/@revisions.35"/>
  <MG:Blame lineCount="37" file="/0/@files.16" author="/0/@people.0" revision="/0/@revisions.35"/>
  <MG:Blame lineCount="63" file="/0/@files.14" author="/0/@people.0" revision="/0/@revisions.35"/>
  <MG:Blame lineCount="86" file="/0/@files.22" author="/0/@people.0" revision="/0/@revisions.35"/>
  <MG:Blame lineCount="66" file="/0/@files.23" author="/0/@people.0" revision="/0/@revisions.35"/>
  <MG:Blame lineCount="23" file="/0/@files.24" author="/0/@people.0" revision="/0/@revisions.35"/>
  <MG:Blame lineCount="29" file="/0/@files.30" author="/0/@people.0" revision="/0/@revisions.39"/>
  <MG:Blame lineCount="44" file="/0/@files.32" author="/0/@people.0" revision="/0/@revisions.44"/>
  <MG:Blame lineCount="134" file="/0/@files.25" author="/0/@people.0" revision="/0/@revisions.36"/>
  <MG:Blame lineCount="172" file="/0/@files.25" author="/0/@people.0" revision="/0/@revisions.41"/>
  <MG:Blame lineCount="172" file="/0/@files.25" author="/0/@people.0" revision="/0/@revisions.42"/>
  <MG:Blame lineCount="201" file="/0/@files.25" author="/0/@people.0" revision="/0/@revisions.43"/>
  <MG:Blame lineCount="20" file="/0/@files.25" author="/0/@people.0" revision="/0/@revisions.44"/>
  <MG:Blame lineCount="44" file="/0/@files.32" author="/0/@people.0" revision="/0/@revisions.45"/>
  <MG:Blame lineCount="171" file="/0/@files.34" author="/0/@people.0" revision="/0/@revisions.44"/>
  <MG:Blame lineCount="171" file="/0/@files.34" author="/0/@people.0" revision="/0/@revisions.45"/>
  <MG:Blame lineCount="176" file="/0/@files.34" author="/0/@people.0" revision="/0/@revisions.47"/>
  <MG:Blame lineCount="177" file="/0/@files.34" author="/0/@people.0" revision="/0/@revisions.48"/>
  <MG:Blame lineCount="176" file="/0/@files.34" author="/0/@people.0" revision="/0/@revisions.49"/>
  <MG:Hunk new_end_line="4" new_start_line="1" file="/0/@files.1" revision="/0/@revisions.0"/>
  <MG:Hunk new_end_line="34" new_start_line="1" file="/0/@files.2" revision="/0/@revisions.1"/>
  <MG:Hunk new_end_line="1" new_start_line="1" file="/0/@files.4" revision="/0/@revisions.1"/>
  <MG:Hunk new_end_line="1" new_start_line="1" file="/0/@files.5" revision="/0/@revisions.1"/>
  <MG:Hunk new_end_line="1" new_start_line="1" file="/0/@files.6" revision="/0/@revisions.1"/>
  <MG:Hunk new_end_line="63" new_start_line="1" file="/0/@files.7" revision="/0/@revisions.1"/>
  <MG:Hunk new_end_line="1" new_start_line="1" old_end_line="1" old_start_line="1" file="/0/@files.5" revision="/0/@revisions.3"/>
  <MG:Hunk new_end_line="1" new_start_line="1" old_end_line="1" old_start_line="1" file="/0/@files.6" revision="/0/@revisions.3"/>
  <MG:Hunk new_end_line="1" new_start_line="1" old_end_line="1" old_start_line="1" file="/0/@files.6" revision="/0/@revisions.4"/>
  <MG:Hunk new_end_line="5" new_start_line="5" file="/0/@files.7" revision="/0/@revisions.5"/>
  <MG:Hunk new_end_line="17" new_start_line="11" file="/0/@files.7" revision="/0/@revisions.5"/>
  <MG:Hunk new_end_line="20" new_start_line="20" file="/0/@files.7" revision="/0/@revisions.5"/>
  <MG:Hunk new_end_line="31" new_start_line="23" file="/0/@files.7" revision="/0/@revisions.5"/>
  <MG:Hunk new_end_line="33" new_start_line="33" old_end_line="16" old_start_line="15" file="/0/@files.7" revision="/0/@revisions.5" hunkBlame="/634"/>
  <MG:Hunk new_end_line="43" new_start_line="35" old_end_line="19" old_start_line="18" file="/0/@files.7" revision="/0/@revisions.5" hunkBlame="/635"/>
  <MG:Hunk new_end_line="46" new_start_line="46" old_end_line="22" old_start_line="22" file="/0/@files.7" revision="/0/@revisions.5" hunkBlame="/636"/>
  <MG:Hunk new_end_line="48" new_start_line="48" file="/0/@files.7" revision="/0/@revisions.5"/>
  <MG:Hunk new_end_line="51" new_start_line="51" file="/0/@files.7" revision="/0/@revisions.5"/>
  <MG:Hunk old_end_line="27" old_start_line="27" file="/0/@files.7" revision="/0/@revisions.5" hunkBlame="/637"/>
  <MG:Hunk new_end_line="54" new_start_line="54" old_end_line="29" old_start_line="29" file="/0/@files.7" revision="/0/@revisions.5" hunkBlame="/638"/>
  <MG:Hunk new_end_line="80" new_start_line="56" old_end_line="31" old_start_line="31" file="/0/@files.7" revision="/0/@revisions.5" hunkBlame="/639"/>
  <MG:Hunk new_end_line="88" new_start_line="83" old_end_line="34" old_start_line="34" file="/0/@files.7" revision="/0/@revisions.5" hunkBlame="/640"/>
  <MG:Hunk new_end_line="91" new_start_line="90" old_end_line="36" old_start_line="36" file="/0/@files.7" revision="/0/@revisions.5" hunkBlame="/641"/>
  <MG:Hunk new_end_line="97" new_start_line="94" old_end_line="39" old_start_line="39" file="/0/@files.7" revision="/0/@revisions.5" hunkBlame="/642"/>
  <MG:Hunk new_end_line="100" new_start_line="99" old_end_line="41" old_start_line="41" file="/0/@files.7" revision="/0/@revisions.5" hunkBlame="/643"/>
  <MG:Hunk new_end_line="103" new_start_line="102" old_end_line="43" old_start_line="43" file="/0/@files.7" revision="/0/@revisions.5" hunkBlame="/644"/>
  <MG:Hunk new_end_line="111" new_start_line="105" old_end_line="46" old_start_line="45" file="/0/@files.7" revision="/0/@revisions.5" hunkBlame="/645"/>
  <MG:Hunk new_end_line="114" new_start_line="113" old_end_line="49" old_start_line="48" file="/0/@files.7" revision="/0/@revisions.5" hunkBlame="/646"/>
  <MG:Hunk new_end_line="121" new_start_line="116" old_end_line="52" old_start_line="51" file="/0/@files.7" revision="/0/@revisions.5" hunkBlame="/647"/>
  <MG:Hunk new_end_line="123" new_start_line="123" old_end_line="54" old_start_line="54" file="/0/@files.7" revision="/0/@revisions.5" hunkBlame="/648"/>
  <MG:Hunk new_end_line="131" new_start_line="125" old_end_line="57" old_start_line="56" file="/0/@files.7" revision="/0/@revisions.5" hunkBlame="/649"/>
  <MG:Hunk new_end_line="152" new_start_line="134" old_end_line="60" old_start_line="60" file="/0/@files.7" revision="/0/@revisions.5" hunkBlame="/633"/>
  <MG:Hunk new_end_line="26" new_start_line="15" old_end_line="16" old_start_line="15" file="/0/@files.7" revision="/0/@revisions.6" hunkBlame="/650"/>
  <MG:Hunk new_end_line="28" new_start_line="28" old_end_line="18" old_start_line="18" file="/0/@files.7" revision="/0/@revisions.6" hunkBlame="/651"/>
  <MG:Hunk new_end_line="35" new_start_line="30" file="/0/@files.7" revision="/0/@revisions.6"/>
  <MG:Hunk new_end_line="40" new_start_line="38" file="/0/@files.7" revision="/0/@revisions.6"/>
  <MG:Hunk new_end_line="49" new_start_line="48" file="/0/@files.7" revision="/0/@revisions.6"/>
  <MG:Hunk new_end_line="62" new_start_line="62" file="/0/@files.7" revision="/0/@revisions.6"/>
  <MG:Hunk new_end_line="71" new_start_line="66" file="/0/@files.7" revision="/0/@revisions.6"/>
  <MG:Hunk new_end_line="82" new_start_line="82" old_end_line="54" old_start_line="54" file="/0/@files.7" revision="/0/@revisions.6" hunkBlame="/652"/>
  <MG:Hunk new_end_line="85" new_start_line="84" old_end_line="57" old_start_line="56" file="/0/@files.7" revision="/0/@revisions.6" hunkBlame="/653"/>
  <MG:Hunk new_end_line="96" new_start_line="96" old_end_line="68" old_start_line="68" file="/0/@files.7" revision="/0/@revisions.6" hunkBlame="/654"/>
  <MG:Hunk new_end_line="104" new_start_line="104" old_end_line="76" old_start_line="76" file="/0/@files.7" revision="/0/@revisions.6" hunkBlame="/655"/>
  <MG:Hunk new_end_line="144" new_start_line="109" file="/0/@files.7" revision="/0/@revisions.6"/>
  <MG:Hunk new_end_line="153" new_start_line="152" old_end_line="88" old_start_line="88" file="/0/@files.7" revision="/0/@revisions.6" hunkBlame="/656"/>
  <MG:Hunk new_end_line="155" new_start_line="155" old_end_line="90" old_start_line="90" file="/0/@files.7" revision="/0/@revisions.6" hunkBlame="/657"/>
  <MG:Hunk new_end_line="159" new_start_line="159" old_end_line="95" old_start_line="94" file="/0/@files.7" revision="/0/@revisions.6" hunkBlame="/658"/>
  <MG:Hunk new_end_line="164" new_start_line="164" old_end_line="103" old_start_line="100" file="/0/@files.7" revision="/0/@revisions.6" hunkBlame="/659 /660"/>
  <MG:Hunk new_end_line="177" new_start_line="170" old_end_line="110" old_start_line="109" file="/0/@files.7" revision="/0/@revisions.6" hunkBlame="/661"/>
  <MG:Hunk new_end_line="179" new_start_line="179" file="/0/@files.7" revision="/0/@revisions.6"/>
  <MG:Hunk new_end_line="181" new_start_line="181" old_end_line="114" old_start_line="113" file="/0/@files.7" revision="/0/@revisions.6" hunkBlame="/662"/>
  <MG:Hunk new_end_line="187" new_start_line="183" old_end_line="117" old_start_line="116" file="/0/@files.7" revision="/0/@revisions.6" hunkBlame="/663"/>
  <MG:Hunk new_end_line="192" new_start_line="189" old_end_line="120" old_start_line="119" file="/0/@files.7" revision="/0/@revisions.6" hunkBlame="/664"/>
  <MG:Hunk new_end_line="201" new_start_line="195" old_end_line="123" old_start_line="123" file="/0/@files.7" revision="/0/@revisions.6" hunkBlame="/665"/>
  <MG:Hunk new_end_line="206" new_start_line="203" old_end_line="126" old_start_line="125" file="/0/@files.7" revision="/0/@revisions.6" hunkBlame="/666"/>
  <MG:Hunk new_end_line="212" new_start_line="209" old_end_line="130" old_start_line="129" file="/0/@files.7" revision="/0/@revisions.6" hunkBlame="/667"/>
  <MG:Hunk old_end_line="132" old_start_line="132" file="/0/@files.7" revision="/0/@revisions.6" hunkBlame="/668"/>
  <MG:Hunk new_end_line="218" new_start_line="217" file="/0/@files.7" revision="/0/@revisions.6"/>
  <MG:Hunk new_end_line="223" new_start_line="222" old_end_line="152" old_start_line="139" file="/0/@files.7" revision="/0/@revisions.6" hunkBlame="/669"/>
  <MG:Hunk new_end_line="32" new_start_line="32" file="/0/@files.2" revision="/0/@revisions.7"/>
  <MG:Hunk new_end_line="10" new_start_line="10" file="/0/@files.7" revision="/0/@revisions.7"/>
  <MG:Hunk new_end_line="38" new_start_line="38" old_end_line="37" old_start_line="37" file="/0/@files.7" revision="/0/@revisions.7" hunkBlame="/680"/>
  <MG:Hunk new_end_line="52" new_start_line="51" old_end_line="51" old_start_line="50" file="/0/@files.7" revision="/0/@revisions.7" hunkBlame="/681"/>
  <MG:Hunk new_end_line="80" new_start_line="79" old_end_line="79" old_start_line="78" file="/0/@files.7" revision="/0/@revisions.7" hunkBlame="/670 /671"/>
  <MG:Hunk new_end_line="86" new_start_line="86" old_end_line="85" old_start_line="85" file="/0/@files.7" revision="/0/@revisions.7" hunkBlame="/672"/>
  <MG:Hunk new_end_line="98" new_start_line="98" old_end_line="98" old_start_line="97" file="/0/@files.7" revision="/0/@revisions.7" hunkBlame="/673"/>
  <MG:Hunk new_end_line="181" new_start_line="181" file="/0/@files.7" revision="/0/@revisions.7"/>
  <MG:Hunk new_end_line="194" new_start_line="184" file="/0/@files.7" revision="/0/@revisions.7"/>
  <MG:Hunk new_end_line="201" new_start_line="201" old_end_line="189" old_start_line="189" file="/0/@files.7" revision="/0/@revisions.7" hunkBlame="/674"/>
  <MG:Hunk new_end_line="217" new_start_line="207" old_end_line="195" old_start_line="195" file="/0/@files.7" revision="/0/@revisions.7" hunkBlame="/675"/>
  <MG:Hunk new_end_line="221" new_start_line="219" old_end_line="201" old_start_line="197" file="/0/@files.7" revision="/0/@revisions.7" hunkBlame="/676"/>
  <MG:Hunk new_end_line="223" new_start_line="223" old_end_line="205" old_start_line="203" file="/0/@files.7" revision="/0/@revisions.7" hunkBlame="/677"/>
  <MG:Hunk new_end_line="227" new_start_line="227" old_end_line="209" old_start_line="209" file="/0/@files.7" revision="/0/@revisions.7" hunkBlame="/678"/>
  <MG:Hunk new_end_line="229" new_start_line="229" old_end_line="212" old_start_line="211" file="/0/@files.7" revision="/0/@revisions.7" hunkBlame="/679"/>
  <MG:Hunk new_end_line="254" new_start_line="232" file="/0/@files.7" revision="/0/@revisions.7"/>
  <MG:Hunk new_end_line="258" new_start_line="257" file="/0/@files.7" revision="/0/@revisions.7"/>
  <MG:Hunk new_end_line="269" new_start_line="269" file="/0/@files.7" revision="/0/@revisions.7"/>
  <MG:Hunk new_end_line="1" new_start_line="1" old_end_line="1" old_start_line="1" file="/0/@files.4" revision="/0/@revisions.9"/>
  <MG:Hunk new_end_line="189" new_start_line="188" old_end_line="190" old_start_line="188" file="/0/@files.7" revision="/0/@revisions.9" hunkBlame="/632"/>
  <MG:Hunk new_end_line="1" new_start_line="1" old_end_line="1" old_start_line="1" file="/0/@files.6" revision="/0/@revisions.10"/>
  <MG:Hunk new_end_line="228" new_start_line="228" old_end_line="228" old_start_line="228" file="/0/@files.7" revision="/0/@revisions.11" hunkBlame="/682"/>
  <MG:Hunk new_end_line="243" new_start_line="243" file="/0/@files.7" revision="/0/@revisions.11"/>
  <MG:Hunk new_end_line="1" new_start_line="1" old_end_line="2" old_start_line="1" file="/0/@files.1" revision="/0/@revisions.12" hunkBlame="/621"/>
  <MG:Hunk new_end_line="20" new_start_line="3" old_end_line="4" old_start_line="4" file="/0/@files.1" revision="/0/@revisions.12" hunkBlame="/622"/>
  <MG:Hunk new_end_line="19" new_start_line="18" old_end_line="18" old_start_line="18" file="/0/@files.2" revision="/0/@revisions.13" hunkBlame="/626"/>
  <MG:Hunk new_end_line="28" new_start_line="21" old_end_line="21" old_start_line="20" file="/0/@files.2" revision="/0/@revisions.13" hunkBlame="/627"/>
  <MG:Hunk old_end_line="269" old_start_line="1" file="/0/@files.7" revision="/0/@revisions.13" hunkBlame="/702 /703 /704 /705 /706 /707"/>
  <MG:Hunk new_end_line="22" new_start_line="1" file="/0/@files.12" revision="/0/@revisions.13"/>
  <MG:Hunk new_end_line="23" new_start_line="1" file="/0/@files.13" revision="/0/@revisions.13"/>
  <MG:Hunk new_end_line="51" new_start_line="1" file="/0/@files.14" revision="/0/@revisions.13"/>
  <MG:Hunk new_end_line="23" new_start_line="1" file="/0/@files.15" revision="/0/@revisions.13"/>
  <MG:Hunk new_end_line="32" new_start_line="1" file="/0/@files.16" revision="/0/@revisions.13"/>
  <MG:Hunk new_end_line="24" new_start_line="1" file="/0/@files.17" revision="/0/@revisions.13"/>
  <MG:Hunk new_end_line="12" new_start_line="1" file="/0/@files.21" revision="/0/@revisions.13"/>
  <MG:Hunk new_end_line="69" new_start_line="1" file="/0/@files.22" revision="/0/@revisions.13"/>
  <MG:Hunk new_end_line="35" new_start_line="1" file="/0/@files.23" revision="/0/@revisions.13"/>
  <MG:Hunk new_end_line="19" new_start_line="1" file="/0/@files.24" revision="/0/@revisions.13"/>
  <MG:Hunk new_end_line="107" new_start_line="1" file="/0/@files.25" revision="/0/@revisions.13"/>
  <MG:Hunk new_end_line="40" new_start_line="39" old_end_line="39" old_start_line="39" file="/0/@files.14" revision="/0/@revisions.14" hunkBlame="/690"/>
  <MG:Hunk new_end_line="22" new_start_line="20" old_end_line="21" old_start_line="20" file="/0/@files.16" revision="/0/@revisions.14" hunkBlame="/708"/>
  <MG:Hunk new_end_line="27" new_start_line="26" old_end_line="27" old_start_line="26" file="/0/@files.22" revision="/0/@revisions.14" hunkBlame="/712"/>
  <MG:Hunk new_end_line="32" new_start_line="32" old_end_line="32" old_start_line="32" file="/0/@files.22" revision="/0/@revisions.14" hunkBlame="/713"/>
  <MG:Hunk new_end_line="11" new_start_line="9" old_end_line="10" old_start_line="9" file="/0/@files.24" revision="/0/@revisions.14" hunkBlame="/721"/>
  <MG:Hunk new_end_line="7" new_start_line="7" old_end_line="12" old_start_line="7" file="/0/@files.25" revision="/0/@revisions.14" hunkBlame="/745"/>
  <MG:Hunk new_end_line="17" new_start_line="14" old_end_line="20" old_start_line="19" file="/0/@files.25" revision="/0/@revisions.14" hunkBlame="/746"/>
  <MG:Hunk new_end_line="19" new_start_line="19" old_end_line="22" old_start_line="22" file="/0/@files.25" revision="/0/@revisions.14" hunkBlame="/747"/>
  <MG:Hunk new_end_line="21" new_start_line="21" old_end_line="24" old_start_line="24" file="/0/@files.25" revision="/0/@revisions.14" hunkBlame="/748"/>
  <MG:Hunk new_end_line="24" new_start_line="23" old_end_line="27" old_start_line="26" file="/0/@files.25" revision="/0/@revisions.14" hunkBlame="/749"/>
  <MG:Hunk new_end_line="29" new_start_line="29" old_end_line="32" old_start_line="32" file="/0/@files.25" revision="/0/@revisions.14" hunkBlame="/750"/>
  <MG:Hunk new_end_line="33" new_start_line="31" old_end_line="36" old_start_line="34" file="/0/@files.25" revision="/0/@revisions.14" hunkBlame="/751"/>
  <MG:Hunk new_end_line="38" new_start_line="35" old_end_line="41" old_start_line="38" file="/0/@files.25" revision="/0/@revisions.14" hunkBlame="/752"/>
  <MG:Hunk new_end_line="40" new_start_line="40" old_end_line="44" old_start_line="43" file="/0/@files.25" revision="/0/@revisions.14" hunkBlame="/753"/>
  <MG:Hunk new_end_line="44" new_start_line="42" old_end_line="51" old_start_line="46" file="/0/@files.25" revision="/0/@revisions.14" hunkBlame="/754"/>
  <MG:Hunk new_end_line="46" new_start_line="46" old_end_line="54" old_start_line="53" file="/0/@files.25" revision="/0/@revisions.14" hunkBlame="/755"/>
  <MG:Hunk new_end_line="50" new_start_line="48" old_end_line="61" old_start_line="56" file="/0/@files.25" revision="/0/@revisions.14" hunkBlame="/756"/>
  <MG:Hunk new_end_line="52" new_start_line="52" old_end_line="64" old_start_line="63" file="/0/@files.25" revision="/0/@revisions.14" hunkBlame="/757"/>
  <MG:Hunk new_end_line="56" new_start_line="54" old_end_line="73" old_start_line="66" file="/0/@files.25" revision="/0/@revisions.14" hunkBlame="/758"/>
  <MG:Hunk new_end_line="59" new_start_line="58" old_end_line="76" old_start_line="75" file="/0/@files.25" revision="/0/@revisions.14" hunkBlame="/759"/>
  <MG:Hunk new_end_line="64" new_start_line="62" old_end_line="81" old_start_line="79" file="/0/@files.25" revision="/0/@revisions.14" hunkBlame="/760"/>
  <MG:Hunk new_end_line="66" new_start_line="66" old_end_line="83" old_start_line="83" file="/0/@files.25" revision="/0/@revisions.14" hunkBlame="/761"/>
  <MG:Hunk new_end_line="69" new_start_line="68" file="/0/@files.25" revision="/0/@revisions.14"/>
  <MG:Hunk new_end_line="72" new_start_line="71" old_end_line="89" old_start_line="86" file="/0/@files.25" revision="/0/@revisions.14" hunkBlame="/762"/>
  <MG:Hunk new_end_line="75" new_start_line="74" old_end_line="91" old_start_line="91" file="/0/@files.25" revision="/0/@revisions.14" hunkBlame="/763"/>
  <MG:Hunk old_end_line="98" old_start_line="95" file="/0/@files.25" revision="/0/@revisions.14" hunkBlame="/764"/>
  <MG:Hunk new_end_line="81" new_start_line="81" file="/0/@files.25" revision="/0/@revisions.14"/>
  <MG:Hunk new_end_line="83" new_start_line="83" old_end_line="102" old_start_line="102" file="/0/@files.25" revision="/0/@revisions.14" hunkBlame="/765"/>
  <MG:Hunk new_end_line="11" new_start_line="1" file="/0/@files.26" revision="/0/@revisions.14"/>
  <MG:Hunk new_end_line="1" new_start_line="1" file="/0/@files.25" revision="/0/@revisions.15"/>
  <MG:Hunk new_end_line="38" new_start_line="24" old_end_line="24" old_start_line="23" file="/0/@files.25" revision="/0/@revisions.15" hunkBlame="/766"/>
  <MG:Hunk old_end_line="81" old_start_line="81" file="/0/@files.25" revision="/0/@revisions.15" hunkBlame="/767"/>
  <MG:Hunk new_end_line="96" new_start_line="96" old_end_line="83" old_start_line="83" file="/0/@files.25" revision="/0/@revisions.15" hunkBlame="/768"/>
  <MG:Hunk new_end_line="9" new_start_line="1" file="/0/@files.27" revision="/0/@revisions.16"/>
  <MG:Hunk new_end_line="26" new_start_line="1" file="/0/@files.28" revision="/0/@revisions.17"/>
  <MG:Hunk new_end_line="4" new_start_line="1" file="/0/@files.25" revision="/0/@revisions.18"/>
  <MG:Hunk new_end_line="93" new_start_line="88" file="/0/@files.25" revision="/0/@revisions.18"/>
  <MG:Hunk new_end_line="96" new_start_line="96" old_end_line="86" old_start_line="86" file="/0/@files.25" revision="/0/@revisions.18" hunkBlame="/743"/>
  <MG:Hunk new_end_line="4" new_start_line="1" file="/0/@files.12" revision="/0/@revisions.19"/>
  <MG:Hunk new_end_line="4" new_start_line="1" file="/0/@files.13" revision="/0/@revisions.19"/>
  <MG:Hunk new_end_line="4" new_start_line="1" file="/0/@files.14" revision="/0/@revisions.19"/>
  <MG:Hunk new_end_line="4" new_start_line="1" file="/0/@files.15" revision="/0/@revisions.19"/>
  <MG:Hunk new_end_line="4" new_start_line="1" file="/0/@files.16" revision="/0/@revisions.19"/>
  <MG:Hunk new_end_line="4" new_start_line="1" file="/0/@files.17" revision="/0/@revisions.19"/>
  <MG:Hunk new_end_line="4" new_start_line="1" file="/0/@files.21" revision="/0/@revisions.19"/>
  <MG:Hunk new_end_line="4" new_start_line="1" file="/0/@files.22" revision="/0/@revisions.19"/>
  <MG:Hunk new_end_line="4" new_start_line="1" file="/0/@files.23" revision="/0/@revisions.19"/>
  <MG:Hunk new_end_line="4" new_start_line="1" file="/0/@files.24" revision="/0/@revisions.19"/>
  <MG:Hunk new_end_line="4" new_start_line="1" file="/0/@files.26" revision="/0/@revisions.19"/>
  <MG:Hunk new_end_line="21" new_start_line="21" file="/0/@files.1" revision="/0/@revisions.20"/>
  <MG:Hunk new_end_line="1" new_start_line="1" old_end_line="1" old_start_line="1" file="/0/@files.4" revision="/0/@revisions.20"/>
  <MG:Hunk new_end_line="1" new_start_line="1" old_end_line="1" old_start_line="1" file="/0/@files.5" revision="/0/@revisions.20"/>
  <MG:Hunk new_end_line="1" new_start_line="1" old_end_line="1" old_start_line="1" file="/0/@files.6" revision="/0/@revisions.20"/>
  <MG:Hunk new_end_line="35" new_start_line="24" file="/0/@files.12" revision="/0/@revisions.20"/>
  <MG:Hunk new_end_line="30" new_start_line="25" file="/0/@files.13" revision="/0/@revisions.20"/>
  <MG:Hunk new_end_line="17" new_start_line="17" file="/0/@files.14" revision="/0/@revisions.20"/>
  <MG:Hunk new_end_line="24" new_start_line="24" file="/0/@files.14" revision="/0/@revisions.20"/>
  <MG:Hunk new_end_line="40" new_start_line="38" file="/0/@files.14" revision="/0/@revisions.20"/>
  <MG:Hunk new_end_line="17" new_start_line="17" old_end_line="17" old_start_line="17" file="/0/@files.22" revision="/0/@revisions.20" hunkBlame="/714"/>
  <MG:Hunk new_end_line="29" new_start_line="28" file="/0/@files.22" revision="/0/@revisions.20"/>
  <MG:Hunk new_end_line="82" new_start_line="82" old_end_line="82" old_start_line="82" file="/0/@files.25" revision="/0/@revisions.20" hunkBlame="/744"/>
  <MG:Hunk new_end_line="15" new_start_line="15" old_end_line="15" old_start_line="15" file="/0/@files.12" revision="/0/@revisions.21" hunkBlame="/685"/>
  <MG:Hunk new_end_line="32" new_start_line="32" old_end_line="32" old_start_line="32" file="/0/@files.12" revision="/0/@revisions.21" hunkBlame="/686"/>
  <MG:Hunk new_end_line="37" new_start_line="35" file="/0/@files.12" revision="/0/@revisions.21"/>
  <MG:Hunk old_end_line="30" old_start_line="25" file="/0/@files.13" revision="/0/@revisions.21" hunkBlame="/683"/>
  <MG:Hunk new_end_line="38" new_start_line="38" old_end_line="38" old_start_line="38" file="/0/@files.14" revision="/0/@revisions.21" hunkBlame="/689"/>
  <MG:Hunk new_end_line="40" new_start_line="40" file="/0/@files.14" revision="/0/@revisions.21"/>
  <MG:Hunk new_end_line="58" new_start_line="58" file="/0/@files.14" revision="/0/@revisions.21"/>
  <MG:Hunk new_end_line="29" new_start_line="28" old_end_line="28" old_start_line="28" file="/0/@files.22" revision="/0/@revisions.21" hunkBlame="/715"/>
  <MG:Hunk new_end_line="75" new_start_line="66" file="/0/@files.22" revision="/0/@revisions.21"/>
  <MG:Hunk new_end_line="5" new_start_line="5" file="/0/@files.23" revision="/0/@revisions.21"/>
  <MG:Hunk new_end_line="24" new_start_line="24" old_end_line="24" old_start_line="23" file="/0/@files.23" revision="/0/@revisions.21" hunkBlame="/717"/>
  <MG:Hunk new_end_line="43" new_start_line="26" old_end_line="27" old_start_line="26" file="/0/@files.23" revision="/0/@revisions.21" hunkBlame="/718"/>
  <MG:Hunk new_end_line="47" new_start_line="45" old_end_line="30" old_start_line="29" file="/0/@files.23" revision="/0/@revisions.21" hunkBlame="/719"/>
  <MG:Hunk new_end_line="56" new_start_line="50" old_end_line="33" old_start_line="33" file="/0/@files.23" revision="/0/@revisions.21" hunkBlame="/720"/>
  <MG:Hunk new_end_line="59" new_start_line="59" file="/0/@files.23" revision="/0/@revisions.21"/>
  <MG:Hunk new_end_line="22" new_start_line="22" old_end_line="22" old_start_line="22" file="/0/@files.25" revision="/0/@revisions.21" hunkBlame="/774"/>
  <MG:Hunk new_end_line="49" new_start_line="49" old_end_line="49" old_start_line="49" file="/0/@files.25" revision="/0/@revisions.21" hunkBlame="/775"/>
  <MG:Hunk new_end_line="53" new_start_line="53" old_end_line="53" old_start_line="53" file="/0/@files.25" revision="/0/@revisions.21" hunkBlame="/776"/>
  <MG:Hunk new_end_line="55" new_start_line="55" old_end_line="55" old_start_line="55" file="/0/@files.25" revision="/0/@revisions.21" hunkBlame="/777"/>
  <MG:Hunk new_end_line="60" new_start_line="60" old_end_line="60" old_start_line="60" file="/0/@files.25" revision="/0/@revisions.21" hunkBlame="/778"/>
  <MG:Hunk new_end_line="66" new_start_line="66" old_end_line="66" old_start_line="66" file="/0/@files.25" revision="/0/@revisions.21" hunkBlame="/779"/>
  <MG:Hunk new_end_line="72" new_start_line="72" old_end_line="72" old_start_line="72" file="/0/@files.25" revision="/0/@revisions.21" hunkBlame="/780"/>
  <MG:Hunk new_end_line="87" new_start_line="86" old_end_line="87" old_start_line="86" file="/0/@files.25" revision="/0/@revisions.21" hunkBlame="/781"/>
  <MG:Hunk new_end_line="90" new_start_line="90" old_end_line="90" old_start_line="90" file="/0/@files.25" revision="/0/@revisions.21" hunkBlame="/782"/>
  <MG:Hunk new_end_line="106" new_start_line="106" old_end_line="106" old_start_line="106" file="/0/@files.25" revision="/0/@revisions.21" hunkBlame="/783"/>
  <MG:Hunk new_end_line="42" new_start_line="42" old_end_line="43" old_start_line="42" file="/0/@files.25" revision="/0/@revisions.22" hunkBlame="/784 /785"/>
  <MG:Hunk new_end_line="103" new_start_line="103" old_end_line="104" old_start_line="104" file="/0/@files.25" revision="/0/@revisions.22" hunkBlame="/786"/>
  <MG:Hunk new_end_line="42" new_start_line="42" old_end_line="42" old_start_line="42" file="/0/@files.23" revision="/0/@revisions.23" hunkBlame="/716"/>
  <MG:Hunk new_end_line="51" new_start_line="51" file="/0/@files.23" revision="/0/@revisions.23"/>
  <MG:Hunk new_end_line="1" new_start_line="1" old_end_line="1" old_start_line="1" file="/0/@files.4" revision="/0/@revisions.24"/>
  <MG:Hunk new_end_line="1" new_start_line="1" old_end_line="1" old_start_line="1" file="/0/@files.6" revision="/0/@revisions.24"/>
  <MG:Hunk new_end_line="24" new_start_line="24" old_end_line="24" old_start_line="24" file="/0/@files.25" revision="/0/@revisions.26" hunkBlame="/773"/>
  <MG:Hunk old_end_line="29" old_start_line="28" file="/0/@files.25" revision="/0/@revisions.26" hunkBlame="/771"/>
  <MG:Hunk new_end_line="41" new_start_line="39" file="/0/@files.25" revision="/0/@revisions.26"/>
  <MG:Hunk new_end_line="91" new_start_line="86" old_end_line="85" old_start_line="85" file="/0/@files.25" revision="/0/@revisions.26" hunkBlame="/772"/>
  <MG:Hunk new_end_line="1" new_start_line="1" old_end_line="1" old_start_line="1" file="/0/@files.6" revision="/0/@revisions.27"/>
  <MG:Hunk new_end_line="1" new_start_line="1" old_end_line="1" old_start_line="1" file="/0/@files.6" revision="/0/@revisions.28"/>
  <MG:Hunk new_end_line="1" new_start_line="1" old_end_line="1" old_start_line="1" file="/0/@files.5" revision="/0/@revisions.29"/>
  <MG:Hunk new_end_line="1" new_start_line="1" old_end_line="1" old_start_line="1" file="/0/@files.6" revision="/0/@revisions.29"/>
  <MG:Hunk new_end_line="1" new_start_line="1" old_end_line="1" old_start_line="1" file="/0/@files.6" revision="/0/@revisions.30"/>
  <MG:Hunk new_end_line="12" new_start_line="1" file="/0/@files.29" revision="/0/@revisions.30"/>
  <MG:Hunk new_end_line="74" new_start_line="68" old_end_line="68" old_start_line="68" file="/0/@files.25" revision="/0/@revisions.31" hunkBlame="/769"/>
  <MG:Hunk old_end_line="82" old_start_line="82" file="/0/@files.25" revision="/0/@revisions.31" hunkBlame="/770"/>
  <MG:Hunk new_end_line="1" new_start_line="1" old_end_line="1" old_start_line="1" file="/0/@files.5" revision="/0/@revisions.32"/>
  <MG:Hunk new_end_line="1" new_start_line="1" old_end_line="1" old_start_line="1" file="/0/@files.6" revision="/0/@revisions.32"/>
  <MG:Hunk new_end_line="23" new_start_line="22" old_end_line="23" old_start_line="22" file="/0/@files.13" revision="/0/@revisions.33" hunkBlame="/684"/>
  <MG:Hunk old_end_line="38" old_start_line="24" file="/0/@files.12" revision="/0/@revisions.34" hunkBlame="/687 /688"/>
  <MG:Hunk new_end_line="6" new_start_line="5" old_end_line="6" old_start_line="5" file="/0/@files.30" revision="/0/@revisions.34" hunkBlame="/794"/>
  <MG:Hunk old_end_line="24" old_start_line="13" file="/0/@files.30" revision="/0/@revisions.34" hunkBlame="/791 /792 /793"/>
  <MG:Hunk new_end_line="31" new_start_line="31" old_end_line="31" old_start_line="31" file="/0/@files.14" revision="/0/@revisions.35" hunkBlame="/691"/>
  <MG:Hunk new_end_line="35" new_start_line="34" old_end_line="36" old_start_line="34" file="/0/@files.14" revision="/0/@revisions.35" hunkBlame="/692"/>
  <MG:Hunk new_end_line="37" new_start_line="37" file="/0/@files.14" revision="/0/@revisions.35"/>
  <MG:Hunk new_end_line="41" new_start_line="39" file="/0/@files.14" revision="/0/@revisions.35"/>
  <MG:Hunk old_end_line="40" old_start_line="40" file="/0/@files.14" revision="/0/@revisions.35" hunkBlame="/693"/>
  <MG:Hunk old_end_line="44" old_start_line="42" file="/0/@files.14" revision="/0/@revisions.35" hunkBlame="/694"/>
  <MG:Hunk new_end_line="47" new_start_line="46" old_end_line="50" old_start_line="47" file="/0/@files.14" revision="/0/@revisions.35" hunkBlame="/695 /696"/>
  <MG:Hunk new_end_line="54" new_start_line="49" old_end_line="54" old_start_line="52" file="/0/@files.14" revision="/0/@revisions.35" hunkBlame="/697"/>
  <MG:Hunk new_end_line="59" new_start_line="56" old_end_line="59" old_start_line="56" file="/0/@files.14" revision="/0/@revisions.35" hunkBlame="/698 /699"/>
  <MG:Hunk new_end_line="18" new_start_line="18" old_end_line="18" old_start_line="18" file="/0/@files.15" revision="/0/@revisions.35" hunkBlame="/700"/>
  <MG:Hunk new_end_line="24" new_start_line="21" old_end_line="23" old_start_line="21" file="/0/@files.15" revision="/0/@revisions.35" hunkBlame="/701"/>
  <MG:Hunk new_end_line="27" new_start_line="27" old_end_line="27" old_start_line="27" file="/0/@files.16" revision="/0/@revisions.35" hunkBlame="/709"/>
  <MG:Hunk new_end_line="33" new_start_line="29" old_end_line="33" old_start_line="29" file="/0/@files.16" revision="/0/@revisions.35" hunkBlame="/710"/>
  <MG:Hunk new_end_line="14" new_start_line="13" old_end_line="14" old_start_line="13" file="/0/@files.21" revision="/0/@revisions.35" hunkBlame="/711"/>
  <MG:Hunk old_end_line="18" old_start_line="16" file="/0/@files.22" revision="/0/@revisions.35" hunkBlame="/741 /742"/>
  <MG:Hunk new_end_line="23" new_start_line="22" old_end_line="26" old_start_line="25" file="/0/@files.22" revision="/0/@revisions.35" hunkBlame="/729"/>
  <MG:Hunk new_end_line="26" new_start_line="25" old_end_line="29" old_start_line="28" file="/0/@files.22" revision="/0/@revisions.35" hunkBlame="/730"/>
  <MG:Hunk old_end_line="34" old_start_line="32" file="/0/@files.22" revision="/0/@revisions.35" hunkBlame="/731 /732"/>
  <MG:Hunk new_end_line="33" new_start_line="30" old_end_line="36" old_start_line="36" file="/0/@files.22" revision="/0/@revisions.35" hunkBlame="/733"/>
  <MG:Hunk new_end_line="36" new_start_line="35" old_end_line="39" old_start_line="38" file="/0/@files.22" revision="/0/@revisions.35" hunkBlame="/734 /735"/>
  <MG:Hunk new_end_line="43" new_start_line="38" old_end_line="43" old_start_line="41" file="/0/@files.22" revision="/0/@revisions.35" hunkBlame="/736"/>
  <MG:Hunk new_end_line="45" new_start_line="45" old_end_line="45" old_start_line="45" file="/0/@files.22" revision="/0/@revisions.35" hunkBlame="/737"/>
  <MG:Hunk new_end_line="56" new_start_line="56" old_end_line="56" old_start_line="56" file="/0/@files.22" revision="/0/@revisions.35" hunkBlame="/738"/>
  <MG:Hunk new_end_line="66" new_start_line="66" old_end_line="66" old_start_line="66" file="/0/@files.22" revision="/0/@revisions.35" hunkBlame="/739"/>
  <MG:Hunk new_end_line="76" new_start_line="76" old_end_line="76" old_start_line="76" file="/0/@files.22" revision="/0/@revisions.35" hunkBlame="/740"/>
  <MG:Hunk new_end_line="6" new_start_line="6" file="/0/@files.23" revision="/0/@revisions.35"/>
  <MG:Hunk new_end_line="17" new_start_line="17" old_end_line="16" old_start_line="16" file="/0/@files.23" revision="/0/@revisions.35" hunkBlame="/722"/>
  <MG:Hunk new_end_line="19" new_start_line="19" old_end_line="18" old_start_line="18" file="/0/@files.23" revision="/0/@revisions.35" hunkBlame="/723"/>
  <MG:Hunk new_end_line="23" new_start_line="22" old_end_line="22" old_start_line="21" file="/0/@files.23" revision="/0/@revisions.35" hunkBlame="/724"/>
  <MG:Hunk new_end_line="27" new_start_line="27" old_end_line="26" old_start_line="26" file="/0/@files.23" revision="/0/@revisions.35" hunkBlame="/725"/>
  <MG:Hunk new_end_line="63" new_start_line="63" old_end_line="62" old_start_line="62" file="/0/@files.23" revision="/0/@revisions.35" hunkBlame="/726"/>
  <MG:Hunk new_end_line="65" new_start_line="65" file="/0/@files.23" revision="/0/@revisions.35"/>
  <MG:Hunk new_end_line="16" new_start_line="16" old_end_line="16" old_start_line="16" file="/0/@files.24" revision="/0/@revisions.35" hunkBlame="/727"/>
  <MG:Hunk new_end_line="22" new_start_line="18" old_end_line="23" old_start_line="18" file="/0/@files.24" revision="/0/@revisions.35" hunkBlame="/728"/>
  <MG:Hunk new_end_line="11" new_start_line="11" file="/0/@files.26" revision="/0/@revisions.35"/>
  <MG:Hunk new_end_line="50" new_start_line="50" old_end_line="50" old_start_line="50" file="/0/@files.25" revision="/0/@revisions.36" hunkBlame="/787"/>
  <MG:Hunk new_end_line="66" new_start_line="53" old_end_line="53" old_start_line="53" file="/0/@files.25" revision="/0/@revisions.36" hunkBlame="/788"/>
  <MG:Hunk new_end_line="129" new_start_line="129" old_end_line="116" old_start_line="116" file="/0/@files.25" revision="/0/@revisions.36" hunkBlame="/789"/>
  <MG:Hunk new_end_line="1" new_start_line="1" old_end_line="1" old_start_line="1" file="/0/@files.5" revision="/0/@revisions.37"/>
  <MG:Hunk new_end_line="1" new_start_line="1" old_end_line="1" old_start_line="1" file="/0/@files.6" revision="/0/@revisions.37"/>
  <MG:Hunk new_end_line="1" new_start_line="1" old_end_line="1" old_start_line="1" file="/0/@files.6" revision="/0/@revisions.38"/>
  <MG:Hunk new_end_line="6" new_start_line="6" old_end_line="6" old_start_line="6" file="/0/@files.1" revision="/0/@revisions.40" hunkBlame="/623"/>
  <MG:Hunk new_end_line="68" new_start_line="12" old_end_line="21" old_start_line="12" file="/0/@files.1" revision="/0/@revisions.40" hunkBlame="/624 /625"/>
  <MG:Hunk new_end_line="22" new_start_line="22" file="/0/@files.25" revision="/0/@revisions.41"/>
  <MG:Hunk new_end_line="25" new_start_line="25" old_end_line="24" old_start_line="24" file="/0/@files.25" revision="/0/@revisions.41" hunkBlame="/803"/>
  <MG:Hunk new_end_line="27" new_start_line="27" old_end_line="28" old_start_line="26" file="/0/@files.25" revision="/0/@revisions.41" hunkBlame="/804 /805 /806"/>
  <MG:Hunk new_end_line="29" new_start_line="29" old_end_line="31" old_start_line="30" file="/0/@files.25" revision="/0/@revisions.41" hunkBlame="/807"/>
  <MG:Hunk new_end_line="45" new_start_line="37" file="/0/@files.25" revision="/0/@revisions.41"/>
  <MG:Hunk new_end_line="87" new_start_line="82" old_end_line="75" old_start_line="75" file="/0/@files.25" revision="/0/@revisions.41" hunkBlame="/795"/>
  <MG:Hunk new_end_line="94" new_start_line="94" file="/0/@files.25" revision="/0/@revisions.41"/>
  <MG:Hunk new_end_line="100" new_start_line="97" old_end_line="86" old_start_line="84" file="/0/@files.25" revision="/0/@revisions.41" hunkBlame="/796"/>
  <MG:Hunk new_end_line="107" new_start_line="107" file="/0/@files.25" revision="/0/@revisions.41"/>
  <MG:Hunk new_end_line="112" new_start_line="110" old_end_line="96" old_start_line="95" file="/0/@files.25" revision="/0/@revisions.41" hunkBlame="/797"/>
  <MG:Hunk new_end_line="116" new_start_line="115" old_end_line="100" old_start_line="99" file="/0/@files.25" revision="/0/@revisions.41" hunkBlame="/798"/>
  <MG:Hunk new_end_line="134" new_start_line="124" old_end_line="108" old_start_line="108" file="/0/@files.25" revision="/0/@revisions.41" hunkBlame="/799"/>
  <MG:Hunk old_end_line="110" old_start_line="110" file="/0/@files.25" revision="/0/@revisions.41" hunkBlame="/800"/>
  <MG:Hunk new_end_line="145" new_start_line="140" old_end_line="115" old_start_line="115" file="/0/@files.25" revision="/0/@revisions.41" hunkBlame="/801"/>
  <MG:Hunk new_end_line="156" new_start_line="148" old_end_line="118" old_start_line="118" file="/0/@files.25" revision="/0/@revisions.41" hunkBlame="/802"/>
  <MG:Hunk new_end_line="154" new_start_line="154" old_end_line="154" old_start_line="154" file="/0/@files.25" revision="/0/@revisions.42" hunkBlame="/790"/>
  <MG:Hunk new_end_line="36" new_start_line="25" file="/0/@files.25" revision="/0/@revisions.43"/>
  <MG:Hunk new_end_line="94" new_start_line="94" old_end_line="82" old_start_line="82" file="/0/@files.25" revision="/0/@revisions.43" hunkBlame="/809"/>
  <MG:Hunk new_end_line="97" new_start_line="97" old_end_line="86" old_start_line="85" file="/0/@files.25" revision="/0/@revisions.43" hunkBlame="/810"/>
  <MG:Hunk new_end_line="175" new_start_line="158" file="/0/@files.25" revision="/0/@revisions.43"/>
  <MG:Hunk new_end_line="186" new_start_line="186" old_end_line="157" old_start_line="157" file="/0/@files.25" revision="/0/@revisions.43" hunkBlame="/808"/>
  <MG:Hunk new_end_line="27" new_start_line="26" file="/0/@files.2" revision="/0/@revisions.44"/>
  <MG:Hunk old_end_line="6" old_start_line="5" file="/0/@files.25" revision="/0/@revisions.44" hunkBlame="/811 /812"/>
  <MG:Hunk old_end_line="9" old_start_line="9" file="/0/@files.25" revision="/0/@revisions.44" hunkBlame="/813"/>
  <MG:Hunk new_end_line="9" new_start_line="9" old_end_line="189" old_start_line="12" file="/0/@files.25" revision="/0/@revisions.44" hunkBlame="/814 /815 /816 /817 /818 /819 /820 /821 /822 /823 /824 /825"/>
  <MG:Hunk new_end_line="13" new_start_line="13" old_end_line="193" old_start_line="193" file="/0/@files.25" revision="/0/@revisions.44" hunkBlame="/826"/>
  <MG:Hunk new_end_line="17" new_start_line="16" old_end_line="197" old_start_line="196" file="/0/@files.25" revision="/0/@revisions.44" hunkBlame="/827 /828"/>
  <MG:Hunk old_end_line="201" old_start_line="201" file="/0/@files.25" revision="/0/@revisions.44" hunkBlame="/829"/>
  <MG:Hunk new_end_line="44" new_start_line="1" file="/0/@files.32" revision="/0/@revisions.44"/>
  <MG:Hunk new_end_line="7" new_start_line="7" old_end_line="12" old_start_line="7" file="/0/@files.34" revision="/0/@revisions.44" hunkBlame="/831 /832"/>
  <MG:Hunk new_end_line="14" new_start_line="14" old_end_line="19" old_start_line="19" file="/0/@files.34" revision="/0/@revisions.44" hunkBlame="/833"/>
  <MG:Hunk new_end_line="16" new_start_line="16" old_end_line="25" old_start_line="21" file="/0/@files.34" revision="/0/@revisions.44" hunkBlame="/834 /835 /836 /837 /838"/>
  <MG:Hunk new_end_line="32" new_start_line="27" file="/0/@files.34" revision="/0/@revisions.44"/>
  <MG:Hunk new_end_line="34" new_start_line="34" old_end_line="37" old_start_line="37" file="/0/@files.34" revision="/0/@revisions.44" hunkBlame="/839"/>
  <MG:Hunk new_end_line="48" new_start_line="48" old_end_line="52" old_start_line="51" file="/0/@files.34" revision="/0/@revisions.44" hunkBlame="/840"/>
  <MG:Hunk new_end_line="62" new_start_line="62" old_end_line="66" old_start_line="66" file="/0/@files.34" revision="/0/@revisions.44" hunkBlame="/841"/>
  <MG:Hunk new_end_line="86" new_start_line="86" old_end_line="90" old_start_line="90" file="/0/@files.34" revision="/0/@revisions.44" hunkBlame="/842"/>
  <MG:Hunk new_end_line="96" new_start_line="96" old_end_line="100" old_start_line="100" file="/0/@files.34" revision="/0/@revisions.44" hunkBlame="/843"/>
  <MG:Hunk new_end_line="104" new_start_line="104" old_end_line="108" old_start_line="108" file="/0/@files.34" revision="/0/@revisions.44" hunkBlame="/844"/>
  <MG:Hunk new_end_line="110" new_start_line="110" old_end_line="114" old_start_line="114" file="/0/@files.34" revision="/0/@revisions.44" hunkBlame="/845"/>
  <MG:Hunk new_end_line="117" new_start_line="117" old_end_line="121" old_start_line="121" file="/0/@files.34" revision="/0/@revisions.44" hunkBlame="/846"/>
  <MG:Hunk new_end_line="127" new_start_line="127" old_end_line="131" old_start_line="131" file="/0/@files.34" revision="/0/@revisions.44" hunkBlame="/847"/>
  <MG:Hunk new_end_line="133" new_start_line="133" old_end_line="137" old_start_line="137" file="/0/@files.34" revision="/0/@revisions.44" hunkBlame="/848"/>
  <MG:Hunk new_end_line="139" new_start_line="139" old_end_line="143" old_start_line="143" file="/0/@files.34" revision="/0/@revisions.44" hunkBlame="/849"/>
  <MG:Hunk new_end_line="143" new_start_line="143" old_end_line="147" old_start_line="147" file="/0/@files.34" revision="/0/@revisions.44" hunkBlame="/850"/>
  <MG:Hunk new_end_line="150" new_start_line="150" old_end_line="154" old_start_line="154" file="/0/@files.34" revision="/0/@revisions.44" hunkBlame="/851"/>
  <MG:Hunk new_end_line="154" new_start_line="154" old_end_line="158" old_start_line="158" file="/0/@files.34" revision="/0/@revisions.44" hunkBlame="/852"/>
  <MG:Hunk new_end_line="156" new_start_line="156" old_end_line="161" old_start_line="160" file="/0/@files.34" revision="/0/@revisions.44" hunkBlame="/853"/>
  <MG:Hunk new_end_line="160" new_start_line="158" old_end_line="173" old_start_line="163" file="/0/@files.34" revision="/0/@revisions.44" hunkBlame="/854"/>
  <MG:Hunk new_end_line="164" new_start_line="164" old_end_line="177" old_start_line="177" file="/0/@files.34" revision="/0/@revisions.44" hunkBlame="/855"/>
  <MG:Hunk new_end_line="166" new_start_line="166" old_end_line="184" old_start_line="179" file="/0/@files.34" revision="/0/@revisions.44" hunkBlame="/856 /857"/>
  <MG:Hunk new_end_line="168" new_start_line="168" old_end_line="189" old_start_line="186" file="/0/@files.34" revision="/0/@revisions.44" hunkBlame="/858 /859 /860"/>
  <MG:Hunk new_end_line="170" new_start_line="170" old_end_line="199" old_start_line="191" file="/0/@files.34" revision="/0/@revisions.44" hunkBlame="/861 /862 /863"/>
  <MG:Hunk old_end_line="201" old_start_line="201" file="/0/@files.34" revision="/0/@revisions.44" hunkBlame="/864"/>
  <MG:Hunk new_end_line="4" new_start_line="4" old_end_line="4" old_start_line="4" file="/0/@files.1" revision="/0/@revisions.46" hunkBlame="/629"/>
  <MG:Hunk new_end_line="14" new_start_line="14" file="/0/@files.1" revision="/0/@revisions.46"/>
  <MG:Hunk new_end_line="17" new_start_line="17" file="/0/@files.1" revision="/0/@revisions.46"/>
  <MG:Hunk new_end_line="23" new_start_line="20" old_end_line="21" old_start_line="18" file="/0/@files.1" revision="/0/@revisions.46" hunkBlame="/630"/>
  <MG:Hunk new_end_line="26" new_start_line="25" file="/0/@files.1" revision="/0/@revisions.46"/>
  <MG:Hunk new_end_line="68" new_start_line="68" old_end_line="64" old_start_line="64" file="/0/@files.1" revision="/0/@revisions.46" hunkBlame="/631"/>
  <MG:Hunk new_end_line="72" new_start_line="72" old_end_line="68" old_start_line="68" file="/0/@files.1" revision="/0/@revisions.46" hunkBlame="/628"/>
  <MG:Hunk new_end_line="148" new_start_line="148" file="/0/@files.34" revision="/0/@revisions.47"/>
  <MG:Hunk new_end_line="152" new_start_line="151" file="/0/@files.34" revision="/0/@revisions.47"/>
  <MG:Hunk new_end_line="155" new_start_line="154" file="/0/@files.34" revision="/0/@revisions.47"/>
  <MG:Hunk new_end_line="145" new_start_line="145" file="/0/@files.34" revision="/0/@revisions.48"/>
  <MG:Hunk old_end_line="145" old_start_line="145" file="/0/@files.34" revision="/0/@revisions.49" hunkBlame="/830"/>
  <MG:Patch patch="Binary files /dev/null and b/.gitignore differ&#xA;" file="/0/@files.8" revision="/0/@revisions.2"/>
  <MG:Patch patch="--- a/extlibs/SSVUtilsJson&#xA;+++ b/extlibs/SSVUtilsJson&#xA;@@ -1 +1 @@&#xA;-Subproject commit d5bef7b7e25585bcb41fe78ebd8103786398efb9&#xA;+Subproject commit 832f80bd5672c1337132f6975a2db438373cb2e0&#xA;" file="/0/@files.6" revision="/0/@revisions.4"/>
  <MG:Patch patch="--- /dev/null&#xA;+++ b/README.md&#xA;@@ -0,0 +1,4 @@&#xA;+git-ws&#xA;+======&#xA;+&#xA;+Command line utility to work with multiple git repositories at once&#xA;" file="/0/@files.1" revision="/0/@revisions.0"/>
  <MG:Patch patch="--- a/extlibs/SSVUtils&#xA;+++ b/extlibs/SSVUtils&#xA;@@ -1 +1 @@&#xA;-Subproject commit 20b2f63488e8fea717db2e5e8e5a919d617ae32a&#xA;+Subproject commit 8d6673b15b94a7bbc9b1cfd8efbd380ecbbe4b2d&#xA;" file="/0/@files.5" revision="/0/@revisions.3"/>
  <MG:Patch patch="--- a/extlibs/SSVUtilsJson&#xA;+++ b/extlibs/SSVUtilsJson&#xA;@@ -1 +1 @@&#xA;-Subproject commit 57c7c45eb4e2cf8b114a153d690fb111ea520ceb&#xA;+Subproject commit d5bef7b7e25585bcb41fe78ebd8103786398efb9&#xA;" file="/0/@files.6" revision="/0/@revisions.3"/>
  <MG:Patch patch="Binary files a/.gitignore and b/.gitignore differ&#xA;" file="/0/@files.8" revision="/0/@revisions.8"/>
  <MG:Patch patch="--- /dev/null&#xA;+++ b/CMakeLists.txt&#xA;@@ -0,0 +1,34 @@&#xA;+cmake_minimum_required(VERSION 2.8)&#xA;+&#xA;+set(CMAKE_BUILD_TYPE Release CACHE STRING &quot;Build type.&quot;)&#xA;+project(git-ws)&#xA;+&#xA;+set(CMAKE_CXX_FLAGS &quot;-std=c++11 -Wall -Wextra -W -pedantic&quot; CACHE STRING &quot;&quot; FORCE)&#xA;+set(CMAKE_CXX_FLAGS_RELEASE &quot;-DNDEBUG -O3&quot; CACHE STRING &quot;&quot; FORCE)&#xA;+set(CMAKE_CXX_FLAGS_DEBUG &quot;-fno-omit-frame-pointer -g3 -gdwarf-2 -O0&quot; CACHE STRING &quot;&quot; FORCE)&#xA;+set(CMAKE_MODULE_PATH &quot;${CMAKE_SOURCE_DIR}/cmake/modules/;${CMAKE_MODULE_PATH}&quot;)&#xA;+set(CMAKE_MODULE_PATH &quot;${CMAKE_SOURCE_DIR}/extlibs/SSVJsonCpp/cmake/modules/;${CMAKE_MODULE_PATH}&quot;)&#xA;+set(CMAKE_MODULE_PATH &quot;${CMAKE_SOURCE_DIR}/extlibs/SSVUtils/cmake/modules/;${CMAKE_MODULE_PATH}&quot;)&#xA;+set(CMAKE_MODULE_PATH &quot;${CMAKE_SOURCE_DIR}/extlibs/SSVUtilsJson/cmake/modules/;${CMAKE_MODULE_PATH}&quot;)&#xA;+&#xA;+find_package(SSVJsonCpp REQUIRED)&#xA;+find_package(SSVUtils REQUIRED)&#xA;+find_package(SSVUtilsJson REQUIRED)&#xA;+&#xA;+file(GLOB SRC_LIST &quot;./*.cpp&quot; &quot;./*.h&quot;)&#xA;+&#xA;+include_directories(&quot;./&quot;)&#xA;+include_directories(&quot;./Utils/&quot;)&#xA;+include_directories(${SSVJSONCPP_INCLUDE_DIR})&#xA;+include_directories(${SSVUTILS_INCLUDE_DIR})&#xA;+include_directories(${SSVUTILSJSON_INCLUDE_DIR})&#xA;+add_executable(${PROJECT_NAME} ${SRC_LIST})&#xA;+target_link_libraries(git-ws ${SSVJSONCPP_LIBRARY})&#xA;+target_link_libraries(git-ws ${SSVUTILS_LIBRARY})&#xA;+target_link_libraries(git-ws ${SSVUTILSJSON_LIBRARY})&#xA;+&#xA;+if(UNIX)&#xA;+&#x9;install(TARGETS git-ws RUNTIME DESTINATION ${CMAKE_SOURCE_DIR}/_RELEASE/)&#xA;+else(WIN32)&#xA;+&#x9;install(TARGETS git-ws RUNTIME DESTINATION ./_RELEASE/)&#xA;+endif()&#xA;" file="/0/@files.2" revision="/0/@revisions.1"/>
  <MG:Patch patch="--- /dev/null&#xA;+++ b/extlibs/SSVJsonCpp&#xA;@@ -0,0 +1 @@&#xA;+Subproject commit cdae6add9a7181d29d44375909336079c549824e&#xA;" file="/0/@files.4" revision="/0/@revisions.1"/>
  <MG:Patch patch="--- /dev/null&#xA;+++ b/extlibs/SSVUtils&#xA;@@ -0,0 +1 @@&#xA;+Subproject commit 20b2f63488e8fea717db2e5e8e5a919d617ae32a&#xA;" file="/0/@files.5" revision="/0/@revisions.1"/>
  <MG:Patch patch="--- /dev/null&#xA;+++ b/extlibs/SSVUtilsJson&#xA;@@ -0,0 +1 @@&#xA;+Subproject commit 57c7c45eb4e2cf8b114a153d690fb111ea520ceb&#xA;" file="/0/@files.6" revision="/0/@revisions.1"/>
  <MG:Patch patch="--- /dev/null&#xA;+++ b/main.cpp&#xA;@@ -0,0 +1,63 @@&#xA;+#include &lt;iostream>&#xA;+#include &lt;string>&#xA;+#include &lt;vector>&#xA;+#include &lt;functional>&#xA;+#include &lt;SSVUtils/SSVUtils.h>&#xA;+&#xA;+using namespace std;&#xA;+using namespace ssvu;&#xA;+&#xA;+struct CLArgBase&#xA;+{&#xA;+&#x9;virtual void setValue(const string&amp; mString) = 0;&#xA;+};&#xA;+&#xA;+template&lt;typename T> struct CLArg : CLArgBase { };&#xA;+template&lt;> struct CLArg&lt;int> : CLArgBase&#xA;+{&#xA;+&#x9;int value;&#xA;+&#x9;void setValue(const string&amp; mString) override { value = stoi(mString); }&#xA;+};&#xA;+&#xA;+struct CLCommand&#xA;+{&#xA;+&#x9;vector&lt;string> names;&#xA;+&#x9;vector&lt;CLArgBase*> args;&#xA;+&#x9;function&lt;void()> func;&#xA;+};&#xA;+&#xA;+struct CLMain&#xA;+{&#xA;+&#x9;vector&lt;CLCommand> commands;&#xA;+};&#xA;+&#xA;+void showHelp()&#xA;+{&#xA;+&#x9;log(&quot;what&quot;);&#xA;+}&#xA;+&#xA;+int main(int argc, char* argv[])&#xA;+{&#xA;+&#x9;for(int i{0}; i &lt; argc; ++i) log(toStr(argv[i]));&#xA;+&#xA;+&#x9;CLCommand sum{{&quot;sum&quot;}};&#xA;+&#xA;+&#x9;CLArg&lt;int> arg1;&#xA;+&#x9;CLArg&lt;int> arg2;&#xA;+&#xA;+&#x9;sum.args.push_back(&amp;arg1);&#xA;+&#x9;sum.args.push_back(&amp;arg2);&#xA;+&#xA;+&#x9;sum.args[0]->setValue(&quot;1&quot;);&#xA;+&#x9;sum.args[1]->setValue(&quot;3&quot;);&#xA;+&#xA;+&#x9;sum.func = [&amp;]&#xA;+&#x9;{&#xA;+&#x9;&#x9;int i = arg1.value + arg2.value;&#xA;+&#x9;&#x9;log(toStr(i));&#xA;+&#x9;};&#xA;+&#xA;+&#x9;sum.func();&#xA;+&#xA;+&#x9;return 0;&#xA;+}&#xA;" file="/0/@files.7" revision="/0/@revisions.1"/>
  <MG:Patch patch="--- a/extlibs/SSVJsonCpp&#xA;+++ b/extlibs/SSVJsonCpp&#xA;@@ -1 +1 @@&#xA;-Subproject commit cdae6add9a7181d29d44375909336079c549824e&#xA;+Subproject commit a6a5a87fb52ac21748d8585a5a836984c33fd63c&#xA;" file="/0/@files.4" revision="/0/@revisions.9"/>
  <MG:Patch patch="--- a/main.cpp&#xA;+++ b/main.cpp&#xA;@@ -185,9 +185,8 @@ void runCommandInRepos(const string&amp; mCommand)&#xA; {&#xA; &#x9;for(const auto&amp; f : repoFolders)&#xA; &#x9;{&#xA;-&#x9;&#x9;log(f);&#xA;-&#x9;&#x9;string cmd{&quot;(cd &quot; + f + &quot;;&quot; + mCommand + &quot;)&quot;};&#xA;-&#x9;&#x9;system(cmd.c_str());&#xA;+&#x9;&#x9;log(&quot;&#x9;&quot; + f);&#xA;+&#x9;&#x9;system(string{&quot;(cd &quot; + f + &quot;;&quot; + mCommand + &quot;)&quot;}.c_str());&#xA; &#x9;&#x9;log(&quot;&quot;);&#xA; &#x9;}&#xA; }&#xA;" file="/0/@files.7" revision="/0/@revisions.9"/>
  <MG:Patch patch="--- a/main.cpp&#xA;+++ b/main.cpp&#xA;@@ -2,62 +2,154 @@&#xA; #include &lt;string>&#xA; #include &lt;vector>&#xA; #include &lt;functional>&#xA;+#include &lt;stdexcept>&#xA; #include &lt;SSVUtils/SSVUtils.h>&#xA; &#xA; using namespace std;&#xA; using namespace ssvu;&#xA; &#xA;+const string flagPrefixShort{&quot;-&quot;};&#xA;+const string flagPrefixLong{&quot;--&quot;};&#xA;+&#xA;+template&lt;typename T> struct CLValueParser;&#xA;+template&lt;> struct CLValueParser&lt;int> { inline static int parse(const string&amp; mString) { return stoi(mString); } };&#xA;+template&lt;> struct CLValueParser&lt;string> { inline static string parse(const string&amp; mString) { return mString; } };&#xA;+&#xA; struct CLArgBase&#xA; {&#xA;+&#x9;virtual ~CLArgBase() { }&#xA; &#x9;virtual void setValue(const string&amp; mString) = 0;&#xA; };&#xA;+template&lt;typename T> class CLArg : public CLArgBase&#xA;+{&#xA;+&#x9;private:&#xA;+&#x9;&#x9;T value;&#xA;+&#xA;+&#x9;public:&#xA;+&#x9;&#x9;T getValue() { return value; }&#xA;+&#x9;&#x9;void setValue(const string&amp; mValue) override { value = CLValueParser&lt;T>::parse(mValue); }&#xA;+};&#xA; &#xA;-template&lt;typename T> struct CLArg : CLArgBase { };&#xA;-template&lt;> struct CLArg&lt;int> : CLArgBase&#xA;+class CLFlag&#xA; {&#xA;-&#x9;int value;&#xA;-&#x9;void setValue(const string&amp; mString) override { value = stoi(mString); }&#xA;+&#x9;private:&#xA;+&#x9;&#x9;string shortName, longName;&#xA;+&#x9;&#x9;bool active{false};&#xA;+&#xA;+&#x9;public:&#xA;+&#x9;&#x9;CLFlag(const string&amp; mShortName, const string&amp; mLongName) : shortName{mShortName}, longName{mLongName} { }&#xA;+&#x9;&#x9;void setActive(bool mActive) { active = mActive; }&#xA;+&#x9;&#x9;bool isActive() { return active; }&#xA;+&#x9;&#x9;bool hasName(const string&amp; mName) { return mName == flagPrefixShort + shortName || mName == flagPrefixLong + longName; }&#xA; };&#xA; &#xA;-struct CLCommand&#xA;+class CLCommand&#xA; {&#xA;+&#x9;private:&#xA; &#x9;&#x9;vector&lt;string> names;&#xA; &#x9;&#x9;vector&lt;CLArgBase*> args;&#xA;+&#x9;&#x9;vector&lt;CLFlag*> flags;&#xA; &#x9;&#x9;function&lt;void()> func;&#xA;-};&#xA; &#xA;-struct CLMain&#xA;+&#x9;&#x9;CLFlag* findFlag(const string&amp; mName)&#xA; &#x9;&#x9;{&#xA;-&#x9;vector&lt;CLCommand> commands;&#xA;+&#x9;&#x9;&#x9;for(const auto&amp; f : flags) if(f->hasName(mName)) return f;&#xA;+&#x9;&#x9;&#x9;throw runtime_error(&quot;No flag with name &lt;&quot; + mName + &quot;>&quot;);&#xA;+&#x9;&#x9;}&#xA;+&#xA;+&#x9;public:&#xA;+&#x9;&#x9;CLCommand(initializer_list&lt;string> mNames) : names{mNames} { }&#xA;+&#x9;&#x9;~CLCommand()&#xA;+&#x9;&#x9;{&#xA;+&#x9;&#x9;&#x9;for(const auto&amp; a : args) delete a;&#xA;+&#x9;&#x9;&#x9;for(const auto&amp; f : flags) delete f;&#xA;+&#x9;&#x9;}&#xA;+&#xA;+&#x9;&#x9;template&lt;typename T> CLArg&lt;T>&amp; createArg() { auto result(new CLArg&lt;T>); args.push_back(result); return *result; }&#xA;+&#x9;&#x9;void setArgValue(unsigned int mIndex, const string&amp; mValue) { args[mIndex]->setValue(mValue); }&#xA;+&#x9;&#x9;template&lt;typename T> T getArgValue(unsigned int mIndex) { return static_cast&lt;CLArg&lt;T>*>(args[mIndex])->getValue(); }&#xA;+&#x9;&#x9;unsigned int getArgCount() { return args.size(); }&#xA;+&#xA;+&#x9;&#x9;CLFlag&amp; createFlag(const string&amp; mShortName, const string&amp; mLongName) { auto result(new CLFlag{mShortName, mLongName}); flags.push_back(result); return *result; }&#xA;+&#x9;&#x9;bool isFlagActive(unsigned int mIndex) { return flags[mIndex]->isActive(); }&#xA;+&#x9;&#x9;unsigned int getFlagCount() { return flags.size(); }&#xA;+&#x9;&#x9;void activateFlag(const string&amp; mName) { findFlag(mName)->setActive(true); }&#xA;+&#xA;+&#x9;&#x9;bool hasName(const string&amp; mName) { return contains(names, mName); }&#xA;+&#x9;&#x9;void execute() { func(); }&#xA;+&#x9;&#x9;void setFunc(function&lt;void()> mFunc) { func = mFunc; }&#xA; };&#xA; &#xA;-void showHelp()&#xA;+class CLMain&#xA;+{&#xA;+&#x9;private:&#xA;+&#x9;&#x9;vector&lt;CLCommand*> commands;&#xA;+&#xA;+&#x9;&#x9;CLCommand* findCommand(const string&amp; mName)&#xA; &#x9;&#x9;{&#xA;-&#x9;log(&quot;what&quot;);&#xA;+&#x9;&#x9;&#x9;for(const auto&amp; c : commands) if(c->hasName(mName)) return c;&#xA;+&#x9;&#x9;&#x9;throw runtime_error(&quot;No command with name &lt;&quot; + mName + &quot;>&quot;);&#xA; &#x9;&#x9;}&#xA; &#xA;-int main(int argc, char* argv[])&#xA;+&#x9;public:&#xA;+&#x9;&#x9;CLCommand&amp; createCommand(initializer_list&lt;string> mNames) { auto result(new CLCommand{mNames}); commands.push_back(result); return *result; }&#xA;+&#xA;+&#x9;&#x9;void parseCommandLine(const vector&lt;string>&amp; mArgs)&#xA; &#x9;&#x9;{&#xA;-&#x9;for(int i{0}; i &lt; argc; ++i) log(toStr(argv[i]));&#xA;+&#x9;&#x9;&#x9;const string&amp; cmdName{mArgs[0]};&#xA;+&#x9;&#x9;&#x9;CLCommand* cmd;&#xA; &#xA;-&#x9;CLCommand sum{{&quot;sum&quot;}};&#xA;+&#x9;&#x9;&#x9;try { cmd = findCommand(cmdName); }&#xA;+&#x9;&#x9;&#x9;catch(runtime_error mException) { log(mException.what()); return; }&#xA; &#xA;-&#x9;CLArg&lt;int> arg1;&#xA;-&#x9;CLArg&lt;int> arg2;&#xA;+&#x9;&#x9;&#x9;vector&lt;string> cArgs, cFlags;&#xA;+&#x9;&#x9;&#x9;for(unsigned int i{1}; i &lt; mArgs.size(); ++i)&#xA;+&#x9;&#x9;&#x9;{&#xA;+&#x9;&#x9;&#x9;&#x9;const string&amp; s{mArgs[i]};&#xA;+&#x9;&#x9;&#x9;&#x9;if(startsWith(s, flagPrefixShort) || startsWith(s, flagPrefixLong)) cFlags.push_back(s);&#xA;+&#x9;&#x9;&#x9;&#x9;else cArgs.push_back(s);&#xA;+&#x9;&#x9;&#x9;}&#xA; &#xA;-&#x9;sum.args.push_back(&amp;arg1);&#xA;-&#x9;sum.args.push_back(&amp;arg2);&#xA;+&#x9;&#x9;&#x9;unsigned int argCount{cmd->getArgCount()};&#xA;+&#x9;&#x9;&#x9;if(cArgs.size() != argCount) { log(&quot;Incorrect number of arguments for command &lt;&quot; + cmdName + &quot;>, correct number is &lt;&quot; + toStr(argCount) + &quot;>&quot;, &quot;CLMain::parseCommandLine&quot;); return; }&#xA; &#xA;-&#x9;sum.args[0]->setValue(&quot;1&quot;);&#xA;-&#x9;sum.args[1]->setValue(&quot;3&quot;);&#xA;+&#x9;&#x9;&#x9;log(&quot;Setting arguments values of command &lt;&quot; + cmdName + &quot;>&quot;, &quot;CLMain::parseCommandLine&quot;);&#xA;+&#x9;&#x9;&#x9;for(unsigned int i{0}; i &lt; cArgs.size(); ++i)&#xA;+&#x9;&#x9;&#x9;{&#xA;+&#x9;&#x9;&#x9;&#x9;try { cmd->setArgValue(i, cArgs[i]); }&#xA;+&#x9;&#x9;&#x9;&#x9;catch(...) { log(&quot;Error setting argument number &lt;&quot; + toStr(i) + &quot;> for command &lt;&quot; + cmdName + &quot;>&quot;, &quot;CLMain::parseCommandLine&quot;); return; }&#xA;+&#x9;&#x9;&#x9;}&#xA; &#xA;-&#x9;sum.func = [&amp;]&#xA;+&#x9;&#x9;&#x9;for(const auto&amp; f : cFlags)&#xA; &#x9;&#x9;&#x9;{&#xA;-&#x9;&#x9;int i = arg1.value + arg2.value;&#xA;-&#x9;&#x9;log(toStr(i));&#xA;+&#x9;&#x9;&#x9;&#x9;try { cmd->activateFlag(f); }&#xA;+&#x9;&#x9;&#x9;&#x9;catch(runtime_error mException) { log(mException.what()); return; }&#xA;+&#x9;&#x9;&#x9;}&#xA;+&#xA;+&#x9;&#x9;&#x9;log(&quot;Executing &lt;&quot; + cmdName + &quot;>&quot;, &quot;CLMain::parseCommandLine&quot;);&#xA;+&#x9;&#x9;&#x9;cmd->execute();&#xA;+&#x9;&#x9;}&#xA; };&#xA; &#xA;-&#x9;sum.func();&#xA;+int main(int argc, char* argv[])&#xA;+{&#xA;+&#x9;vector&lt;string> args;&#xA;+&#x9;for(int i{1}; i &lt; argc; ++i) args.push_back(toStr(argv[i]));&#xA;+&#xA;+&#x9;CLMain main;&#xA;+&#xA;+&#x9;auto&amp; sum(main.createCommand({&quot;sum&quot;}));&#xA;+&#x9;sum.createArg&lt;int>();&#xA;+&#x9;sum.createArg&lt;int>();&#xA;+&#x9;sum.createFlag(&quot;d&quot;, &quot;double&quot;);&#xA;+&#x9;sum.setFunc([&amp;]&#xA;+&#x9;{&#xA;+&#x9;&#x9;int i = sum.getArgValue&lt;int>(0) + sum.getArgValue&lt;int>(1);&#xA;+&#x9;&#x9;if(sum.isFlagActive(0)) i *= 2;&#xA;+&#x9;&#x9;log(toStr(i));&#xA;+&#x9;});&#xA;+&#xA;+&#x9;main.parseCommandLine(args);&#xA; &#xA; &#x9;return 0;&#xA; }&#xA;" file="/0/@files.7" revision="/0/@revisions.5"/>
  <MG:Patch patch="--- a/extlibs/SSVUtilsJson&#xA;+++ b/extlibs/SSVUtilsJson&#xA;@@ -1 +1 @@&#xA;-Subproject commit 832f80bd5672c1337132f6975a2db438373cb2e0&#xA;+Subproject commit 1dc54e42c0eab1d4e0e2380b8211842cfea90f0a&#xA;" file="/0/@files.6" revision="/0/@revisions.10"/>
  <MG:Patch patch="--- a/README.md&#xA;+++ b/README.md&#xA;@@ -1,4 +1,20 @@&#xA;-git-ws&#xA;-======&#xA;+# git-ws&#xA; &#xA;-Command line utility to work with multiple git repositories at once&#xA;+Command line utility to work with multiple git repositories at once &lt;br/>&#xA;+Currently intended for personal use only (use at your own risk)&#xA;+&#xA;+&lt;br/>&#xA;+&#xA;+## Usage&#xA;+&#xA;+Using `git-ws` in a directory calls git commands in all subdirectiories which are git repositories.&#xA;+&#xA;+* `> git-ws ? (command name)`: displays auto-generated help for a command&#xA;+* `> git-ws push`: push staged changes&#xA;+* `> git-ws push -f`: force push staged changes&#xA;+* `> git-ws pull`: pull latest version&#xA;+* `> git-ws pull -s`: pull latest version, stashing all changes before pulling&#xA;+* `> git-ws status`: displays short git status, ignoring dirty submodules&#xA;+* `> git-ws submodule push`: commits all staged changes and pushes (intended to be used only after non-submodule changes have been pushed)&#xA;+* `> git-ws submodule pull`: stashes all submodule local changes, pulls latest submodules recursively&#xA;+* `> git-ws submodule au`: equivalent of `git-ws submodule pull` followed by `git-ws submodule push` and by `git submodule update`&#xA;" file="/0/@files.1" revision="/0/@revisions.12"/>
  <MG:Patch patch="--- a/main.cpp&#xA;+++ b/main.cpp&#xA;@@ -12,13 +12,32 @@ const string flagPrefixShort{&quot;-&quot;};&#xA; const string flagPrefixLong{&quot;--&quot;};&#xA; &#xA; template&lt;typename T> struct CLValueParser;&#xA;-template&lt;> struct CLValueParser&lt;int> { inline static int parse(const string&amp; mString) { return stoi(mString); } };&#xA;-template&lt;> struct CLValueParser&lt;string> { inline static string parse(const string&amp; mString) { return mString; } };&#xA;+template&lt;> struct CLValueParser&lt;int>&#xA;+{&#xA;+&#x9;inline static int parse(const string&amp; mString)&#xA;+&#x9;{&#xA;+&#x9;&#x9;try { return stoi(mString); }&#xA;+&#x9;&#x9;catch(...) { throw runtime_error(&quot;Cannot convert '&quot; + mString + &quot;' to int&quot;); }&#xA;+&#x9;}&#xA;+};&#xA;+template&lt;> struct CLValueParser&lt;string>&#xA;+{&#xA;+&#x9;inline static string parse(const string&amp; mString) { return mString; }&#xA;+};&#xA; &#xA;-struct CLArgBase&#xA;+class CLArgBase&#xA; {&#xA;+&#x9;private:&#xA;+&#x9;&#x9;string description;&#xA;+&#xA;+&#x9;public:&#xA;+&#x9;&#x9;CLArgBase(const string&amp; mDescription) : description{mDescription} { }&#xA;+&#xA; &#x9;&#x9;virtual ~CLArgBase() { }&#xA; &#x9;&#x9;virtual void setValue(const string&amp; mString) = 0;&#xA;+&#xA;+&#x9;&#x9;const string&amp; getDescription() { return description; }&#xA;+&#x9;&#x9;string getArgString() { return &quot;(&quot; + description + &quot;)&quot;; }&#xA; };&#xA; template&lt;typename T> class CLArg : public CLArgBase&#xA; {&#xA;@@ -26,6 +45,8 @@ template&lt;typename T> class CLArg : public CLArgBase&#xA; &#x9;&#x9;T value;&#xA; &#xA; &#x9;public:&#xA;+&#x9;&#x9;CLArg(const string&amp; mDescription) : CLArgBase{mDescription} { }&#xA;+&#xA; &#x9;&#x9;T getValue() { return value; }&#xA; &#x9;&#x9;void setValue(const string&amp; mValue) override { value = CLValueParser&lt;T>::parse(mValue); }&#xA; };&#xA;@@ -38,9 +59,16 @@ class CLFlag&#xA; &#xA; &#x9;public:&#xA; &#x9;&#x9;CLFlag(const string&amp; mShortName, const string&amp; mLongName) : shortName{mShortName}, longName{mLongName} { }&#xA;+&#xA; &#x9;&#x9;void setActive(bool mActive) { active = mActive; }&#xA; &#x9;&#x9;bool isActive() { return active; }&#xA; &#x9;&#x9;bool hasName(const string&amp; mName) { return mName == flagPrefixShort + shortName || mName == flagPrefixLong + longName; }&#xA;+&#xA;+&#x9;&#x9;const string&amp; getShortName() { return shortName; }&#xA;+&#x9;&#x9;const string&amp; getLongName() { return longName; }&#xA;+&#x9;&#x9;string getShortNameWithPrefix() { return flagPrefixShort + shortName; }&#xA;+&#x9;&#x9;string getLongNameWithPrefix() { return flagPrefixLong + longName; }&#xA;+&#x9;&#x9;string getFlagString() { return &quot;[&quot; + getShortNameWithPrefix() + &quot; || &quot; + getLongNameWithPrefix() + &quot;]&quot;; }&#xA; };&#xA; &#xA; class CLCommand&#xA;@@ -51,10 +79,10 @@ class CLCommand&#xA; &#x9;&#x9;vector&lt;CLFlag*> flags;&#xA; &#x9;&#x9;function&lt;void()> func;&#xA; &#xA;-&#x9;&#x9;CLFlag* findFlag(const string&amp; mName)&#xA;+&#x9;&#x9;CLFlag&amp; findFlag(const string&amp; mName)&#xA; &#x9;&#x9;{&#xA;-&#x9;&#x9;&#x9;for(const auto&amp; f : flags) if(f->hasName(mName)) return f;&#xA;-&#x9;&#x9;&#x9;throw runtime_error(&quot;No flag with name &lt;&quot; + mName + &quot;>&quot;);&#xA;+&#x9;&#x9;&#x9;for(const auto&amp; f : flags) if(f->hasName(mName)) return *f;&#xA;+&#x9;&#x9;&#x9;throw runtime_error(&quot;No flag with name [&quot; + mName + &quot;] in command &quot; + getNamesString());&#xA; &#x9;&#x9;}&#xA; &#xA; &#x9;public:&#xA;@@ -65,7 +93,7 @@ class CLCommand&#xA; &#x9;&#x9;&#x9;for(const auto&amp; f : flags) delete f;&#xA; &#x9;&#x9;}&#xA; &#xA;-&#x9;&#x9;template&lt;typename T> CLArg&lt;T>&amp; createArg() { auto result(new CLArg&lt;T>); args.push_back(result); return *result; }&#xA;+&#x9;&#x9;template&lt;typename T> CLArg&lt;T>&amp; createArg(const string&amp; mDescription) { auto result(new CLArg&lt;T>(mDescription)); args.push_back(result); return *result; }&#xA; &#x9;&#x9;void setArgValue(unsigned int mIndex, const string&amp; mValue) { args[mIndex]->setValue(mValue); }&#xA; &#x9;&#x9;template&lt;typename T> T getArgValue(unsigned int mIndex) { return static_cast&lt;CLArg&lt;T>*>(args[mIndex])->getValue(); }&#xA; &#x9;&#x9;unsigned int getArgCount() { return args.size(); }&#xA;@@ -73,11 +101,47 @@ class CLCommand&#xA; &#x9;&#x9;CLFlag&amp; createFlag(const string&amp; mShortName, const string&amp; mLongName) { auto result(new CLFlag{mShortName, mLongName}); flags.push_back(result); return *result; }&#xA; &#x9;&#x9;bool isFlagActive(unsigned int mIndex) { return flags[mIndex]->isActive(); }&#xA; &#x9;&#x9;unsigned int getFlagCount() { return flags.size(); }&#xA;-&#x9;&#x9;void activateFlag(const string&amp; mName) { findFlag(mName)->setActive(true); }&#xA;+&#x9;&#x9;void activateFlag(const string&amp; mName) { findFlag(mName).setActive(true); }&#xA; &#xA; &#x9;&#x9;bool hasName(const string&amp; mName) { return contains(names, mName); }&#xA; &#x9;&#x9;void execute() { func(); }&#xA; &#x9;&#x9;void setFunc(function&lt;void()> mFunc) { func = mFunc; }&#xA;+&#xA;+&#x9;&#x9;const vector&lt;string>&amp; getNames() { return names; }&#xA;+&#x9;&#x9;const vector&lt;CLArgBase*>&amp; getArgs() { return args; }&#xA;+&#x9;&#x9;const vector&lt;CLFlag*>&amp; getFlags() { return flags; }&#xA;+&#xA;+&#x9;&#x9;string getNamesString()&#xA;+&#x9;&#x9;{&#xA;+&#x9;&#x9;&#x9;string result{&quot;&lt;&quot;};&#xA;+&#x9;&#x9;&#x9;for(unsigned int i{0}; i &lt; names.size(); ++i)&#xA;+&#x9;&#x9;&#x9;{&#xA;+&#x9;&#x9;&#x9;&#x9;result.append(names[i]);&#xA;+&#x9;&#x9;&#x9;&#x9;if(i &lt; names.size() - 1) result.append(&quot; || &quot;);&#xA;+&#x9;&#x9;&#x9;}&#xA;+&#x9;&#x9;&#x9;result.append(&quot;>&quot;);&#xA;+&#x9;&#x9;&#x9;return result;&#xA;+&#x9;&#x9;}&#xA;+&#x9;&#x9;string getArgsString()&#xA;+&#x9;&#x9;{&#xA;+&#x9;&#x9;&#x9;string result;&#xA;+&#x9;&#x9;&#x9;for(unsigned int i{0}; i &lt; args.size(); ++i)&#xA;+&#x9;&#x9;&#x9;{&#xA;+&#x9;&#x9;&#x9;&#x9;result.append(args[i]->getArgString());&#xA;+&#x9;&#x9;&#x9;&#x9;if(i &lt; args.size() - 1) result.append(&quot; &quot;);&#xA;+&#x9;&#x9;&#x9;}&#xA;+&#x9;&#x9;&#x9;return result;&#xA;+&#x9;&#x9;}&#xA;+&#x9;&#x9;string getFlagsString()&#xA;+&#x9;&#x9;{&#xA;+&#x9;&#x9;&#x9;string result;&#xA;+&#x9;&#x9;&#x9;for(unsigned int i{0}; i &lt; flags.size(); ++i)&#xA;+&#x9;&#x9;&#x9;{&#xA;+&#x9;&#x9;&#x9;&#x9;result.append(flags[i]->getFlagString());&#xA;+&#x9;&#x9;&#x9;&#x9;if(i &lt; flags.size() - 1) result.append(&quot; &quot;);&#xA;+&#x9;&#x9;&#x9;}&#xA;+&#x9;&#x9;&#x9;return result;&#xA;+&#x9;&#x9;}&#xA; };&#xA; &#xA; class CLMain&#xA;@@ -85,71 +149,78 @@ class CLMain&#xA; &#x9;private:&#xA; &#x9;&#x9;vector&lt;CLCommand*> commands;&#xA; &#xA;-&#x9;&#x9;CLCommand* findCommand(const string&amp; mName)&#xA;+&#x9;public:&#xA;+&#x9;&#x9;CLCommand&amp; findCommand(const string&amp; mName)&#xA; &#x9;&#x9;{&#xA;-&#x9;&#x9;&#x9;for(const auto&amp; c : commands) if(c->hasName(mName)) return c;&#xA;+&#x9;&#x9;&#x9;for(const auto&amp; c : commands) if(c->hasName(mName)) return *c;&#xA; &#x9;&#x9;&#x9;throw runtime_error(&quot;No command with name &lt;&quot; + mName + &quot;>&quot;);&#xA; &#x9;&#x9;}&#xA; &#xA;-&#x9;public:&#xA;-&#x9;&#x9;CLCommand&amp; createCommand(initializer_list&lt;string> mNames) { auto result(new CLCommand{mNames}); commands.push_back(result); return *result; }&#xA;+&#x9;&#x9;CLCommand&amp; create(initializer_list&lt;string> mNames) { auto result(new CLCommand{mNames}); commands.push_back(result); return *result; }&#xA; &#xA; &#x9;&#x9;void parseCommandLine(const vector&lt;string>&amp; mArgs)&#xA; &#x9;&#x9;{&#xA; &#x9;&#x9;&#x9;const string&amp; cmdName{mArgs[0]};&#xA;-&#x9;&#x9;&#x9;CLCommand* cmd;&#xA;-&#xA;-&#x9;&#x9;&#x9;try { cmd = findCommand(cmdName); }&#xA;-&#x9;&#x9;&#x9;catch(runtime_error mException) { log(mException.what()); return; }&#xA;+&#x9;&#x9;&#x9;CLCommand&amp; cmd{findCommand(cmdName)};&#xA; &#xA; &#x9;&#x9;&#x9;vector&lt;string> cArgs, cFlags;&#xA; &#x9;&#x9;&#x9;for(unsigned int i{1}; i &lt; mArgs.size(); ++i)&#xA; &#x9;&#x9;&#x9;{&#xA; &#x9;&#x9;&#x9;&#x9;const string&amp; s{mArgs[i]};&#xA;-&#x9;&#x9;&#x9;&#x9;if(startsWith(s, flagPrefixShort) || startsWith(s, flagPrefixLong)) cFlags.push_back(s);&#xA;-&#x9;&#x9;&#x9;&#x9;else cArgs.push_back(s);&#xA;+&#x9;&#x9;&#x9;&#x9;(startsWith(s, flagPrefixShort) || startsWith(s, flagPrefixLong)) ? cFlags.push_back(s) : cArgs.push_back(s);&#xA;+&#x9;&#x9;&#x9;}&#xA;+&#xA;+&#x9;&#x9;&#x9;if(cArgs.size() != cmd.getArgCount()) throw runtime_error(&quot;Incorrect number of arguments for command &quot; + cmd.getNamesString() + &quot; , correct number is '&quot; + toStr(cmd.getArgCount()) + &quot;'&quot;);&#xA;+&#xA;+&#x9;&#x9;&#x9;for(unsigned int i{0}; i &lt; cArgs.size(); ++i) cmd.setArgValue(i, cArgs[i]);&#xA;+&#x9;&#x9;&#x9;for(const auto&amp; f : cFlags) cmd.activateFlag(f);&#xA;+&#x9;&#x9;&#x9;cmd.execute();&#xA; &#x9;&#x9;}&#xA;+};&#xA; &#xA;-&#x9;&#x9;&#x9;unsigned int argCount{cmd->getArgCount()};&#xA;-&#x9;&#x9;&#x9;if(cArgs.size() != argCount) { log(&quot;Incorrect number of arguments for command &lt;&quot; + cmdName + &quot;>, correct number is &lt;&quot; + toStr(argCount) + &quot;>&quot;, &quot;CLMain::parseCommandLine&quot;); return; }&#xA;+CLMain m;&#xA; &#xA;-&#x9;&#x9;&#x9;log(&quot;Setting arguments values of command &lt;&quot; + cmdName + &quot;>&quot;, &quot;CLMain::parseCommandLine&quot;);&#xA;-&#x9;&#x9;&#x9;for(unsigned int i{0}; i &lt; cArgs.size(); ++i)&#xA;+void initHelp()&#xA;+{&#xA;+&#x9;auto&amp; helpCommand(m.create({&quot;?&quot;, &quot;help&quot;}));&#xA;+&#x9;auto&amp; argCommandName(helpCommand.createArg&lt;string>(&quot;command name&quot;));&#xA;+&#x9;helpCommand.setFunc([&amp;]&#xA; &#x9;{&#xA;-&#x9;&#x9;&#x9;&#x9;try { cmd->setArgValue(i, cArgs[i]); }&#xA;-&#x9;&#x9;&#x9;&#x9;catch(...) { log(&quot;Error setting argument number &lt;&quot; + toStr(i) + &quot;> for command &lt;&quot; + cmdName + &quot;>&quot;, &quot;CLMain::parseCommandLine&quot;); return; }&#xA;+&#x9;&#x9;auto&amp; command(m.findCommand(argCommandName.getValue()));&#xA;+&#x9;&#x9;log(&quot;Command &quot; + command.getNamesString() + &quot; usage:&quot;);&#xA;+&#x9;&#x9;log(command.getNamesString() + &quot; &quot; + command.getArgsString() + &quot; &quot; + command.getFlagsString());&#xA;+&#x9;});&#xA; }&#xA; &#xA;-&#x9;&#x9;&#x9;for(const auto&amp; f : cFlags)&#xA;+void initSum()&#xA;+{&#xA;+&#x9;auto&amp; sumCommand(m.create({&quot;sum&quot;}));&#xA;+&#x9;auto&amp; arg1(sumCommand.createArg&lt;int>(&quot;addendo 1&quot;));&#xA;+&#x9;auto&amp; arg2(sumCommand.createArg&lt;int>(&quot;addendo 2&quot;));&#xA;+&#x9;sumCommand.createFlag(&quot;d&quot;, &quot;double&quot;);&#xA;+&#x9;sumCommand.setFunc([&amp;]&#xA; &#x9;{&#xA;-&#x9;&#x9;&#x9;&#x9;try { cmd->activateFlag(f); }&#xA;-&#x9;&#x9;&#x9;&#x9;catch(runtime_error mException) { log(mException.what()); return; }&#xA;+&#x9;&#x9;int i = arg1.getValue() + arg2.getValue();&#xA;+&#x9;&#x9;if(sumCommand.isFlagActive(0)) i *= 2;&#xA;+&#x9;&#x9;log(toStr(i));&#xA;+&#x9;});&#xA; }&#xA; &#xA;-&#x9;&#x9;&#x9;log(&quot;Executing &lt;&quot; + cmdName + &quot;>&quot;, &quot;CLMain::parseCommandLine&quot;);&#xA;-&#x9;&#x9;&#x9;cmd->execute();&#xA;+void initCommands()&#xA;+{&#xA;+&#x9;initHelp();&#xA;+&#x9;initSum();&#xA; }&#xA;-};&#xA; &#xA; int main(int argc, char* argv[])&#xA; {&#xA;+&#x9;initCommands();&#xA;+&#xA; &#x9;vector&lt;string> args;&#xA; &#x9;for(int i{1}; i &lt; argc; ++i) args.push_back(toStr(argv[i]));&#xA; &#xA;-&#x9;CLMain main;&#xA;-&#xA;-&#x9;auto&amp; sum(main.createCommand({&quot;sum&quot;}));&#xA;-&#x9;sum.createArg&lt;int>();&#xA;-&#x9;sum.createArg&lt;int>();&#xA;-&#x9;sum.createFlag(&quot;d&quot;, &quot;double&quot;);&#xA;-&#x9;sum.setFunc([&amp;]&#xA;-&#x9;{&#xA;-&#x9;&#x9;int i = sum.getArgValue&lt;int>(0) + sum.getArgValue&lt;int>(1);&#xA;-&#x9;&#x9;if(sum.isFlagActive(0)) i *= 2;&#xA;-&#x9;&#x9;log(toStr(i));&#xA;-&#x9;});&#xA;-&#xA;-&#x9;main.parseCommandLine(args);&#xA;+&#x9;try{ m.parseCommandLine(args); }&#xA;+&#x9;catch(runtime_error mException) { log(mException.what()); return 1; }&#xA; &#xA; &#x9;return 0;&#xA; }&#xA;" file="/0/@files.7" revision="/0/@revisions.6"/>
  <MG:Patch patch="--- a/main.cpp&#xA;+++ b/main.cpp&#xA;@@ -225,7 +225,7 @@ void initPull()&#xA; &#xA; void initStatus()&#xA; {&#xA;-&#x9;m.create({&quot;status&quot;}).setFunc([&amp;]{ runCommandInRepos(&quot;git status -s&quot;); });&#xA;+&#x9;m.create({&quot;status&quot;}).setFunc([&amp;]{ runCommandInRepos(&quot;git status -s --ignore-submodules=dirty&quot;); });&#xA; }&#xA; &#xA; void initSubmodule()&#xA;@@ -240,6 +240,7 @@ void initSubmodule()&#xA; &#x9;&#x9;{&#xA; &#x9;&#x9;&#x9;runCommandInRepos(&quot;git submodule foreach git stash; git submodule foreach git pull origin master --recurse-submodules&quot;);&#xA; &#x9;&#x9;&#x9;runCommandInRepos(&quot;git commit -am 'automated submodule update'; git push&quot;);&#xA;+&#x9;&#x9;&#x9;runCommandInRepos(&quot;git submodule update&quot;);&#xA; &#x9;&#x9;}&#xA; &#x9;});&#xA; }&#xA;" file="/0/@files.7" revision="/0/@revisions.11"/>
  <MG:Patch patch="--- a/CMakeLists.txt&#xA;+++ b/CMakeLists.txt&#xA;@@ -29,6 +29,7 @@ target_link_libraries(git-ws ${SSVUTILSJSON_LIBRARY})&#xA; &#xA; if(UNIX)&#xA; &#x9;install(TARGETS git-ws RUNTIME DESTINATION ${CMAKE_SOURCE_DIR}/_RELEASE/)&#xA;+&#x9;install(PROGRAMS ${CMAKE_SOURCE_DIR}/_RELEASE/git-ws DESTINATION /usr/local/bin/ PERMISSIONS WORLD_EXECUTE WORLD_READ)&#xA; else(WIN32)&#xA; &#x9;install(TARGETS git-ws RUNTIME DESTINATION ./_RELEASE/)&#xA; endif()&#xA;" file="/0/@files.2" revision="/0/@revisions.7"/>
  <MG:Patch patch="--- a/main.cpp&#xA;+++ b/main.cpp&#xA;@@ -7,6 +7,7 @@&#xA; &#xA; using namespace std;&#xA; using namespace ssvu;&#xA;+using namespace ssvu::FileSystem;&#xA; &#xA; const string flagPrefixShort{&quot;-&quot;};&#xA; const string flagPrefixLong{&quot;--&quot;};&#xA;@@ -34,7 +35,7 @@ class CLArgBase&#xA; &#x9;&#x9;CLArgBase(const string&amp; mDescription) : description{mDescription} { }&#xA; &#xA; &#x9;&#x9;virtual ~CLArgBase() { }&#xA;-&#x9;&#x9;virtual void setValue(const string&amp; mString) = 0;&#xA;+&#x9;&#x9;virtual void set(const string&amp; mString) = 0;&#xA; &#xA; &#x9;&#x9;const string&amp; getDescription() { return description; }&#xA; &#x9;&#x9;string getArgString() { return &quot;(&quot; + description + &quot;)&quot;; }&#xA;@@ -47,8 +48,8 @@ template&lt;typename T> class CLArg : public CLArgBase&#xA; &#x9;public:&#xA; &#x9;&#x9;CLArg(const string&amp; mDescription) : CLArgBase{mDescription} { }&#xA; &#xA;-&#x9;&#x9;T getValue() { return value; }&#xA;-&#x9;&#x9;void setValue(const string&amp; mValue) override { value = CLValueParser&lt;T>::parse(mValue); }&#xA;+&#x9;&#x9;T get() const { return value; }&#xA;+&#x9;&#x9;void set(const string&amp; mValue) override { value = CLValueParser&lt;T>::parse(mValue); }&#xA; };&#xA; &#xA; class CLFlag&#xA;@@ -75,14 +76,14 @@ class CLCommand&#xA; {&#xA; &#x9;private:&#xA; &#x9;&#x9;vector&lt;string> names;&#xA;-&#x9;&#x9;vector&lt;CLArgBase*> args;&#xA;-&#x9;&#x9;vector&lt;CLFlag*> flags;&#xA;+&#x9;&#x9;vector&lt;CLArgBase*> args; // owned&#xA;+&#x9;&#x9;vector&lt;CLFlag*> flags; // owned&#xA; &#x9;&#x9;function&lt;void()> func;&#xA; &#xA; &#x9;&#x9;CLFlag&amp; findFlag(const string&amp; mName)&#xA; &#x9;&#x9;{&#xA; &#x9;&#x9;&#x9;for(const auto&amp; f : flags) if(f->hasName(mName)) return *f;&#xA;-&#x9;&#x9;&#x9;throw runtime_error(&quot;No flag with name [&quot; + mName + &quot;] in command &quot; + getNamesString());&#xA;+&#x9;&#x9;&#x9;throw runtime_error(&quot;No flag with name '&quot; + mName + &quot;' in command &quot; + getNamesString());&#xA; &#x9;&#x9;}&#xA; &#xA; &#x9;public:&#xA;@@ -94,8 +95,7 @@ class CLCommand&#xA; &#x9;&#x9;}&#xA; &#xA; &#x9;&#x9;template&lt;typename T> CLArg&lt;T>&amp; createArg(const string&amp; mDescription) { auto result(new CLArg&lt;T>(mDescription)); args.push_back(result); return *result; }&#xA;-&#x9;&#x9;void setArgValue(unsigned int mIndex, const string&amp; mValue) { args[mIndex]->setValue(mValue); }&#xA;-&#x9;&#x9;template&lt;typename T> T getArgValue(unsigned int mIndex) { return static_cast&lt;CLArg&lt;T>*>(args[mIndex])->getValue(); }&#xA;+&#x9;&#x9;void setArgValue(unsigned int mIndex, const string&amp; mValue) { args[mIndex]->set(mValue); }&#xA; &#x9;&#x9;unsigned int getArgCount() { return args.size(); }&#xA; &#xA; &#x9;&#x9;CLFlag&amp; createFlag(const string&amp; mShortName, const string&amp; mLongName) { auto result(new CLFlag{mShortName, mLongName}); flags.push_back(result); return *result; }&#xA;@@ -178,42 +178,84 @@ class CLMain&#xA; &#x9;&#x9;}&#xA; };&#xA; &#xA;+vector&lt;string> repoFolders;&#xA; CLMain m;&#xA; &#xA;+void runCommandInRepos(const string&amp; mCommand)&#xA;+{&#xA;+&#x9;for(const auto&amp; f : repoFolders)&#xA;+&#x9;{&#xA;+&#x9;&#x9;log(f);&#xA;+&#x9;&#x9;string cmd{&quot;(cd &quot; + f + &quot;;&quot; + mCommand + &quot;)&quot;};&#xA;+&#x9;&#x9;system(cmd.c_str());&#xA;+&#x9;&#x9;log(&quot;&quot;);&#xA;+&#x9;}&#xA;+}&#xA;+&#xA; void initHelp()&#xA; {&#xA; &#x9;auto&amp; helpCommand(m.create({&quot;?&quot;, &quot;help&quot;}));&#xA; &#x9;auto&amp; argCommandName(helpCommand.createArg&lt;string>(&quot;command name&quot;));&#xA; &#x9;helpCommand.setFunc([&amp;]&#xA; &#x9;{&#xA;-&#x9;&#x9;auto&amp; command(m.findCommand(argCommandName.getValue()));&#xA;+&#x9;&#x9;auto&amp; command(m.findCommand(argCommandName.get()));&#xA; &#x9;&#x9;log(&quot;Command &quot; + command.getNamesString() + &quot; usage:&quot;);&#xA; &#x9;&#x9;log(command.getNamesString() + &quot; &quot; + command.getArgsString() + &quot; &quot; + command.getFlagsString());&#xA; &#x9;});&#xA; }&#xA; &#xA;-void initSum()&#xA;+void initPush()&#xA;+{&#xA;+&#x9;auto&amp; pushCmd(m.create({&quot;push&quot;}));&#xA;+&#x9;auto&amp; forceFlag(pushCmd.createFlag(&quot;f&quot;, &quot;force&quot;));&#xA;+&#x9;pushCmd.setFunc([&amp;]&#xA;+&#x9;{&#xA;+&#x9;&#x9;runCommandInRepos(forceFlag.isActive() ? &quot;git push -f&quot; : &quot;git push&quot;);&#xA;+&#x9;});&#xA;+}&#xA;+&#xA;+void initPull()&#xA; {&#xA;-&#x9;auto&amp; sumCommand(m.create({&quot;sum&quot;}));&#xA;-&#x9;auto&amp; arg1(sumCommand.createArg&lt;int>(&quot;addendo 1&quot;));&#xA;-&#x9;auto&amp; arg2(sumCommand.createArg&lt;int>(&quot;addendo 2&quot;));&#xA;-&#x9;sumCommand.createFlag(&quot;d&quot;, &quot;double&quot;);&#xA;-&#x9;sumCommand.setFunc([&amp;]&#xA;+&#x9;auto&amp; pullCmd(m.create({&quot;pull&quot;}));&#xA;+&#x9;auto&amp; stashFlag(pullCmd.createFlag(&quot;s&quot;, &quot;stash&quot;));&#xA;+&#x9;pullCmd.setFunc([&amp;]&#xA; &#x9;{&#xA;-&#x9;&#x9;int i = arg1.getValue() + arg2.getValue();&#xA;-&#x9;&#x9;if(sumCommand.isFlagActive(0)) i *= 2;&#xA;-&#x9;&#x9;log(toStr(i));&#xA;+&#x9;&#x9;runCommandInRepos(stashFlag.isActive() ? &quot;git stash; git pull&quot; : &quot;git pull&quot;);&#xA; &#x9;});&#xA; }&#xA; &#xA;-void initCommands()&#xA;+void initStatus()&#xA; {&#xA;-&#x9;initHelp();&#xA;-&#x9;initSum();&#xA;+&#x9;m.create({&quot;status&quot;}).setFunc([&amp;]{ runCommandInRepos(&quot;git status -s&quot;); });&#xA; }&#xA; &#xA;+void initSubmodule()&#xA;+{&#xA;+&#x9;auto&amp; submoduleCmd(m.create({&quot;sub&quot;, &quot;submodule&quot;}));&#xA;+&#x9;auto&amp; arg(submoduleCmd.createArg&lt;string>(&quot;submodule action&quot;));&#xA;+&#x9;submoduleCmd.setFunc([&amp;]&#xA;+&#x9;{&#xA;+&#x9;&#x9;if(arg.get() == &quot;push&quot;) runCommandInRepos(&quot;git commit -am 'automated submodule update'; git push&quot;);&#xA;+&#x9;&#x9;else if(arg.get() == &quot;pull&quot;) runCommandInRepos(&quot;git submodule foreach git stash; git submodule foreach git pull origin master --recurse-submodules&quot;);&#xA;+&#x9;&#x9;else if(arg.get() == &quot;au&quot;)&#xA;+&#x9;&#x9;{&#xA;+&#x9;&#x9;&#x9;runCommandInRepos(&quot;git submodule foreach git stash; git submodule foreach git pull origin master --recurse-submodules&quot;);&#xA;+&#x9;&#x9;&#x9;runCommandInRepos(&quot;git commit -am 'automated submodule update'; git push&quot;);&#xA;+&#x9;&#x9;}&#xA;+&#x9;});&#xA;+}&#xA;+&#xA;+void initGitg()&#xA;+{&#xA;+&#x9;m.create({&quot;gitg&quot;}).setFunc([&amp;]{ runCommandInRepos(&quot;gitg&amp;&quot;); });&#xA;+}&#xA;+&#xA;+void initCommands() { initHelp(); initPush(); initPull(); initStatus(); initSubmodule(); initGitg(); }&#xA;+&#xA; int main(int argc, char* argv[])&#xA; {&#xA;+&#x9;for(auto&amp; cf : getScan&lt;Mode::Single, Type::Folder>(&quot;./&quot;)) if(exists(cf + &quot;/.git/&quot;)) repoFolders.push_back(cf);&#xA;+&#xA; &#x9;initCommands();&#xA; &#xA; &#x9;vector&lt;string> args;&#xA;@@ -224,3 +266,4 @@ int main(int argc, char* argv[])&#xA; &#xA; &#x9;return 0;&#xA; }&#xA;+&#xA;" file="/0/@files.7" revision="/0/@revisions.7"/>
  <MG:Patch patch="--- a/include/git-ws/CommandLine/Cmd.h&#xA;+++ b/include/git-ws/CommandLine/Cmd.h&#xA;@@ -36,7 +36,8 @@ namespace ssvcl&#xA; &#xA; &#x9;&#x9;&#x9;bool hasName(const std::string&amp; mName);&#xA; &#x9;&#x9;&#x9;void execute();&#xA;-&#x9;&#x9;&#x9;void setFunc(std::function&lt;void()> mFunc);&#xA;+&#xA;+&#x9;&#x9;&#x9;Cmd&amp; operator+=(std::function&lt;void()> mFunc);&#xA; &#xA; &#x9;&#x9;&#x9;const std::vector&lt;std::string>&amp; getNames();&#xA; &#x9;&#x9;&#x9;const std::vector&lt;ArgBase*>&amp; getArgs();&#xA;" file="/0/@files.14" revision="/0/@revisions.14"/>
  <MG:Patch patch="--- /dev/null&#xA;+++ b/include/git-ws/CommandLine/CommandLine.h&#xA;@@ -0,0 +1,11 @@&#xA;+#ifndef GITWS_COMMANDLINE&#xA;+#define GITWS_COMMANDLINE&#xA;+&#xA;+#include &quot;git-ws/CommandLine/Parser.h&quot;&#xA;+#include &quot;git-ws/CommandLine/ArgBase.h&quot;&#xA;+#include &quot;git-ws/CommandLine/Arg.h&quot;&#xA;+#include &quot;git-ws/CommandLine/Flag.h&quot;&#xA;+#include &quot;git-ws/CommandLine/Cmd.h&quot;&#xA;+#include &quot;git-ws/CommandLine/CmdLine.h&quot;&#xA;+&#xA;+#endif&#xA;" file="/0/@files.26" revision="/0/@revisions.14"/>
  <MG:Patch patch="--- a/include/git-ws/CommandLine/Flag.h&#xA;+++ b/include/git-ws/CommandLine/Flag.h&#xA;@@ -17,8 +17,9 @@ namespace ssvcl&#xA; &#x9;&#x9;public:&#xA; &#x9;&#x9;&#x9;Flag(const std::string&amp; mShortName, const std::string&amp; mLongName);&#xA; &#xA;-&#x9;&#x9;&#x9;void setActive(bool mActive);&#xA;-&#x9;&#x9;&#x9;bool isActive();&#xA;+&#x9;&#x9;&#x9;Flag&amp; operator=(bool mActive);&#xA;+&#x9;&#x9;&#x9;operator bool() const;&#xA;+&#xA; &#x9;&#x9;&#x9;bool hasName(const std::string&amp; mName);&#xA; &#xA; &#x9;&#x9;&#x9;const std::string&amp; getShortName();&#xA;" file="/0/@files.16" revision="/0/@revisions.14"/>
  <MG:Patch patch="--- a/src/git-ws/CommandLine/Cmd.cpp&#xA;+++ b/src/git-ws/CommandLine/Cmd.cpp&#xA;@@ -23,13 +23,13 @@ namespace ssvcl&#xA; &#xA; &#x9;Flag&amp;Cmd::createFlag(const string&amp; mShortName, const string&amp; mLongName) { auto result(new Flag{mShortName, mLongName}); flags.push_back(result); return *result; }&#xA; &#x9;unsigned int Cmd::getFlagCount() { return flags.size(); }&#xA;-&#x9;bool Cmd::isFlagActive(unsigned int mIndex) { return flags[mIndex]->isActive(); }&#xA;-&#x9;void Cmd::activateFlag(const string&amp; mName) { findFlag(mName).setActive(true); }&#xA;+&#x9;bool Cmd::isFlagActive(unsigned int mIndex) { return *flags[mIndex]; }&#xA;+&#x9;void Cmd::activateFlag(const string&amp; mName) { findFlag(mName) = true; }&#xA; &#xA; &#x9;bool Cmd::hasName(const string&amp; mName) { return contains(names, mName); }&#xA; &#xA; &#x9;void Cmd::execute() { func(); }&#xA;-&#x9;void Cmd::setFunc(function&lt;void ()> mFunc) { func = mFunc; }&#xA;+&#x9;Cmd&amp; Cmd::operator+=(std::function&lt;void()> mFunc) { func = mFunc; return *this; }&#xA; &#xA; &#x9;const vector&lt;string>&amp;Cmd::getNames() { return names; }&#xA; &#x9;const vector&lt;ArgBase*>&amp;Cmd::getArgs() { return args; }&#xA;" file="/0/@files.22" revision="/0/@revisions.14"/>
  <MG:Patch patch="--- a/src/git-ws/CommandLine/Flag.cpp&#xA;+++ b/src/git-ws/CommandLine/Flag.cpp&#xA;@@ -6,8 +6,9 @@ namespace ssvcl&#xA; {&#xA; &#x9;Flag::Flag(const string&amp; mShortName, const string&amp; mLongName) : shortName{mShortName}, longName{mLongName} { }&#xA; &#xA;-&#x9;void Flag::setActive(bool mActive) { active = mActive; }&#xA;-&#x9;bool Flag::isActive() { return active; }&#xA;+&#x9;Flag&amp; Flag::operator=(bool mActive) { active = mActive; return *this; }&#xA;+&#x9;Flag::operator bool() const { return active; }&#xA;+&#xA; &#x9;bool Flag::hasName(const string&amp; mName) { return mName == flagPrefixShort + shortName || mName == flagPrefixLong + longName; }&#xA; &#xA; &#x9;const string&amp;Flag::getShortName() { return shortName; }&#xA;" file="/0/@files.24" revision="/0/@revisions.14"/>
  <MG:Patch patch="--- a/src/git-ws/main.cpp&#xA;+++ b/src/git-ws/main.cpp&#xA;@@ -4,102 +4,83 @@&#xA; #include &lt;functional>&#xA; #include &lt;stdexcept>&#xA; #include &lt;SSVUtils/SSVUtils.h>&#xA;-#include &quot;git-ws/CommandLine/Parser.h&quot;&#xA;-#include &quot;git-ws/CommandLine/ArgBase.h&quot;&#xA;-#include &quot;git-ws/CommandLine/Arg.h&quot;&#xA;-#include &quot;git-ws/CommandLine/Flag.h&quot;&#xA;-#include &quot;git-ws/CommandLine/Cmd.h&quot;&#xA;-#include &quot;git-ws/CommandLine/CmdLine.h&quot;&#xA;+#include &quot;git-ws/CommandLine/CommandLine.h&quot;&#xA; &#xA; using namespace std;&#xA; using namespace ssvu;&#xA; using namespace ssvu::FileSystem;&#xA; using namespace ssvcl;&#xA; &#xA;-vector&lt;string> repoFolders;&#xA;-CmdLine m;&#xA;+struct GitWs&#xA;+{&#xA;+&#x9;vector&lt;string> repoPaths;&#xA;+&#x9;CmdLine cmdline;&#xA; &#xA;-void runCommandInRepos(const string&amp; mCommand)&#xA;+&#x9;void runShInRepos(const string&amp; mCommand)&#xA; &#x9;{&#xA;-&#x9;for(const auto&amp; f : repoFolders)&#xA;+&#x9;&#x9;for(const auto&amp; p : repoPaths)&#xA; &#x9;&#x9;{&#xA;-&#x9;&#x9;log(&quot;&#x9;&quot; + f);&#xA;-&#x9;&#x9;system(string{&quot;(cd &quot; + f + &quot;;&quot; + mCommand + &quot;)&quot;}.c_str());&#xA;+&#x9;&#x9;&#x9;log(&quot;&#x9;&quot; + p);&#xA;+&#x9;&#x9;&#x9;system(string{&quot;(cd &quot; + p + &quot;;&quot; + mCommand + &quot;)&quot;}.c_str());&#xA; &#x9;&#x9;&#x9;log(&quot;&quot;);&#xA; &#x9;&#x9;}&#xA; &#x9;}&#xA; &#xA;-void initHelp()&#xA;+&#x9;void initCmdHelp()&#xA; &#x9;{&#xA;-&#x9;auto&amp; helpCommand(m.create({&quot;?&quot;, &quot;help&quot;}));&#xA;-&#x9;auto&amp; argCommandName(helpCommand.createArg&lt;string>(&quot;command name&quot;));&#xA;-&#x9;helpCommand.setFunc([&amp;]&#xA;+&#x9;&#x9;auto&amp; cmd(cmdline.create({&quot;?&quot;, &quot;help&quot;}));&#xA;+&#x9;&#x9;auto&amp; arg(cmd.createArg&lt;string>(&quot;command name&quot;));&#xA;+&#x9;&#x9;cmd += [&amp;]&#xA; &#x9;&#x9;{&#xA;-&#x9;&#x9;auto&amp; command(m.findCommand(argCommandName.get()));&#xA;-&#x9;&#x9;log(&quot;Command &quot; + command.getNamesString() + &quot; usage:&quot;);&#xA;-&#x9;&#x9;log(command.getNamesString() + &quot; &quot; + command.getArgsString() + &quot; &quot; + command.getFlagsString());&#xA;-&#x9;});&#xA;+&#x9;&#x9;&#x9;auto&amp; c(cmdline.findCommand(arg.get()));&#xA;+&#x9;&#x9;&#x9;log(c.getNamesString(), &quot;Command help&quot;);&#xA;+&#x9;&#x9;&#x9;log(c.getNamesString() + &quot; &quot; + c.getArgsString() + &quot; &quot; + c.getFlagsString());&#xA;+&#x9;&#x9;};&#xA; &#x9;}&#xA;-&#xA;-void initPush()&#xA;+&#x9;void initCmdPush()&#xA; &#x9;{&#xA;-&#x9;auto&amp; pushCmd(m.create({&quot;push&quot;}));&#xA;-&#x9;auto&amp; forceFlag(pushCmd.createFlag(&quot;f&quot;, &quot;force&quot;));&#xA;-&#x9;pushCmd.setFunc([&amp;]&#xA;-&#x9;{&#xA;-&#x9;&#x9;runCommandInRepos(forceFlag.isActive() ? &quot;git push -f&quot; : &quot;git push&quot;);&#xA;-&#x9;});&#xA;+&#x9;&#x9;auto&amp; cmd(cmdline.create({&quot;push&quot;}));&#xA;+&#x9;&#x9;auto&amp; flagForce(cmd.createFlag(&quot;f&quot;, &quot;force&quot;));&#xA;+&#x9;&#x9;cmd += [&amp;]{ runShInRepos(flagForce ? &quot;git push -f&quot; : &quot;git push&quot;); };&#xA; &#x9;}&#xA;-&#xA;-void initPull()&#xA;+&#x9;void initCmdPull()&#xA; &#x9;{&#xA;-&#x9;auto&amp; pullCmd(m.create({&quot;pull&quot;}));&#xA;-&#x9;auto&amp; stashFlag(pullCmd.createFlag(&quot;s&quot;, &quot;stash&quot;));&#xA;-&#x9;pullCmd.setFunc([&amp;]&#xA;-&#x9;{&#xA;-&#x9;&#x9;runCommandInRepos(stashFlag.isActive() ? &quot;git stash; git pull&quot; : &quot;git pull&quot;);&#xA;-&#x9;});&#xA;+&#x9;&#x9;auto&amp; cmd(cmdline.create({&quot;pull&quot;}));&#xA;+&#x9;&#x9;auto&amp; flagStash(cmd.createFlag(&quot;s&quot;, &quot;stash&quot;));&#xA;+&#x9;&#x9;cmd += [&amp;]{ runShInRepos(flagStash ? &quot;git stash; git pull&quot; : &quot;git pull&quot;); };&#xA; &#x9;}&#xA;-&#xA;-void initStatus()&#xA;+&#x9;void initCmdSubmodule()&#xA; &#x9;{&#xA;-&#x9;m.create({&quot;status&quot;}).setFunc([&amp;]{ runCommandInRepos(&quot;git status -s --ignore-submodules=dirty&quot;); });&#xA;-}&#xA;-&#xA;-void initSubmodule()&#xA;-{&#xA;-&#x9;auto&amp; submoduleCmd(m.create({&quot;sub&quot;, &quot;submodule&quot;}));&#xA;-&#x9;auto&amp; arg(submoduleCmd.createArg&lt;string>(&quot;submodule action&quot;));&#xA;-&#x9;submoduleCmd.setFunc([&amp;]&#xA;+&#x9;&#x9;auto&amp; cmd(cmdline.create({&quot;sub&quot;, &quot;submodule&quot;}));&#xA;+&#x9;&#x9;auto&amp; arg(cmd.createArg&lt;string>(&quot;submodule action&quot;));&#xA;+&#x9;&#x9;cmd += [&amp;]&#xA; &#x9;&#x9;{&#xA;-&#x9;&#x9;if(arg.get() == &quot;push&quot;) runCommandInRepos(&quot;git commit -am 'automated submodule update'; git push&quot;);&#xA;-&#x9;&#x9;else if(arg.get() == &quot;pull&quot;) runCommandInRepos(&quot;git submodule foreach git stash; git submodule foreach git pull origin master --recurse-submodules&quot;);&#xA;+&#x9;&#x9;&#x9;if(arg.get() == &quot;push&quot;) runShInRepos(&quot;git commit -am 'automated submodule update'; git push&quot;);&#xA;+&#x9;&#x9;&#x9;else if(arg.get() == &quot;pull&quot;) runShInRepos(&quot;git submodule foreach git stash; git submodule foreach git pull origin master --recurse-submodules&quot;);&#xA; &#x9;&#x9;&#x9;else if(arg.get() == &quot;au&quot;)&#xA; &#x9;&#x9;&#x9;{&#xA;-&#x9;&#x9;&#x9;runCommandInRepos(&quot;git submodule foreach git stash; git submodule foreach git pull origin master --recurse-submodules&quot;);&#xA;-&#x9;&#x9;&#x9;runCommandInRepos(&quot;git commit -am 'automated submodule update'; git push&quot;);&#xA;-&#x9;&#x9;&#x9;runCommandInRepos(&quot;git submodule update&quot;);&#xA;+&#x9;&#x9;&#x9;&#x9;runShInRepos(&quot;git submodule foreach git stash; git submodule foreach git pull origin master --recurse-submodules&quot;);&#xA;+&#x9;&#x9;&#x9;&#x9;runShInRepos(&quot;git commit -am 'automated submodule update'; git push&quot;);&#xA;+&#x9;&#x9;&#x9;&#x9;runShInRepos(&quot;git submodule update&quot;);&#xA; &#x9;&#x9;&#x9;}&#xA;-&#x9;});&#xA;+&#x9;&#x9;};&#xA; &#x9;}&#xA;+&#x9;void initCmdStatus() { cmdline.create({&quot;status&quot;}) += [&amp;]{ runShInRepos(&quot;git status -s --ignore-submodules=dirty&quot;); }; }&#xA;+&#x9;void initCmdGitg() { cmdline.create({&quot;gitg&quot;}) += [&amp;]{ runShInRepos(&quot;gitg&amp;&quot;); }; }&#xA; &#xA;-void initGitg()&#xA;-{&#xA;-&#x9;m.create({&quot;gitg&quot;}).setFunc([&amp;]{ runCommandInRepos(&quot;gitg&amp;&quot;); });&#xA;-}&#xA;+&#x9;void initRepoPaths() { for(auto&amp; p : getScan&lt;Mode::Single, Type::Folder>(&quot;./&quot;)) if(exists(p + &quot;/.git/&quot;)) repoPaths.push_back(p); }&#xA;+&#x9;void initCmds() { initCmdHelp(); initCmdPush(); initCmdPull(); initCmdSubmodule(); initCmdStatus(); initCmdGitg(); }&#xA; &#xA;-void initCommands() { initHelp(); initPush(); initPull(); initStatus(); initSubmodule(); initGitg(); }&#xA;+&#x9;GitWs() { initRepoPaths(); initCmds(); }&#xA;+};&#xA; &#xA; int main(int argc, char* argv[])&#xA; {&#xA;-&#x9;for(auto&amp; cf : getScan&lt;Mode::Single, Type::Folder>(&quot;./&quot;)) if(exists(cf + &quot;/.git/&quot;)) repoFolders.push_back(cf);&#xA;-&#xA;-&#x9;initCommands();&#xA;-&#xA; &#x9;vector&lt;string> args;&#xA; &#x9;for(int i{1}; i &lt; argc; ++i) args.push_back(toStr(argv[i]));&#xA;+&#x9;GitWs gitWs;&#xA; &#xA;-&#x9;try{ m.parseCommandLine(args); }&#xA;+&#x9;try{ gitWs.cmdline.parseCommandLine(args); }&#xA; &#x9;catch(runtime_error mException) { log(mException.what()); return 1; }&#xA; &#xA; &#x9;return 0;&#xA;" file="/0/@files.25" revision="/0/@revisions.14"/>
  <MG:Patch patch="--- /dev/null&#xA;+++ b/.gitmodules&#xA;@@ -0,0 +1,9 @@&#xA;+[submodule &quot;extlibs/SSVJsonCpp&quot;]&#xA;+&#x9;path = extlibs/SSVJsonCpp&#xA;+&#x9;url = https://github.com/SuperV1234/SSVJsonCpp.git&#xA;+[submodule &quot;extlibs/SSVUtils&quot;]&#xA;+&#x9;path = extlibs/SSVUtils&#xA;+&#x9;url = https://github.com/SuperV1234/SSVUtils.git&#xA;+[submodule &quot;extlibs/SSVUtilsJson&quot;]&#xA;+&#x9;path = extlibs/SSVUtilsJson&#xA;+&#x9;url = https://github.com/SuperV1234/SSVUtilsJson.git&#xA;" file="/0/@files.27" revision="/0/@revisions.16"/>
  <MG:Patch patch="--- a/src/git-ws/main.cpp&#xA;+++ b/src/git-ws/main.cpp&#xA;@@ -1,3 +1,4 @@&#xA;+#include &lt;cstdio>&#xA; #include &lt;iostream>&#xA; #include &lt;string>&#xA; #include &lt;vector>&#xA;@@ -20,8 +21,21 @@ struct GitWs&#xA; &#x9;{&#xA; &#x9;&#x9;for(const auto&amp; p : repoPaths)&#xA; &#x9;&#x9;{&#xA;-&#x9;&#x9;&#x9;log(&quot;&#x9;&quot; + p);&#xA;-&#x9;&#x9;&#x9;system(string{&quot;(cd &quot; + p + &quot;;&quot; + mCommand + &quot;)&quot;}.c_str());&#xA;+&#x9;&#x9;&#x9;log(&quot;&lt;&lt;&quot; + p + &quot;>>&quot;, &quot;Repo&quot;);&#xA;+&#xA;+&#x9;&#x9;&#x9;FILE* pipe{popen(string{&quot;(cd &quot; + p + &quot;;&quot; + mCommand + &quot;)&quot;}.c_str(), &quot;r&quot;)};&#xA;+&#x9;&#x9;&#x9;char buffer[1000];&#xA;+&#x9;&#x9;&#x9;string file;&#xA;+&#x9;&#x9;&#x9;vector&lt;string> files;&#xA;+&#x9;&#x9;&#x9;while(fgets(buffer, sizeof(buffer), pipe) != NULL)&#xA;+&#x9;&#x9;&#x9;{&#xA;+&#x9;&#x9;&#x9;&#x9;file = buffer;&#xA;+&#x9;&#x9;&#x9;&#x9;files.push_back(file.substr(0, file.size() - 1));&#xA;+&#x9;&#x9;&#x9;}&#xA;+&#x9;&#x9;&#x9;pclose(pipe);&#xA;+&#xA;+&#x9;&#x9;&#x9;for(auto&amp; f : files) log(f, &quot;>&quot;);&#xA;+&#x9;&#x9;&#x9;log(&quot;&quot;, &quot;----&quot;);&#xA; &#x9;&#x9;&#x9;log(&quot;&quot;);&#xA; &#x9;&#x9;}&#xA; &#x9;}&#xA;@@ -78,9 +92,8 @@ int main(int argc, char* argv[])&#xA; {&#xA; &#x9;vector&lt;string> args;&#xA; &#x9;for(int i{1}; i &lt; argc; ++i) args.push_back(toStr(argv[i]));&#xA;-&#x9;GitWs gitWs;&#xA; &#xA;-&#x9;try{ gitWs.cmdline.parseCommandLine(args); }&#xA;+&#x9;try{ GitWs{}.cmdline.parseCommandLine(args); }&#xA; &#x9;catch(runtime_error mException) { log(mException.what()); return 1; }&#xA; &#xA; &#x9;return 0;&#xA;" file="/0/@files.25" revision="/0/@revisions.15"/>
  <MG:Patch patch="--- a/src/git-ws/main.cpp&#xA;+++ b/src/git-ws/main.cpp&#xA;@@ -1,3 +1,7 @@&#xA;+// Copyright (c) 2013 Vittorio Romeo&#xA;+// License: Academic Free License (&quot;AFL&quot;) v. 3.0&#xA;+// AFL License page: http://opensource.org/licenses/AFL-3.0&#xA;+&#xA; #include &lt;cstdio>&#xA; #include &lt;iostream>&#xA; #include &lt;string>&#xA;@@ -81,9 +85,15 @@ struct GitWs&#xA; &#x9;}&#xA; &#x9;void initCmdStatus() { cmdline.create({&quot;status&quot;}) += [&amp;]{ runShInRepos(&quot;git status -s --ignore-submodules=dirty&quot;); }; }&#xA; &#x9;void initCmdGitg() { cmdline.create({&quot;gitg&quot;}) += [&amp;]{ runShInRepos(&quot;gitg&amp;&quot;); }; }&#xA;+&#x9;void initCmdDo()&#xA;+&#x9;{&#xA;+&#x9;&#x9;auto&amp; cmd(cmdline.create({&quot;do&quot;}));&#xA;+&#x9;&#x9;auto&amp; arg(cmd.createArg&lt;string>(&quot;command to execute&quot;));&#xA;+&#x9;&#x9;cmd += [&amp;]{ runShInRepos(arg.get()); };&#xA;+&#x9;}&#xA; &#xA; &#x9;void initRepoPaths() { for(auto&amp; p : getScan&lt;Mode::Single, Type::Folder>(&quot;./&quot;)) if(exists(p + &quot;/.git/&quot;)) repoPaths.push_back(p); }&#xA;-&#x9;void initCmds() { initCmdHelp(); initCmdPush(); initCmdPull(); initCmdSubmodule(); initCmdStatus(); initCmdGitg(); }&#xA;+&#x9;void initCmds() { initCmdHelp(); initCmdPush(); initCmdPull(); initCmdSubmodule(); initCmdStatus(); initCmdGitg(); initCmdDo(); }&#xA; &#xA; &#x9;GitWs() { initRepoPaths(); initCmds(); }&#xA; };&#xA;" file="/0/@files.25" revision="/0/@revisions.18"/>
  <MG:Patch patch="--- /dev/null&#xA;+++ b/LICENSE&#xA;@@ -0,0 +1,26 @@&#xA;+Copyright (c) 2013 Vittorio Romeo&#xA;+AFL License page: http://opensource.org/licenses/AFL-3.0&#xA;+&#xA;+Academic Free License (&quot;AFL&quot;) v. 3.0 This Academic Free License (the &quot;License&quot;) applies to any original work of authorship (the &quot;Original Work&quot;) whose owner (the &quot;Licensor&quot;) has placed the following licensing notice adjacent to the copyright notice for the Original Work:&#xA;+Licensed under the Academic Free License version 3.0&#xA;+1) Grant of Copyright License. Licensor grants You a worldwide, royalty-free, non-exclusive, sublicensable license, for the duration of the copyright, to do the following:&#xA;+a) to reproduce the Original Work in copies, either alone or as part of a collective work;&#xA;+b) to translate, adapt, alter, transform, modify, or arrange the Original Work, thereby creating derivative works (&quot;Derivative Works&quot;) based upon the Original Work;&#xA;+c) to distribute or communicate copies of the Original Work and Derivative Works to the public, under any license of your choice that does not contradict the terms and conditions, including Licensor's reserved rights and remedies, in this Academic Free License;&#xA;+d) to perform the Original Work publicly; and&#xA;+e) to display the Original Work publicly.&#xA;+2) Grant of Patent License. Licensor grants You a worldwide, royalty-free, non-exclusive, sublicensable license, under patent claims owned or controlled by the Licensor that are embodied in the Original Work as furnished by the Licensor, for the duration of the patents, to make, use, sell, offer for sale, have made, and import the Original Work and Derivative Works.&#xA;+3) Grant of Source Code License. The term &quot;Source Code&quot; means the preferred form of the Original Work for making modifications to it and all available documentation describing how to modify the Original Work. Licensor agrees to provide a machine-readable copy of the Source Code of the Original Work along with each copy of the Original Work that Licensor distributes. Licensor reserves the right to satisfy this obligation by placing a machine-readable copy of the Source Code in an information repository reasonably calculated to permit inexpensive and convenient access by You for as long as Licensor continues to distribute the Original Work.&#xA;+4) Exclusions From License Grant. Neither the names of Licensor, nor the names of any contributors to the Original Work, nor any of their trademarks or service marks, may be used to endorse or promote products derived from this Original Work without express prior permission of the Licensor. Except as expressly stated herein, nothing in this License grants any license to Licensor's trademarks, copyrights, patents, trade secrets or any other intellectual property. No patent license is granted to make, use, sell, offer for sale, have made, or import embodiments of any patent claims other than the licensed claims defined in Section 2. No license is granted to the trademarks of Licensor even if such marks are included in the Original Work. Nothing in this License shall be interpreted to prohibit Licensor from licensing under terms different from this License any Original Work that Licensor otherwise would have a right to license.&#xA;+5) External Deployment. The term &quot;External Deployment&quot; means the use, distribution, or communication of the Original Work or Derivative Works in any way such that the Original Work or Derivative Works may be used by anyone other than You, whether those works are distributed or communicated to those persons or made available as an application intended for use over a network. As an express condition for the grants of license hereunder, You must treat any External Deployment by You of the Original Work or a Derivative Work as a distribution under section 1(c).&#xA;+6) Attribution Rights. You must retain, in the Source Code of any Derivative Works that You create, all copyright, patent, or trademark notices from the Source Code of the Original Work, as well as any notices of licensing and any descriptive text identified therein as an &quot;Attribution Notice.&quot; You must cause the Source Code for any Derivative Works that You create to carry a prominent Attribution Notice reasonably calculated to inform recipients that You have modified the Original Work.&#xA;+7) Warranty of Provenance and Disclaimer of Warranty. Licensor warrants that the copyright in and to the Original Work and the patent rights granted herein by Licensor are owned by the Licensor or are sublicensed to You under the terms of this License with the permission of the contributor(s) of those copyrights and patent rights. Except as expressly stated in the immediately preceding sentence, the Original Work is provided under this License on an &quot;AS IS&quot; BASIS and WITHOUT WARRANTY, either express or implied, including, without limitation, the warranties of non-infringement, merchantability or fitness for a particular purpose. THE ENTIRE RISK AS TO THE QUALITY OF THE ORIGINAL WORK IS WITH YOU. This DISCLAIMER OF WARRANTY constitutes an essential part of this License. No license to the Original Work is granted by this License except under this disclaimer.&#xA;+8) Limitation of Liability. Under no circumstances and under no legal theory, whether in tort (including negligence), contract, or otherwise, shall the Licensor be liable to anyone for any indirect, special, incidental, or consequential damages of any character arising as a result of this License or the use of the Original Work including, without limitation, damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses. This limitation of liability shall not apply to the extent applicable law prohibits such limitation.&#xA;+9) Acceptance and Termination. If, at any time, You expressly assented to this License, that assent indicates your clear and irrevocable acceptance of this License and all of its terms and conditions. If You distribute or communicate copies of the Original Work or a Derivative Work, You must make a reasonable effort under the circumstances to obtain the express assent of recipients to the terms of this License. This License conditions your rights to undertake the activities listed in Section 1, including your right to create Derivative Works based upon the Original Work, and doing so without honoring these terms and conditions is prohibited by copyright law and international treaty. Nothing in this License is intended to affect copyright exceptions and limitations (including &quot;fair use&quot; or &quot;fair dealing&quot;). This License shall terminate immediately and You may no longer exercise any of the rights granted to You by this License upon your failure to honor the conditions in Section 1(c).&#xA;+10) Termination for Patent Action. This License shall terminate automatically and You may no longer exercise any of the rights granted to You by this License as of the date You commence an action, including a cross-claim or counterclaim, against Licensor or any licensee alleging that the Original Work infringes a patent. This termination provision shall not apply for an action alleging patent infringement by combinations of the Original Work with other software or hardware.&#xA;+11) Jurisdiction, Venue and Governing Law. Any action or suit relating to this License may be brought only in the courts of a jurisdiction wherein the Licensor resides or in which Licensor conducts its primary business, and under the laws of that jurisdiction excluding its conflict-of-law provisions. The application of the United Nations Convention on Contracts for the International Sale of Goods is expressly excluded. Any use of the Original Work outside the scope of this License or after its termination shall be subject to the requirements and penalties of copyright or patent law in the appropriate jurisdiction. This section shall survive the termination of this License.&#xA;+12) Attorneys' Fees. In any action to enforce the terms of this License or seeking damages relating thereto, the prevailing party shall be entitled to recover its costs and expenses, including, without limitation, reasonable attorneys' fees and costs incurred in connection with such action, including any appeal of such action. This section shall survive the termination of this License.&#xA;+13) Miscellaneous. If any provision of this License is held to be unenforceable, such provision shall be reformed only to the extent necessary to make it enforceable.&#xA;+14) Definition of &quot;You&quot; in This License. &quot;You&quot; throughout this License, whether in upper or lower case, means an individual or a legal entity exercising rights under, and complying with all of the terms of, this License. For legal entities, &quot;You&quot; includes any entity that controls, is controlled by, or is under common control with you. For purposes of this definition, &quot;control&quot; means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity.&#xA;+15) Right to Use. You may use the Original Work in all ways not otherwise restricted or conditioned by this License or by law, and Licensor promises not to interfere with or be responsible for such uses by You.&#xA;+16) Modification of This License. This License is Copyright © 2005 Lawrence Rosen. Permission is granted to copy, distribute, or communicate this License without modification. Nothing in this License permits You to modify this License as applied to the Original Work or to Derivative Works. However, You may modify the text of this License and copy, distribute or communicate your modified version (the &quot;Modified License&quot;) and apply it to other original works of authorship subject to the following conditions: (i) You may not indicate in any way that your Modified License is the &quot;Academic Free License&quot; or &quot;AFL&quot; and you may not use those names in the name of your Modified License; (ii) You must replace the notice specified in the first paragraph above with the notice &quot;Licensed under &quot; or with a notice of your own that is not confusingly similar to the notice in this License; and (iii) You may not claim that your original works are open source software unless your Modified License has been approved by Open Source Initiative (OSI) and You comply with its license review and certification process.&#xA;\ No newline at end of file&#xA;" file="/0/@files.28" revision="/0/@revisions.17"/>
  <MG:Patch patch="--- a/src/git-ws/main.cpp&#xA;+++ b/src/git-ws/main.cpp&#xA;@@ -39,8 +39,7 @@ struct GitWs&#xA; &#x9;&#x9;&#x9;pclose(pipe);&#xA; &#xA; &#x9;&#x9;&#x9;for(auto&amp; f : files) log(f, &quot;>&quot;);&#xA;-&#x9;&#x9;&#x9;log(&quot;&quot;, &quot;----&quot;);&#xA;-&#x9;&#x9;&#x9;log(&quot;&quot;);&#xA;+&#x9;&#x9;&#x9;log(&quot;&quot;, &quot;----&quot;); log(&quot;&quot;);&#xA; &#x9;&#x9;}&#xA; &#x9;}&#xA; &#xA;@@ -101,7 +100,7 @@ struct GitWs&#xA; int main(int argc, char* argv[])&#xA; {&#xA; &#x9;vector&lt;string> args;&#xA;-&#x9;for(int i{1}; i &lt; argc; ++i) args.push_back(toStr(argv[i]));&#xA;+&#x9;for(int i{1}; i &lt; argc; ++i) args.push_back(argv[i]);&#xA; &#xA; &#x9;try{ GitWs{}.cmdLine.parseCommandLine(args); }&#xA; &#x9;catch(runtime_error mException) { log(mException.what()); return 1; }&#xA;" file="/0/@files.25" revision="/0/@revisions.22"/>
  <MG:Patch patch="--- a/README.md&#xA;+++ b/README.md&#xA;@@ -18,3 +18,4 @@ Using `git-ws` in a directory calls git commands in all subdirectiories which ar&#xA; * `> git-ws submodule push`: commits all staged changes and pushes (intended to be used only after non-submodule changes have been pushed)&#xA; * `> git-ws submodule pull`: stashes all submodule local changes, pulls latest submodules recursively&#xA; * `> git-ws submodule au`: equivalent of `git-ws submodule pull` followed by `git-ws submodule push` and by `git submodule update`&#xA;+* `> git-ws do 'command here'`: creates a subshell in every git repo folder, and executes a bash command in it&#xA;\ No newline at end of file&#xA;" file="/0/@files.1" revision="/0/@revisions.20"/>
  <MG:Patch patch="--- a/extlibs/SSVJsonCpp&#xA;+++ b/extlibs/SSVJsonCpp&#xA;@@ -1 +1 @@&#xA;-Subproject commit a6a5a87fb52ac21748d8585a5a836984c33fd63c&#xA;+Subproject commit ebc303aa4c4bb1f558413e6b819db75bec3500a0&#xA;" file="/0/@files.4" revision="/0/@revisions.20"/>
  <MG:Patch patch="--- a/extlibs/SSVUtils&#xA;+++ b/extlibs/SSVUtils&#xA;@@ -1 +1 @@&#xA;-Subproject commit 8d6673b15b94a7bbc9b1cfd8efbd380ecbbe4b2d&#xA;+Subproject commit 7994fbbea674c7671f71bacca9d89e39d3bee6bb&#xA;" file="/0/@files.5" revision="/0/@revisions.20"/>
  <MG:Patch patch="--- a/extlibs/SSVUtilsJson&#xA;+++ b/extlibs/SSVUtilsJson&#xA;@@ -1 +1 @@&#xA;-Subproject commit 1dc54e42c0eab1d4e0e2380b8211842cfea90f0a&#xA;+Subproject commit 4b42a299efb317a3a561dd3079caaa331b77b33b&#xA;" file="/0/@files.6" revision="/0/@revisions.20"/>
  <MG:Patch patch="--- a/include/git-ws/CommandLine/Arg.h&#xA;+++ b/include/git-ws/CommandLine/Arg.h&#xA;@@ -21,6 +21,18 @@ namespace ssvcl&#xA; &#x9;&#x9;&#x9;T get() const { return value; }&#xA; &#x9;&#x9;&#x9;void set(const std::string&amp; mValue) override { value = Parser&lt;T>::parse(mValue); }&#xA; &#x9;};&#xA;+&#xA;+&#x9;template&lt;typename T> class OptArg : public Arg&lt;T>&#xA;+&#x9;{&#xA;+&#x9;&#x9;private:&#xA;+&#x9;&#x9;&#x9;T defaultValue;&#xA;+&#x9;&#x9;&#x9;bool active{false};&#xA;+&#xA;+&#x9;&#x9;public:&#xA;+&#x9;&#x9;&#x9;OptArg(T mDefaultValue, const std::string&amp; mDescription) : defaultValue{mDefaultValue}, Arg&lt;T>{mDescription} { }&#xA;+&#xA;+&#x9;&#x9;&#x9;T get() const { return active ? this->value : defaultValue; }&#xA;+&#x9;};&#xA; }&#xA; &#xA; #endif&#xA;" file="/0/@files.12" revision="/0/@revisions.20"/>
  <MG:Patch patch="--- a/include/git-ws/CommandLine/ArgBase.h&#xA;+++ b/include/git-ws/CommandLine/ArgBase.h&#xA;@@ -22,6 +22,12 @@ namespace ssvcl&#xA; &#x9;&#x9;&#x9;const std::string&amp; getDescription();&#xA; &#x9;&#x9;&#x9;std::string getArgString();&#xA; &#x9;};&#xA;+&#xA;+&#x9;class OptArgBase : public ArgBase&#xA;+&#x9;{&#xA;+&#x9;&#x9;private:&#xA;+&#x9;&#x9;&#x9;bool active{false};&#xA;+&#x9;};&#xA; }&#xA; &#xA; #endif&#xA;" file="/0/@files.13" revision="/0/@revisions.20"/>
  <MG:Patch patch="--- a/include/git-ws/CommandLine/Cmd.h&#xA;+++ b/include/git-ws/CommandLine/Cmd.h&#xA;@@ -14,12 +14,14 @@ namespace ssvcl&#xA; &#x9;class Flag;&#xA; &#x9;class ArgBase;&#xA; &#x9;template&lt;typename T> class Arg;&#xA;+&#x9;template&lt;typename T> class OptArg;&#xA; &#xA; &#x9;class Cmd&#xA; &#x9;{&#xA; &#x9;&#x9;private:&#xA; &#x9;&#x9;&#x9;std::vector&lt;std::string> names;&#xA; &#x9;&#x9;&#x9;std::vector&lt;ArgBase*> args; // owned&#xA;+&#x9;&#x9;&#x9;std::vector&lt;ArgBase*> optArgs; // owned&#xA; &#x9;&#x9;&#x9;std::vector&lt;Flag*> flags; // owned&#xA; &#x9;&#x9;&#x9;std::function&lt;void()> func;&#xA; &#xA;@@ -33,6 +35,9 @@ namespace ssvcl&#xA; &#x9;&#x9;&#x9;void setArgValue(unsigned int mIndex, const std::string&amp; mValue);&#xA; &#x9;&#x9;&#x9;unsigned int getArgCount();&#xA; &#xA;+&#x9;&#x9;&#x9;template&lt;typename T> OptArg&lt;T>&amp; createOptArg(const std::string&amp; mDescription) { auto result(new OptArg&lt;T>(mDescription)); optArgs.push_back(result); return *result; }&#xA;+&#x9;&#x9;&#x9;void setOptArgValue(unsigned int mIndex, const std::string&amp; mValue);&#xA;+&#xA; &#x9;&#x9;&#x9;Flag&amp; createFlag(const std::string&amp; mShortName, const std::string&amp; mLongName);&#xA; &#x9;&#x9;&#x9;bool isFlagActive(unsigned int mIndex);&#xA; &#x9;&#x9;&#x9;unsigned int getFlagCount();&#xA;" file="/0/@files.14" revision="/0/@revisions.20"/>
  <MG:Patch patch="--- a/src/git-ws/CommandLine/Cmd.cpp&#xA;+++ b/src/git-ws/CommandLine/Cmd.cpp&#xA;@@ -14,7 +14,7 @@ using namespace ssvu;&#xA; namespace ssvcl&#xA; {&#xA; &#x9;Cmd::Cmd(initializer_list&lt;string> mNames) : names{mNames} { }&#xA;-&#x9;Cmd::~Cmd() { for(const auto&amp; a : args) delete a; for(const auto&amp; f : flags) delete f; }&#xA;+&#x9;Cmd::~Cmd() { for(const auto&amp; a : args) delete a; for(const auto&amp; a : optArgs) delete a; for(const auto&amp; f : flags) delete f; }&#xA; &#xA; &#x9;Flag&amp; Cmd::findFlag(const string&amp; mName)&#xA; &#x9;{&#xA;@@ -25,6 +25,8 @@ namespace ssvcl&#xA; &#x9;void Cmd::setArgValue(unsigned int mIndex, const string&amp; mValue) { args[mIndex]->set(mValue); }&#xA; &#x9;unsigned int Cmd::getArgCount() { return args.size(); }&#xA; &#xA;+&#x9;void Cmd::setOptArgValue(unsigned int mIndex, const string&amp; mValue) { optArgs[mIndex]->set(mValue); optArgs[mIndex]->setActive(true); }&#xA;+&#xA; &#x9;Flag&amp; Cmd::createFlag(const string&amp; mShortName, const string&amp; mLongName) { auto result(new Flag{mShortName, mLongName}); flags.push_back(result); return *result; }&#xA; &#x9;unsigned int Cmd::getFlagCount() { return flags.size(); }&#xA; &#x9;bool Cmd::isFlagActive(unsigned int mIndex) { return *flags[mIndex]; }&#xA;" file="/0/@files.22" revision="/0/@revisions.20"/>
  <MG:Patch patch="--- a/src/git-ws/main.cpp&#xA;+++ b/src/git-ws/main.cpp&#xA;@@ -79,7 +79,7 @@ struct GitWs&#xA; &#x9;&#x9;&#x9;{&#xA; &#x9;&#x9;&#x9;&#x9;runShInRepos(&quot;git submodule foreach git stash; git submodule foreach git pull origin master --recurse-submodules&quot;);&#xA; &#x9;&#x9;&#x9;&#x9;runShInRepos(&quot;git commit -am 'automated submodule update'; git push&quot;);&#xA;-&#x9;&#x9;&#x9;&#x9;runShInRepos(&quot;git submodule update&quot;);&#xA;+&#x9;&#x9;&#x9;&#x9;//runShInRepos(&quot;git submodule update&quot;);&#xA; &#x9;&#x9;&#x9;}&#xA; &#x9;&#x9;};&#xA; &#x9;}&#xA;" file="/0/@files.25" revision="/0/@revisions.20"/>
  <MG:Patch patch="--- a/include/git-ws/CommandLine/Arg.h&#xA;+++ b/include/git-ws/CommandLine/Arg.h&#xA;@@ -1,3 +1,7 @@&#xA;+// Copyright (c) 2013 Vittorio Romeo&#xA;+// License: Academic Free License (&quot;AFL&quot;) v. 3.0&#xA;+// AFL License page: http://opensource.org/licenses/AFL-3.0&#xA;+&#xA; #ifndef GITWS_COMMANDLINE_ARG&#xA; #define GITWS_COMMANDLINE_ARG&#xA; &#xA;" file="/0/@files.12" revision="/0/@revisions.19"/>
  <MG:Patch patch="--- a/include/git-ws/CommandLine/ArgBase.h&#xA;+++ b/include/git-ws/CommandLine/ArgBase.h&#xA;@@ -1,3 +1,7 @@&#xA;+// Copyright (c) 2013 Vittorio Romeo&#xA;+// License: Academic Free License (&quot;AFL&quot;) v. 3.0&#xA;+// AFL License page: http://opensource.org/licenses/AFL-3.0&#xA;+&#xA; #ifndef GITWS_COMMANDLINE_ARGBASE&#xA; #define GITWS_COMMANDLINE_ARGBASE&#xA; &#xA;" file="/0/@files.13" revision="/0/@revisions.19"/>
  <MG:Patch patch="--- a/include/git-ws/CommandLine/Cmd.h&#xA;+++ b/include/git-ws/CommandLine/Cmd.h&#xA;@@ -1,3 +1,7 @@&#xA;+// Copyright (c) 2013 Vittorio Romeo&#xA;+// License: Academic Free License (&quot;AFL&quot;) v. 3.0&#xA;+// AFL License page: http://opensource.org/licenses/AFL-3.0&#xA;+&#xA; #ifndef GITWS_COMMANDLINE_CMD&#xA; #define GITWS_COMMANDLINE_CMD&#xA; &#xA;" file="/0/@files.14" revision="/0/@revisions.19"/>
  <MG:Patch patch="--- a/include/git-ws/CommandLine/CmdLine.h&#xA;+++ b/include/git-ws/CommandLine/CmdLine.h&#xA;@@ -1,3 +1,7 @@&#xA;+// Copyright (c) 2013 Vittorio Romeo&#xA;+// License: Academic Free License (&quot;AFL&quot;) v. 3.0&#xA;+// AFL License page: http://opensource.org/licenses/AFL-3.0&#xA;+&#xA; #ifndef GITWS_COMMANDLINE_CMDLINE&#xA; #define GITWS_COMMANDLINE_CMDLINE&#xA; &#xA;" file="/0/@files.15" revision="/0/@revisions.19"/>
  <MG:Patch patch="--- a/include/git-ws/CommandLine/CommandLine.h&#xA;+++ b/include/git-ws/CommandLine/CommandLine.h&#xA;@@ -1,3 +1,7 @@&#xA;+// Copyright (c) 2013 Vittorio Romeo&#xA;+// License: Academic Free License (&quot;AFL&quot;) v. 3.0&#xA;+// AFL License page: http://opensource.org/licenses/AFL-3.0&#xA;+&#xA; #ifndef GITWS_COMMANDLINE&#xA; #define GITWS_COMMANDLINE&#xA; &#xA;" file="/0/@files.26" revision="/0/@revisions.19"/>
  <MG:Patch patch="--- a/include/git-ws/CommandLine/Flag.h&#xA;+++ b/include/git-ws/CommandLine/Flag.h&#xA;@@ -1,3 +1,7 @@&#xA;+// Copyright (c) 2013 Vittorio Romeo&#xA;+// License: Academic Free License (&quot;AFL&quot;) v. 3.0&#xA;+// AFL License page: http://opensource.org/licenses/AFL-3.0&#xA;+&#xA; #ifndef GITWS_COMMANDLINE_FLAG&#xA; #define GITWS_COMMANDLINE_FLAG&#xA; &#xA;" file="/0/@files.16" revision="/0/@revisions.19"/>
  <MG:Patch patch="--- a/include/git-ws/CommandLine/Parser.h&#xA;+++ b/include/git-ws/CommandLine/Parser.h&#xA;@@ -1,3 +1,7 @@&#xA;+// Copyright (c) 2013 Vittorio Romeo&#xA;+// License: Academic Free License (&quot;AFL&quot;) v. 3.0&#xA;+// AFL License page: http://opensource.org/licenses/AFL-3.0&#xA;+&#xA; #ifndef GITWS_COMMANDLINE_PARSER&#xA; #define GITWS_COMMANDLINE_PARSER&#xA; &#xA;" file="/0/@files.17" revision="/0/@revisions.19"/>
  <MG:Patch patch="--- a/src/git-ws/CommandLine/ArgBase.cpp&#xA;+++ b/src/git-ws/CommandLine/ArgBase.cpp&#xA;@@ -1,3 +1,7 @@&#xA;+// Copyright (c) 2013 Vittorio Romeo&#xA;+// License: Academic Free License (&quot;AFL&quot;) v. 3.0&#xA;+// AFL License page: http://opensource.org/licenses/AFL-3.0&#xA;+&#xA; #include &quot;git-ws/CommandLine/ArgBase.h&quot;&#xA; &#xA; using namespace std;&#xA;" file="/0/@files.21" revision="/0/@revisions.19"/>
  <MG:Patch patch="--- a/src/git-ws/CommandLine/Cmd.cpp&#xA;+++ b/src/git-ws/CommandLine/Cmd.cpp&#xA;@@ -1,3 +1,7 @@&#xA;+// Copyright (c) 2013 Vittorio Romeo&#xA;+// License: Academic Free License (&quot;AFL&quot;) v. 3.0&#xA;+// AFL License page: http://opensource.org/licenses/AFL-3.0&#xA;+&#xA; #include &lt;SSVUtils/SSVUtils.h>&#xA; #include &quot;git-ws/CommandLine/ArgBase.h&quot;&#xA; #include &quot;git-ws/CommandLine/Arg.h&quot;&#xA;" file="/0/@files.22" revision="/0/@revisions.19"/>
  <MG:Patch patch="--- a/src/git-ws/CommandLine/CmdLine.cpp&#xA;+++ b/src/git-ws/CommandLine/CmdLine.cpp&#xA;@@ -1,3 +1,7 @@&#xA;+// Copyright (c) 2013 Vittorio Romeo&#xA;+// License: Academic Free License (&quot;AFL&quot;) v. 3.0&#xA;+// AFL License page: http://opensource.org/licenses/AFL-3.0&#xA;+&#xA; #include &lt;SSVUtils/SSVUtils.h>&#xA; #include &quot;git-ws/CommandLine/Cmd.h&quot;&#xA; #include &quot;git-ws/CommandLine/Flag.h&quot;&#xA;" file="/0/@files.23" revision="/0/@revisions.19"/>
  <MG:Patch patch="--- a/src/git-ws/CommandLine/Flag.cpp&#xA;+++ b/src/git-ws/CommandLine/Flag.cpp&#xA;@@ -1,3 +1,7 @@&#xA;+// Copyright (c) 2013 Vittorio Romeo&#xA;+// License: Academic Free License (&quot;AFL&quot;) v. 3.0&#xA;+// AFL License page: http://opensource.org/licenses/AFL-3.0&#xA;+&#xA; #include &quot;git-ws/CommandLine/Flag.h&quot;&#xA; &#xA; using namespace std;&#xA;" file="/0/@files.24" revision="/0/@revisions.19"/>
  <MG:Patch patch="--- a/src/git-ws/CommandLine/CmdLine.cpp&#xA;+++ b/src/git-ws/CommandLine/CmdLine.cpp&#xA;@@ -39,7 +39,7 @@ namespace ssvcl&#xA; &#x9;&#x9;for(const auto&amp; f : cFlags) eraseRemove(args, f);&#xA; &#xA; &#x9;&#x9;// Find args, put them in cArgs&#xA;-&#x9;&#x9;vector&lt;string> cArgs, cOptArgs;&#xA;+&#x9;&#x9;vector&lt;string> cArgs;&#xA; &#x9;&#x9;for(unsigned int i{cmd.getArgCount()}; i > 0; --i)&#xA; &#x9;&#x9;{&#xA; &#x9;&#x9;&#x9;if(args.empty()) throw runtime_error(&quot;Incorrect number of args for command &quot; + cmd.getNamesString() + &quot; , correct number is '&quot; + toStr(cmd.getArgCount()) + &quot;'&quot;);&#xA;@@ -48,6 +48,7 @@ namespace ssvcl&#xA; &#x9;&#x9;}&#xA; &#xA; &#x9;&#x9;// Remaining string in args must be optargs&#xA;+&#x9;&#x9;vector&lt;string> cOptArgs;&#xA; &#x9;&#x9;while(!args.empty())&#xA; &#x9;&#x9;{&#xA; &#x9;&#x9;&#x9;cOptArgs.push_back(args.front());&#xA;" file="/0/@files.23" revision="/0/@revisions.23"/>
  <MG:Patch patch="--- a/extlibs/SSVJsonCpp&#xA;+++ b/extlibs/SSVJsonCpp&#xA;@@ -1 +1 @@&#xA;-Subproject commit ebc303aa4c4bb1f558413e6b819db75bec3500a0&#xA;+Subproject commit 2b3c25cb4efb274aa2cbca8747ce4039691f7392&#xA;" file="/0/@files.4" revision="/0/@revisions.24"/>
  <MG:Patch patch="--- a/extlibs/SSVUtilsJson&#xA;+++ b/extlibs/SSVUtilsJson&#xA;@@ -1 +1 @@&#xA;-Subproject commit 4b42a299efb317a3a561dd3079caaa331b77b33b&#xA;+Subproject commit 844b20168fee424d8d20d0c0d2a60189449c2826&#xA;" file="/0/@files.6" revision="/0/@revisions.24"/>
  <MG:Patch patch="--- a/extlibs/SSVUtilsJson&#xA;+++ b/extlibs/SSVUtilsJson&#xA;@@ -1 +1 @@&#xA;-Subproject commit 844b20168fee424d8d20d0c0d2a60189449c2826&#xA;+Subproject commit 3457ba6b6eee57e4885563e5df8e94662e27f35a&#xA;" file="/0/@files.6" revision="/0/@revisions.27"/>
  <MG:Patch patch="--- a/src/git-ws/main.cpp&#xA;+++ b/src/git-ws/main.cpp&#xA;@@ -21,12 +21,10 @@ struct GitWs&#xA; &#x9;vector&lt;string> repoPaths;&#xA; &#x9;CmdLine cmdLine;&#xA; &#xA;-&#x9;void runShInRepos(const string&amp; mCommand)&#xA;+&#x9;void runShInRepos(const string&amp; mCommand, bool mPrintEmpty = false)&#xA; &#x9;{&#xA; &#x9;&#x9;for(const auto&amp; p : repoPaths)&#xA; &#x9;&#x9;{&#xA;-&#x9;&#x9;&#x9;log(&quot;&lt;&lt;&quot; + p + &quot;>>&quot;, &quot;Repo&quot;);&#xA;-&#xA; &#x9;&#x9;&#x9;FILE* pipe{popen(string{&quot;(cd &quot; + p + &quot;;&quot; + mCommand + &quot;)&quot;}.c_str(), &quot;r&quot;)};&#xA; &#x9;&#x9;&#x9;char buffer[1000];&#xA; &#x9;&#x9;&#x9;string file;&#xA;@@ -38,6 +36,9 @@ struct GitWs&#xA; &#x9;&#x9;&#x9;}&#xA; &#x9;&#x9;&#x9;pclose(pipe);&#xA; &#xA;+&#x9;&#x9;&#x9;if(files.empty() &amp;&amp; !mPrintEmpty) continue;&#xA;+&#xA;+&#x9;&#x9;&#x9;log(&quot;&lt;&lt;&quot; + p + &quot;>>&quot;, &quot;Repo&quot;);&#xA; &#x9;&#x9;&#x9;for(auto&amp; f : files) log(f, &quot;>&quot;);&#xA; &#x9;&#x9;&#x9;log(&quot;&quot;, &quot;----&quot;); log(&quot;&quot;);&#xA; &#x9;&#x9;}&#xA;@@ -82,7 +83,12 @@ struct GitWs&#xA; &#x9;&#x9;&#x9;}&#xA; &#x9;&#x9;};&#xA; &#x9;}&#xA;-&#x9;void initCmdStatus() { cmdLine.create({&quot;status&quot;}) += [&amp;]{ runShInRepos(&quot;git status -s --ignore-submodules=dirty&quot;); }; }&#xA;+&#x9;void initCmdStatus()&#xA;+&#x9;{&#xA;+&#x9;&#x9;auto&amp; cmd(cmdLine.create({&quot;st&quot;, &quot;status&quot;}));&#xA;+&#x9;&#x9;auto&amp; showAllFlag(cmd.createFlag(&quot;a&quot;, &quot;showall&quot;));&#xA;+&#x9;&#x9;cmd += [&amp;]{ runShInRepos(&quot;git status -s --ignore-submodules=dirty&quot;, showAllFlag); };&#xA;+&#x9;}&#xA; &#x9;void initCmdGitg() { cmdLine.create({&quot;gitg&quot;}) += [&amp;]{ runShInRepos(&quot;gitg&amp;&quot;); }; }&#xA; &#x9;void initCmdDo()&#xA; &#x9;{&#xA;" file="/0/@files.25" revision="/0/@revisions.26"/>
  <MG:Patch patch="--- a/include/git-ws/CommandLine/Arg.h&#xA;+++ b/include/git-ws/CommandLine/Arg.h&#xA;@@ -12,7 +12,7 @@ namespace ssvcl&#xA; {&#xA; &#x9;template&lt;typename T> class Arg : public ArgBase&#xA; &#x9;{&#xA;-&#x9;&#x9;private:&#xA;+&#x9;&#x9;protected:&#xA; &#x9;&#x9;&#x9;T value;&#xA; &#xA; &#x9;&#x9;public:&#xA;@@ -29,9 +29,12 @@ namespace ssvcl&#xA; &#x9;&#x9;&#x9;bool active{false};&#xA; &#xA; &#x9;&#x9;public:&#xA;-&#x9;&#x9;&#x9;OptArg(T mDefaultValue, const std::string&amp; mDescription) : defaultValue{mDefaultValue}, Arg&lt;T>{mDescription} { }&#xA;+&#x9;&#x9;&#x9;OptArg(T mDefaultValue, const std::string&amp; mDescription) :  Arg&lt;T>{mDescription}, defaultValue{mDefaultValue} { }&#xA; &#xA; &#x9;&#x9;&#x9;T get() const { return active ? this->value : defaultValue; }&#xA;+&#x9;&#x9;&#x9;void set(const std::string&amp; mValue) override { Arg&lt;T>::set(mValue); active = true; }&#xA;+&#xA;+&#x9;&#x9;&#x9;operator bool() const { return active; }&#xA; &#x9;};&#xA; }&#xA; &#xA;" file="/0/@files.12" revision="/0/@revisions.21"/>
  <MG:Patch patch="--- a/include/git-ws/CommandLine/ArgBase.h&#xA;+++ b/include/git-ws/CommandLine/ArgBase.h&#xA;@@ -22,12 +22,6 @@ namespace ssvcl&#xA; &#x9;&#x9;&#x9;const std::string&amp; getDescription();&#xA; &#x9;&#x9;&#x9;std::string getArgString();&#xA; &#x9;};&#xA;-&#xA;-&#x9;class OptArgBase : public ArgBase&#xA;-&#x9;{&#xA;-&#x9;&#x9;private:&#xA;-&#x9;&#x9;&#x9;bool active{false};&#xA;-&#x9;};&#xA; }&#xA; &#xA; #endif&#xA;" file="/0/@files.13" revision="/0/@revisions.21"/>
  <MG:Patch patch="--- a/include/git-ws/CommandLine/Cmd.h&#xA;+++ b/include/git-ws/CommandLine/Cmd.h&#xA;@@ -35,8 +35,9 @@ namespace ssvcl&#xA; &#x9;&#x9;&#x9;void setArgValue(unsigned int mIndex, const std::string&amp; mValue);&#xA; &#x9;&#x9;&#x9;unsigned int getArgCount();&#xA; &#xA;-&#x9;&#x9;&#x9;template&lt;typename T> OptArg&lt;T>&amp; createOptArg(const std::string&amp; mDescription) { auto result(new OptArg&lt;T>(mDescription)); optArgs.push_back(result); return *result; }&#xA;+&#x9;&#x9;&#x9;template&lt;typename T> OptArg&lt;T>&amp; createOptArg(T mDefaultValue, const std::string&amp; mDescription) { auto result(new OptArg&lt;T>(mDefaultValue, mDescription)); optArgs.push_back(result); return *result; }&#xA; &#x9;&#x9;&#x9;void setOptArgValue(unsigned int mIndex, const std::string&amp; mValue);&#xA;+&#x9;&#x9;&#x9;unsigned int getOptArgCount();&#xA; &#xA; &#x9;&#x9;&#x9;Flag&amp; createFlag(const std::string&amp; mShortName, const std::string&amp; mLongName);&#xA; &#x9;&#x9;&#x9;bool isFlagActive(unsigned int mIndex);&#xA;@@ -54,6 +55,7 @@ namespace ssvcl&#xA; &#xA; &#x9;&#x9;&#x9;std::string getNamesString();&#xA; &#x9;&#x9;&#x9;std::string getArgsString();&#xA;+&#x9;&#x9;&#x9;std::string getOptArgsString();&#xA; &#x9;&#x9;&#x9;std::string getFlagsString();&#xA; &#x9;};&#xA; }&#xA;" file="/0/@files.14" revision="/0/@revisions.21"/>
  <MG:Patch patch="--- a/src/git-ws/CommandLine/Cmd.cpp&#xA;+++ b/src/git-ws/CommandLine/Cmd.cpp&#xA;@@ -25,7 +25,8 @@ namespace ssvcl&#xA; &#x9;void Cmd::setArgValue(unsigned int mIndex, const string&amp; mValue) { args[mIndex]->set(mValue); }&#xA; &#x9;unsigned int Cmd::getArgCount() { return args.size(); }&#xA; &#xA;-&#x9;void Cmd::setOptArgValue(unsigned int mIndex, const string&amp; mValue) { optArgs[mIndex]->set(mValue); optArgs[mIndex]->setActive(true); }&#xA;+&#x9;void Cmd::setOptArgValue(unsigned int mIndex, const string&amp; mValue) { optArgs[mIndex]->set(mValue); }&#xA;+&#x9;unsigned int Cmd::getOptArgCount() { return optArgs.size(); }&#xA; &#xA; &#x9;Flag&amp; Cmd::createFlag(const string&amp; mShortName, const string&amp; mLongName) { auto result(new Flag{mShortName, mLongName}); flags.push_back(result); return *result; }&#xA; &#x9;unsigned int Cmd::getFlagCount() { return flags.size(); }&#xA;@@ -62,6 +63,16 @@ namespace ssvcl&#xA; &#x9;&#x9;}&#xA; &#x9;&#x9;return result;&#xA; &#x9;}&#xA;+&#x9;string Cmd::getOptArgsString()&#xA;+&#x9;{&#xA;+&#x9;&#x9;string result;&#xA;+&#x9;&#x9;for(unsigned int i{0}; i &lt; optArgs.size(); ++i)&#xA;+&#x9;&#x9;{&#xA;+&#x9;&#x9;&#x9;result.append(&quot;optional:&quot; + optArgs[i]->getArgString());&#xA;+&#x9;&#x9;&#x9;if(i &lt; optArgs.size() - 1) result.append(&quot; &quot;);&#xA;+&#x9;&#x9;}&#xA;+&#x9;&#x9;return result;&#xA;+&#x9;}&#xA; &#x9;string Cmd::getFlagsString()&#xA; &#x9;{&#xA; &#x9;&#x9;string result;&#xA;" file="/0/@files.22" revision="/0/@revisions.21"/>
  <MG:Patch patch="--- a/src/git-ws/CommandLine/CmdLine.cpp&#xA;+++ b/src/git-ws/CommandLine/CmdLine.cpp&#xA;@@ -2,6 +2,7 @@&#xA; // License: Academic Free License (&quot;AFL&quot;) v. 3.0&#xA; // AFL License page: http://opensource.org/licenses/AFL-3.0&#xA; &#xA;+#include &lt;deque>&#xA; #include &lt;SSVUtils/SSVUtils.h>&#xA; #include &quot;git-ws/CommandLine/Cmd.h&quot;&#xA; #include &quot;git-ws/CommandLine/Flag.h&quot;&#xA;@@ -20,19 +21,42 @@ namespace ssvcl&#xA; &#x9;Cmd&amp; CmdLine::create(initializer_list&lt;string> mNames) { auto result(new Cmd{mNames}); commands.push_back(result); return *result; }&#xA; &#x9;void CmdLine::parseCommandLine(const vector&lt;string>&amp; mArgs)&#xA; &#x9;{&#xA;-&#x9;&#x9;const string&amp; cmdName{mArgs[0]};&#xA;-&#x9;&#x9;Cmd&amp; cmd{findCommand(cmdName)};&#xA;+&#x9;&#x9;deque&lt;string> args{begin(mArgs), end(mArgs)};&#xA; &#xA;-&#x9;&#x9;vector&lt;string> cArgs, cFlags;&#xA;-&#x9;&#x9;for(unsigned int i{1}; i &lt; mArgs.size(); ++i)&#xA;+&#x9;&#x9;Cmd&amp; cmd{findCommand(args.front())};&#xA;+&#x9;&#x9;args.pop_front();&#xA;+&#xA;+&#x9;&#x9;// Find all flags, put them in cFlags, remove them from mArgs&#xA;+&#x9;&#x9;vector&lt;string> cFlags;&#xA;+&#x9;&#x9;for(const auto&amp; s : args)&#xA;+&#x9;&#x9;{&#xA;+&#x9;&#x9;&#x9;if(startsWith(s, flagPrefixShort) || startsWith(s, flagPrefixLong))&#xA;+&#x9;&#x9;&#x9;{&#xA;+&#x9;&#x9;&#x9;&#x9;cFlags.push_back(s);&#xA;+&#x9;&#x9;&#x9;&#x9;if(cFlags.size() > cmd.getFlagCount()) throw runtime_error(&quot;Incorrect number of flags for command &quot; + cmd.getNamesString() + &quot; , correct number is '&quot; + toStr(cmd.getFlagCount()) + &quot;'&quot;);&#xA;+&#x9;&#x9;&#x9;}&#xA;+&#x9;&#x9;}&#xA;+&#x9;&#x9;for(const auto&amp; f : cFlags) eraseRemove(args, f);&#xA;+&#xA;+&#x9;&#x9;// Find args, put them in cArgs&#xA;+&#x9;&#x9;vector&lt;string> cArgs, cOptArgs;&#xA;+&#x9;&#x9;for(unsigned int i{cmd.getArgCount()}; i > 0; --i)&#xA; &#x9;&#x9;{&#xA;-&#x9;&#x9;&#x9;const string&amp; s{mArgs[i]};&#xA;-&#x9;&#x9;&#x9;(startsWith(s, flagPrefixShort) || startsWith(s, flagPrefixLong)) ? cFlags.push_back(s) : cArgs.push_back(s);&#xA;+&#x9;&#x9;&#x9;if(args.empty()) throw runtime_error(&quot;Incorrect number of args for command &quot; + cmd.getNamesString() + &quot; , correct number is '&quot; + toStr(cmd.getArgCount()) + &quot;'&quot;);&#xA;+&#x9;&#x9;&#x9;cArgs.push_back(args.front());&#xA;+&#x9;&#x9;&#x9;args.pop_front();&#xA; &#x9;&#x9;}&#xA; &#xA;-&#x9;&#x9;if(cArgs.size() != cmd.getArgCount()) throw runtime_error(&quot;Incorrect number of arguments for command &quot; + cmd.getNamesString() + &quot; , correct number is '&quot; + ssvu::toStr(cmd.getArgCount()) + &quot;'&quot;);&#xA;+&#x9;&#x9;// Remaining string in args must be optargs&#xA;+&#x9;&#x9;while(!args.empty())&#xA;+&#x9;&#x9;{&#xA;+&#x9;&#x9;&#x9;cOptArgs.push_back(args.front());&#xA;+&#x9;&#x9;&#x9;if(cOptArgs.size() > cmd.getOptArgCount()) throw runtime_error(&quot;Incorrect number of optargs for command &quot; + cmd.getNamesString() + &quot; , correct number is '&quot; + toStr(cmd.getOptArgCount()) + &quot;'&quot;);&#xA;+&#x9;&#x9;&#x9;args.pop_front();&#xA;+&#x9;&#x9;}&#xA; &#xA; &#x9;&#x9;for(unsigned int i{0}; i &lt; cArgs.size(); ++i) cmd.setArgValue(i, cArgs[i]);&#xA;+&#x9;&#x9;for(unsigned int i{0}; i &lt; cOptArgs.size(); ++i) cmd.setOptArgValue(i, cOptArgs[i]);&#xA; &#x9;&#x9;for(const auto&amp; f : cFlags) cmd.activateFlag(f);&#xA; &#x9;&#x9;cmd.execute();&#xA; &#x9;}&#xA;" file="/0/@files.23" revision="/0/@revisions.21"/>
  <MG:Patch patch="--- a/src/git-ws/main.cpp&#xA;+++ b/src/git-ws/main.cpp&#xA;@@ -19,7 +19,7 @@ using namespace ssvcl;&#xA; struct GitWs&#xA; {&#xA; &#x9;vector&lt;string> repoPaths;&#xA;-&#x9;CmdLine cmdline;&#xA;+&#x9;CmdLine cmdLine;&#xA; &#xA; &#x9;void runShInRepos(const string&amp; mCommand)&#xA; &#x9;{&#xA;@@ -46,30 +46,30 @@ struct GitWs&#xA; &#xA; &#x9;void initCmdHelp()&#xA; &#x9;{&#xA;-&#x9;&#x9;auto&amp; cmd(cmdline.create({&quot;?&quot;, &quot;help&quot;}));&#xA;+&#x9;&#x9;auto&amp; cmd(cmdLine.create({&quot;?&quot;, &quot;help&quot;}));&#xA; &#x9;&#x9;auto&amp; arg(cmd.createArg&lt;string>(&quot;command name&quot;));&#xA; &#x9;&#x9;cmd += [&amp;]&#xA; &#x9;&#x9;{&#xA;-&#x9;&#x9;&#x9;auto&amp; c(cmdline.findCommand(arg.get()));&#xA;+&#x9;&#x9;&#x9;auto&amp; c(cmdLine.findCommand(arg.get()));&#xA; &#x9;&#x9;&#x9;log(c.getNamesString(), &quot;Command help&quot;);&#xA;-&#x9;&#x9;&#x9;log(c.getNamesString() + &quot; &quot; + c.getArgsString() + &quot; &quot; + c.getFlagsString());&#xA;+&#x9;&#x9;&#x9;log(c.getNamesString() + &quot; &quot; + c.getArgsString() + &quot; &quot; + c.getOptArgsString() + &quot; &quot; + c.getFlagsString());&#xA; &#x9;&#x9;};&#xA; &#x9;}&#xA; &#x9;void initCmdPush()&#xA; &#x9;{&#xA;-&#x9;&#x9;auto&amp; cmd(cmdline.create({&quot;push&quot;}));&#xA;+&#x9;&#x9;auto&amp; cmd(cmdLine.create({&quot;push&quot;}));&#xA; &#x9;&#x9;auto&amp; flagForce(cmd.createFlag(&quot;f&quot;, &quot;force&quot;));&#xA; &#x9;&#x9;cmd += [&amp;]{ runShInRepos(flagForce ? &quot;git push -f&quot; : &quot;git push&quot;); };&#xA; &#x9;}&#xA; &#x9;void initCmdPull()&#xA; &#x9;{&#xA;-&#x9;&#x9;auto&amp; cmd(cmdline.create({&quot;pull&quot;}));&#xA;+&#x9;&#x9;auto&amp; cmd(cmdLine.create({&quot;pull&quot;}));&#xA; &#x9;&#x9;auto&amp; flagStash(cmd.createFlag(&quot;s&quot;, &quot;stash&quot;));&#xA; &#x9;&#x9;cmd += [&amp;]{ runShInRepos(flagStash ? &quot;git stash; git pull&quot; : &quot;git pull&quot;); };&#xA; &#x9;}&#xA; &#x9;void initCmdSubmodule()&#xA; &#x9;{&#xA;-&#x9;&#x9;auto&amp; cmd(cmdline.create({&quot;sub&quot;, &quot;submodule&quot;}));&#xA;+&#x9;&#x9;auto&amp; cmd(cmdLine.create({&quot;sub&quot;, &quot;submodule&quot;}));&#xA; &#x9;&#x9;auto&amp; arg(cmd.createArg&lt;string>(&quot;submodule action&quot;));&#xA; &#x9;&#x9;cmd += [&amp;]&#xA; &#x9;&#x9;{&#xA;@@ -83,11 +83,11 @@ struct GitWs&#xA; &#x9;&#x9;&#x9;}&#xA; &#x9;&#x9;};&#xA; &#x9;}&#xA;-&#x9;void initCmdStatus() { cmdline.create({&quot;status&quot;}) += [&amp;]{ runShInRepos(&quot;git status -s --ignore-submodules=dirty&quot;); }; }&#xA;-&#x9;void initCmdGitg() { cmdline.create({&quot;gitg&quot;}) += [&amp;]{ runShInRepos(&quot;gitg&amp;&quot;); }; }&#xA;+&#x9;void initCmdStatus() { cmdLine.create({&quot;status&quot;}) += [&amp;]{ runShInRepos(&quot;git status -s --ignore-submodules=dirty&quot;); }; }&#xA;+&#x9;void initCmdGitg() { cmdLine.create({&quot;gitg&quot;}) += [&amp;]{ runShInRepos(&quot;gitg&amp;&quot;); }; }&#xA; &#x9;void initCmdDo()&#xA; &#x9;{&#xA;-&#x9;&#x9;auto&amp; cmd(cmdline.create({&quot;do&quot;}));&#xA;+&#x9;&#x9;auto&amp; cmd(cmdLine.create({&quot;do&quot;}));&#xA; &#x9;&#x9;auto&amp; arg(cmd.createArg&lt;string>(&quot;command to execute&quot;));&#xA; &#x9;&#x9;cmd += [&amp;]{ runShInRepos(arg.get()); };&#xA; &#x9;}&#xA;@@ -103,7 +103,7 @@ int main(int argc, char* argv[])&#xA; &#x9;vector&lt;string> args;&#xA; &#x9;for(int i{1}; i &lt; argc; ++i) args.push_back(toStr(argv[i]));&#xA; &#xA;-&#x9;try{ GitWs{}.cmdline.parseCommandLine(args); }&#xA;+&#x9;try{ GitWs{}.cmdLine.parseCommandLine(args); }&#xA; &#x9;catch(runtime_error mException) { log(mException.what()); return 1; }&#xA; &#xA; &#x9;return 0;&#xA;" file="/0/@files.25" revision="/0/@revisions.21"/>
  <MG:Patch patch="--- a/CMakeLists.txt&#xA;+++ b/CMakeLists.txt&#xA;@@ -15,10 +15,17 @@ find_package(SSVJsonCpp REQUIRED)&#xA; find_package(SSVUtils REQUIRED)&#xA; find_package(SSVUtilsJson REQUIRED)&#xA; &#xA;-file(GLOB SRC_LIST &quot;./*.cpp&quot; &quot;./*.h&quot;)&#xA;+set(SRC_DIR &quot;src&quot;)&#xA;+set(INC_DIR &quot;include&quot;)&#xA; &#xA;-include_directories(&quot;./&quot;)&#xA;-include_directories(&quot;./Utils/&quot;)&#xA;+file(GLOB SRC_LIST&#xA;+&#x9;&quot;${INC_DIR}/${PROJECT_NAME}/*.h&quot;&#xA;+&#x9;&quot;${SRC_DIR}/${PROJECT_NAME}/*.cpp&quot;&#xA;+&#x9;&quot;${INC_DIR}/${PROJECT_NAME}/CommandLine/*.h&quot;&#xA;+&#x9;&quot;${SRC_DIR}/${PROJECT_NAME}/CommandLine/*.cpp&quot;&#xA;+)&#xA;+&#xA;+include_directories(${INC_DIR})&#xA; include_directories(${SSVJSONCPP_INCLUDE_DIR})&#xA; include_directories(${SSVUTILS_INCLUDE_DIR})&#xA; include_directories(${SSVUTILSJSON_INCLUDE_DIR})&#xA;" file="/0/@files.2" revision="/0/@revisions.13"/>
  <MG:Patch patch="--- /dev/null&#xA;+++ b/include/git-ws/CommandLine/Arg.h&#xA;@@ -0,0 +1,22 @@&#xA;+#ifndef GITWS_COMMANDLINE_ARG&#xA;+#define GITWS_COMMANDLINE_ARG&#xA;+&#xA;+#include &lt;string>&#xA;+#include &quot;git-ws/CommandLine/Parser.h&quot;&#xA;+&#xA;+namespace ssvcl&#xA;+{&#xA;+&#x9;template&lt;typename T> class Arg : public ArgBase&#xA;+&#x9;{&#xA;+&#x9;&#x9;private:&#xA;+&#x9;&#x9;&#x9;T value;&#xA;+&#xA;+&#x9;&#x9;public:&#xA;+&#x9;&#x9;&#x9;Arg(const std::string&amp; mDescription) : ArgBase{mDescription} { }&#xA;+&#xA;+&#x9;&#x9;&#x9;T get() const { return value; }&#xA;+&#x9;&#x9;&#x9;void set(const std::string&amp; mValue) override { value = Parser&lt;T>::parse(mValue); }&#xA;+&#x9;};&#xA;+}&#xA;+&#xA;+#endif&#xA;" file="/0/@files.12" revision="/0/@revisions.13"/>
  <MG:Patch patch="--- /dev/null&#xA;+++ b/include/git-ws/CommandLine/ArgBase.h&#xA;@@ -0,0 +1,23 @@&#xA;+#ifndef GITWS_COMMANDLINE_ARGBASE&#xA;+#define GITWS_COMMANDLINE_ARGBASE&#xA;+&#xA;+#include &lt;string>&#xA;+&#xA;+namespace ssvcl&#xA;+{&#xA;+&#x9;class ArgBase&#xA;+&#x9;{&#xA;+&#x9;&#x9;private:&#xA;+&#x9;&#x9;&#x9;std::string description;&#xA;+&#xA;+&#x9;&#x9;public:&#xA;+&#x9;&#x9;&#x9;ArgBase(const std::string&amp; mDescription);&#xA;+&#x9;&#x9;&#x9;virtual ~ArgBase();&#xA;+&#xA;+&#x9;&#x9;&#x9;virtual void set(const std::string&amp; mString) = 0;&#xA;+&#x9;&#x9;&#x9;const std::string&amp; getDescription();&#xA;+&#x9;&#x9;&#x9;std::string getArgString();&#xA;+&#x9;};&#xA;+}&#xA;+&#xA;+#endif&#xA;" file="/0/@files.13" revision="/0/@revisions.13"/>
  <MG:Patch patch="--- /dev/null&#xA;+++ b/include/git-ws/CommandLine/Cmd.h&#xA;@@ -0,0 +1,51 @@&#xA;+#ifndef GITWS_COMMANDLINE_CMD&#xA;+#define GITWS_COMMANDLINE_CMD&#xA;+&#xA;+#include &lt;string>&#xA;+#include &lt;vector>&#xA;+#include &lt;functional>&#xA;+&#xA;+namespace ssvcl&#xA;+{&#xA;+&#x9;class Flag;&#xA;+&#x9;class ArgBase;&#xA;+&#x9;template&lt;typename T> class Arg;&#xA;+&#xA;+&#x9;class Cmd&#xA;+&#x9;{&#xA;+&#x9;&#x9;private:&#xA;+&#x9;&#x9;&#x9;std::vector&lt;std::string> names;&#xA;+&#x9;&#x9;&#x9;std::vector&lt;ArgBase*> args; // owned&#xA;+&#x9;&#x9;&#x9;std::vector&lt;Flag*> flags; // owned&#xA;+&#x9;&#x9;&#x9;std::function&lt;void()> func;&#xA;+&#xA;+&#x9;&#x9;&#x9;Flag&amp; findFlag(const std::string&amp; mName);&#xA;+&#xA;+&#x9;&#x9;public:&#xA;+&#x9;&#x9;&#x9;Cmd(std::initializer_list&lt;std::string> mNames);&#xA;+&#x9;&#x9;&#x9;~Cmd();&#xA;+&#xA;+&#x9;&#x9;&#x9;template&lt;typename T> Arg&lt;T>&amp; createArg(const std::string&amp; mDescription) { auto result(new Arg&lt;T>(mDescription)); args.push_back(result); return *result; }&#xA;+&#x9;&#x9;&#x9;void setArgValue(unsigned int mIndex, const std::string&amp; mValue);&#xA;+&#x9;&#x9;&#x9;unsigned int getArgCount();&#xA;+&#xA;+&#x9;&#x9;&#x9;Flag&amp; createFlag(const std::string&amp; mShortName, const std::string&amp; mLongName);&#xA;+&#x9;&#x9;&#x9;bool isFlagActive(unsigned int mIndex);&#xA;+&#x9;&#x9;&#x9;unsigned int getFlagCount();&#xA;+&#x9;&#x9;&#x9;void activateFlag(const std::string&amp; mName);&#xA;+&#xA;+&#x9;&#x9;&#x9;bool hasName(const std::string&amp; mName);&#xA;+&#x9;&#x9;&#x9;void execute();&#xA;+&#x9;&#x9;&#x9;void setFunc(std::function&lt;void()> mFunc);&#xA;+&#xA;+&#x9;&#x9;&#x9;const std::vector&lt;std::string>&amp; getNames();&#xA;+&#x9;&#x9;&#x9;const std::vector&lt;ArgBase*>&amp; getArgs();&#xA;+&#x9;&#x9;&#x9;const std::vector&lt;Flag*>&amp; getFlags();&#xA;+&#xA;+&#x9;&#x9;&#x9;std::string getNamesString();&#xA;+&#x9;&#x9;&#x9;std::string getArgsString();&#xA;+&#x9;&#x9;&#x9;std::string getFlagsString();&#xA;+&#x9;};&#xA;+}&#xA;+&#xA;+#endif&#xA;" file="/0/@files.14" revision="/0/@revisions.13"/>
  <MG:Patch patch="--- /dev/null&#xA;+++ b/include/git-ws/CommandLine/CmdLine.h&#xA;@@ -0,0 +1,23 @@&#xA;+#ifndef GITWS_COMMANDLINE_CMDLINE&#xA;+#define GITWS_COMMANDLINE_CMDLINE&#xA;+&#xA;+#include &lt;string>&#xA;+#include &lt;vector>&#xA;+&#xA;+namespace ssvcl&#xA;+{&#xA;+&#x9;class Cmd;&#xA;+&#xA;+&#x9;class CmdLine&#xA;+&#x9;{&#xA;+&#x9;&#x9;private:&#xA;+&#x9;&#x9;&#x9;std::vector&lt;Cmd*> commands;&#xA;+&#xA;+&#x9;&#x9;public:&#xA;+&#x9;&#x9;&#x9;Cmd&amp; findCommand(const std::string&amp; mName);&#xA;+&#x9;&#x9;&#x9;Cmd&amp; create(std::initializer_list&lt;std::string> mNames);&#xA;+&#x9;&#x9;&#x9;void parseCommandLine(const std::vector&lt;std::string>&amp; mArgs);&#xA;+&#x9;};&#xA;+}&#xA;+&#xA;+#endif&#xA;" file="/0/@files.15" revision="/0/@revisions.13"/>
  <MG:Patch patch="--- /dev/null&#xA;+++ b/include/git-ws/CommandLine/Flag.h&#xA;@@ -0,0 +1,32 @@&#xA;+#ifndef GITWS_COMMANDLINE_FLAG&#xA;+#define GITWS_COMMANDLINE_FLAG&#xA;+&#xA;+#include &lt;string>&#xA;+&#xA;+namespace ssvcl&#xA;+{&#xA;+&#x9;const std::string flagPrefixShort{&quot;-&quot;};&#xA;+&#x9;const std::string flagPrefixLong{&quot;--&quot;};&#xA;+&#xA;+&#x9;class Flag&#xA;+&#x9;{&#xA;+&#x9;&#x9;private:&#xA;+&#x9;&#x9;&#x9;std::string shortName, longName;&#xA;+&#x9;&#x9;&#x9;bool active{false};&#xA;+&#xA;+&#x9;&#x9;public:&#xA;+&#x9;&#x9;&#x9;Flag(const std::string&amp; mShortName, const std::string&amp; mLongName);&#xA;+&#xA;+&#x9;&#x9;&#x9;void setActive(bool mActive);&#xA;+&#x9;&#x9;&#x9;bool isActive();&#xA;+&#x9;&#x9;&#x9;bool hasName(const std::string&amp; mName);&#xA;+&#xA;+&#x9;&#x9;&#x9;const std::string&amp; getShortName();&#xA;+&#x9;&#x9;&#x9;const std::string&amp; getLongName();&#xA;+&#x9;&#x9;&#x9;std::string getShortNameWithPrefix();&#xA;+&#x9;&#x9;&#x9;std::string getLongNameWithPrefix();&#xA;+&#x9;&#x9;&#x9;std::string getFlagString();&#xA;+&#x9;};&#xA;+}&#xA;+&#xA;+#endif&#xA;" file="/0/@files.16" revision="/0/@revisions.13"/>
  <MG:Patch patch="--- /dev/null&#xA;+++ b/include/git-ws/CommandLine/Parser.h&#xA;@@ -0,0 +1,24 @@&#xA;+#ifndef GITWS_COMMANDLINE_PARSER&#xA;+#define GITWS_COMMANDLINE_PARSER&#xA;+&#xA;+#include &lt;string>&#xA;+#include &lt;stdexcept>&#xA;+&#xA;+namespace ssvcl&#xA;+{&#xA;+&#x9;template&lt;typename T> struct Parser;&#xA;+&#x9;template&lt;> struct Parser&lt;int>&#xA;+&#x9;{&#xA;+&#x9;&#x9;inline static int parse(const std::string&amp; mString)&#xA;+&#x9;&#x9;{&#xA;+&#x9;&#x9;&#x9;try { return stoi(mString); }&#xA;+&#x9;&#x9;&#x9;catch(...) { throw std::runtime_error(&quot;Cannot convert '&quot; + mString + &quot;' to int&quot;); }&#xA;+&#x9;&#x9;}&#xA;+&#x9;};&#xA;+&#x9;template&lt;> struct Parser&lt;std::string>&#xA;+&#x9;{&#xA;+&#x9;&#x9;inline static std::string parse(const std::string&amp; mString) { return mString; }&#xA;+&#x9;};&#xA;+}&#xA;+&#xA;+#endif&#xA;" file="/0/@files.17" revision="/0/@revisions.13"/>
  <MG:Patch patch="--- a/main.cpp&#xA;+++ /dev/null&#xA;@@ -1,269 +0,0 @@&#xA;-#include &lt;iostream>&#xA;-#include &lt;string>&#xA;-#include &lt;vector>&#xA;-#include &lt;functional>&#xA;-#include &lt;stdexcept>&#xA;-#include &lt;SSVUtils/SSVUtils.h>&#xA;-&#xA;-using namespace std;&#xA;-using namespace ssvu;&#xA;-using namespace ssvu::FileSystem;&#xA;-&#xA;-const string flagPrefixShort{&quot;-&quot;};&#xA;-const string flagPrefixLong{&quot;--&quot;};&#xA;-&#xA;-template&lt;typename T> struct CLValueParser;&#xA;-template&lt;> struct CLValueParser&lt;int>&#xA;-{&#xA;-&#x9;inline static int parse(const string&amp; mString)&#xA;-&#x9;{&#xA;-&#x9;&#x9;try { return stoi(mString); }&#xA;-&#x9;&#x9;catch(...) { throw runtime_error(&quot;Cannot convert '&quot; + mString + &quot;' to int&quot;); }&#xA;-&#x9;}&#xA;-};&#xA;-template&lt;> struct CLValueParser&lt;string>&#xA;-{&#xA;-&#x9;inline static string parse(const string&amp; mString) { return mString; }&#xA;-};&#xA;-&#xA;-class CLArgBase&#xA;-{&#xA;-&#x9;private:&#xA;-&#x9;&#x9;string description;&#xA;-&#xA;-&#x9;public:&#xA;-&#x9;&#x9;CLArgBase(const string&amp; mDescription) : description{mDescription} { }&#xA;-&#xA;-&#x9;&#x9;virtual ~CLArgBase() { }&#xA;-&#x9;&#x9;virtual void set(const string&amp; mString) = 0;&#xA;-&#xA;-&#x9;&#x9;const string&amp; getDescription() { return description; }&#xA;-&#x9;&#x9;string getArgString() { return &quot;(&quot; + description + &quot;)&quot;; }&#xA;-};&#xA;-template&lt;typename T> class CLArg : public CLArgBase&#xA;-{&#xA;-&#x9;private:&#xA;-&#x9;&#x9;T value;&#xA;-&#xA;-&#x9;public:&#xA;-&#x9;&#x9;CLArg(const string&amp; mDescription) : CLArgBase{mDescription} { }&#xA;-&#xA;-&#x9;&#x9;T get() const { return value; }&#xA;-&#x9;&#x9;void set(const string&amp; mValue) override { value = CLValueParser&lt;T>::parse(mValue); }&#xA;-};&#xA;-&#xA;-class CLFlag&#xA;-{&#xA;-&#x9;private:&#xA;-&#x9;&#x9;string shortName, longName;&#xA;-&#x9;&#x9;bool active{false};&#xA;-&#xA;-&#x9;public:&#xA;-&#x9;&#x9;CLFlag(const string&amp; mShortName, const string&amp; mLongName) : shortName{mShortName}, longName{mLongName} { }&#xA;-&#xA;-&#x9;&#x9;void setActive(bool mActive) { active = mActive; }&#xA;-&#x9;&#x9;bool isActive() { return active; }&#xA;-&#x9;&#x9;bool hasName(const string&amp; mName) { return mName == flagPrefixShort + shortName || mName == flagPrefixLong + longName; }&#xA;-&#xA;-&#x9;&#x9;const string&amp; getShortName() { return shortName; }&#xA;-&#x9;&#x9;const string&amp; getLongName() { return longName; }&#xA;-&#x9;&#x9;string getShortNameWithPrefix() { return flagPrefixShort + shortName; }&#xA;-&#x9;&#x9;string getLongNameWithPrefix() { return flagPrefixLong + longName; }&#xA;-&#x9;&#x9;string getFlagString() { return &quot;[&quot; + getShortNameWithPrefix() + &quot; || &quot; + getLongNameWithPrefix() + &quot;]&quot;; }&#xA;-};&#xA;-&#xA;-class CLCommand&#xA;-{&#xA;-&#x9;private:&#xA;-&#x9;&#x9;vector&lt;string> names;&#xA;-&#x9;&#x9;vector&lt;CLArgBase*> args; // owned&#xA;-&#x9;&#x9;vector&lt;CLFlag*> flags; // owned&#xA;-&#x9;&#x9;function&lt;void()> func;&#xA;-&#xA;-&#x9;&#x9;CLFlag&amp; findFlag(const string&amp; mName)&#xA;-&#x9;&#x9;{&#xA;-&#x9;&#x9;&#x9;for(const auto&amp; f : flags) if(f->hasName(mName)) return *f;&#xA;-&#x9;&#x9;&#x9;throw runtime_error(&quot;No flag with name '&quot; + mName + &quot;' in command &quot; + getNamesString());&#xA;-&#x9;&#x9;}&#xA;-&#xA;-&#x9;public:&#xA;-&#x9;&#x9;CLCommand(initializer_list&lt;string> mNames) : names{mNames} { }&#xA;-&#x9;&#x9;~CLCommand()&#xA;-&#x9;&#x9;{&#xA;-&#x9;&#x9;&#x9;for(const auto&amp; a : args) delete a;&#xA;-&#x9;&#x9;&#x9;for(const auto&amp; f : flags) delete f;&#xA;-&#x9;&#x9;}&#xA;-&#xA;-&#x9;&#x9;template&lt;typename T> CLArg&lt;T>&amp; createArg(const string&amp; mDescription) { auto result(new CLArg&lt;T>(mDescription)); args.push_back(result); return *result; }&#xA;-&#x9;&#x9;void setArgValue(unsigned int mIndex, const string&amp; mValue) { args[mIndex]->set(mValue); }&#xA;-&#x9;&#x9;unsigned int getArgCount() { return args.size(); }&#xA;-&#xA;-&#x9;&#x9;CLFlag&amp; createFlag(const string&amp; mShortName, const string&amp; mLongName) { auto result(new CLFlag{mShortName, mLongName}); flags.push_back(result); return *result; }&#xA;-&#x9;&#x9;bool isFlagActive(unsigned int mIndex) { return flags[mIndex]->isActive(); }&#xA;-&#x9;&#x9;unsigned int getFlagCount() { return flags.size(); }&#xA;-&#x9;&#x9;void activateFlag(const string&amp; mName) { findFlag(mName).setActive(true); }&#xA;-&#xA;-&#x9;&#x9;bool hasName(const string&amp; mName) { return contains(names, mName); }&#xA;-&#x9;&#x9;void execute() { func(); }&#xA;-&#x9;&#x9;void setFunc(function&lt;void()> mFunc) { func = mFunc; }&#xA;-&#xA;-&#x9;&#x9;const vector&lt;string>&amp; getNames() { return names; }&#xA;-&#x9;&#x9;const vector&lt;CLArgBase*>&amp; getArgs() { return args; }&#xA;-&#x9;&#x9;const vector&lt;CLFlag*>&amp; getFlags() { return flags; }&#xA;-&#xA;-&#x9;&#x9;string getNamesString()&#xA;-&#x9;&#x9;{&#xA;-&#x9;&#x9;&#x9;string result{&quot;&lt;&quot;};&#xA;-&#x9;&#x9;&#x9;for(unsigned int i{0}; i &lt; names.size(); ++i)&#xA;-&#x9;&#x9;&#x9;{&#xA;-&#x9;&#x9;&#x9;&#x9;result.append(names[i]);&#xA;-&#x9;&#x9;&#x9;&#x9;if(i &lt; names.size() - 1) result.append(&quot; || &quot;);&#xA;-&#x9;&#x9;&#x9;}&#xA;-&#x9;&#x9;&#x9;result.append(&quot;>&quot;);&#xA;-&#x9;&#x9;&#x9;return result;&#xA;-&#x9;&#x9;}&#xA;-&#x9;&#x9;string getArgsString()&#xA;-&#x9;&#x9;{&#xA;-&#x9;&#x9;&#x9;string result;&#xA;-&#x9;&#x9;&#x9;for(unsigned int i{0}; i &lt; args.size(); ++i)&#xA;-&#x9;&#x9;&#x9;{&#xA;-&#x9;&#x9;&#x9;&#x9;result.append(args[i]->getArgString());&#xA;-&#x9;&#x9;&#x9;&#x9;if(i &lt; args.size() - 1) result.append(&quot; &quot;);&#xA;-&#x9;&#x9;&#x9;}&#xA;-&#x9;&#x9;&#x9;return result;&#xA;-&#x9;&#x9;}&#xA;-&#x9;&#x9;string getFlagsString()&#xA;-&#x9;&#x9;{&#xA;-&#x9;&#x9;&#x9;string result;&#xA;-&#x9;&#x9;&#x9;for(unsigned int i{0}; i &lt; flags.size(); ++i)&#xA;-&#x9;&#x9;&#x9;{&#xA;-&#x9;&#x9;&#x9;&#x9;result.append(flags[i]->getFlagString());&#xA;-&#x9;&#x9;&#x9;&#x9;if(i &lt; flags.size() - 1) result.append(&quot; &quot;);&#xA;-&#x9;&#x9;&#x9;}&#xA;-&#x9;&#x9;&#x9;return result;&#xA;-&#x9;&#x9;}&#xA;-};&#xA;-&#xA;-class CLMain&#xA;-{&#xA;-&#x9;private:&#xA;-&#x9;&#x9;vector&lt;CLCommand*> commands;&#xA;-&#xA;-&#x9;public:&#xA;-&#x9;&#x9;CLCommand&amp; findCommand(const string&amp; mName)&#xA;-&#x9;&#x9;{&#xA;-&#x9;&#x9;&#x9;for(const auto&amp; c : commands) if(c->hasName(mName)) return *c;&#xA;-&#x9;&#x9;&#x9;throw runtime_error(&quot;No command with name &lt;&quot; + mName + &quot;>&quot;);&#xA;-&#x9;&#x9;}&#xA;-&#xA;-&#x9;&#x9;CLCommand&amp; create(initializer_list&lt;string> mNames) { auto result(new CLCommand{mNames}); commands.push_back(result); return *result; }&#xA;-&#xA;-&#x9;&#x9;void parseCommandLine(const vector&lt;string>&amp; mArgs)&#xA;-&#x9;&#x9;{&#xA;-&#x9;&#x9;&#x9;const string&amp; cmdName{mArgs[0]};&#xA;-&#x9;&#x9;&#x9;CLCommand&amp; cmd{findCommand(cmdName)};&#xA;-&#xA;-&#x9;&#x9;&#x9;vector&lt;string> cArgs, cFlags;&#xA;-&#x9;&#x9;&#x9;for(unsigned int i{1}; i &lt; mArgs.size(); ++i)&#xA;-&#x9;&#x9;&#x9;{&#xA;-&#x9;&#x9;&#x9;&#x9;const string&amp; s{mArgs[i]};&#xA;-&#x9;&#x9;&#x9;&#x9;(startsWith(s, flagPrefixShort) || startsWith(s, flagPrefixLong)) ? cFlags.push_back(s) : cArgs.push_back(s);&#xA;-&#x9;&#x9;&#x9;}&#xA;-&#xA;-&#x9;&#x9;&#x9;if(cArgs.size() != cmd.getArgCount()) throw runtime_error(&quot;Incorrect number of arguments for command &quot; + cmd.getNamesString() + &quot; , correct number is '&quot; + toStr(cmd.getArgCount()) + &quot;'&quot;);&#xA;-&#xA;-&#x9;&#x9;&#x9;for(unsigned int i{0}; i &lt; cArgs.size(); ++i) cmd.setArgValue(i, cArgs[i]);&#xA;-&#x9;&#x9;&#x9;for(const auto&amp; f : cFlags) cmd.activateFlag(f);&#xA;-&#x9;&#x9;&#x9;cmd.execute();&#xA;-&#x9;&#x9;}&#xA;-};&#xA;-&#xA;-vector&lt;string> repoFolders;&#xA;-CLMain m;&#xA;-&#xA;-void runCommandInRepos(const string&amp; mCommand)&#xA;-{&#xA;-&#x9;for(const auto&amp; f : repoFolders)&#xA;-&#x9;{&#xA;-&#x9;&#x9;log(&quot;&#x9;&quot; + f);&#xA;-&#x9;&#x9;system(string{&quot;(cd &quot; + f + &quot;;&quot; + mCommand + &quot;)&quot;}.c_str());&#xA;-&#x9;&#x9;log(&quot;&quot;);&#xA;-&#x9;}&#xA;-}&#xA;-&#xA;-void initHelp()&#xA;-{&#xA;-&#x9;auto&amp; helpCommand(m.create({&quot;?&quot;, &quot;help&quot;}));&#xA;-&#x9;auto&amp; argCommandName(helpCommand.createArg&lt;string>(&quot;command name&quot;));&#xA;-&#x9;helpCommand.setFunc([&amp;]&#xA;-&#x9;{&#xA;-&#x9;&#x9;auto&amp; command(m.findCommand(argCommandName.get()));&#xA;-&#x9;&#x9;log(&quot;Command &quot; + command.getNamesString() + &quot; usage:&quot;);&#xA;-&#x9;&#x9;log(command.getNamesString() + &quot; &quot; + command.getArgsString() + &quot; &quot; + command.getFlagsString());&#xA;-&#x9;});&#xA;-}&#xA;-&#xA;-void initPush()&#xA;-{&#xA;-&#x9;auto&amp; pushCmd(m.create({&quot;push&quot;}));&#xA;-&#x9;auto&amp; forceFlag(pushCmd.createFlag(&quot;f&quot;, &quot;force&quot;));&#xA;-&#x9;pushCmd.setFunc([&amp;]&#xA;-&#x9;{&#xA;-&#x9;&#x9;runCommandInRepos(forceFlag.isActive() ? &quot;git push -f&quot; : &quot;git push&quot;);&#xA;-&#x9;});&#xA;-}&#xA;-&#xA;-void initPull()&#xA;-{&#xA;-&#x9;auto&amp; pullCmd(m.create({&quot;pull&quot;}));&#xA;-&#x9;auto&amp; stashFlag(pullCmd.createFlag(&quot;s&quot;, &quot;stash&quot;));&#xA;-&#x9;pullCmd.setFunc([&amp;]&#xA;-&#x9;{&#xA;-&#x9;&#x9;runCommandInRepos(stashFlag.isActive() ? &quot;git stash; git pull&quot; : &quot;git pull&quot;);&#xA;-&#x9;});&#xA;-}&#xA;-&#xA;-void initStatus()&#xA;-{&#xA;-&#x9;m.create({&quot;status&quot;}).setFunc([&amp;]{ runCommandInRepos(&quot;git status -s --ignore-submodules=dirty&quot;); });&#xA;-}&#xA;-&#xA;-void initSubmodule()&#xA;-{&#xA;-&#x9;auto&amp; submoduleCmd(m.create({&quot;sub&quot;, &quot;submodule&quot;}));&#xA;-&#x9;auto&amp; arg(submoduleCmd.createArg&lt;string>(&quot;submodule action&quot;));&#xA;-&#x9;submoduleCmd.setFunc([&amp;]&#xA;-&#x9;{&#xA;-&#x9;&#x9;if(arg.get() == &quot;push&quot;) runCommandInRepos(&quot;git commit -am 'automated submodule update'; git push&quot;);&#xA;-&#x9;&#x9;else if(arg.get() == &quot;pull&quot;) runCommandInRepos(&quot;git submodule foreach git stash; git submodule foreach git pull origin master --recurse-submodules&quot;);&#xA;-&#x9;&#x9;else if(arg.get() == &quot;au&quot;)&#xA;-&#x9;&#x9;{&#xA;-&#x9;&#x9;&#x9;runCommandInRepos(&quot;git submodule foreach git stash; git submodule foreach git pull origin master --recurse-submodules&quot;);&#xA;-&#x9;&#x9;&#x9;runCommandInRepos(&quot;git commit -am 'automated submodule update'; git push&quot;);&#xA;-&#x9;&#x9;&#x9;runCommandInRepos(&quot;git submodule update&quot;);&#xA;-&#x9;&#x9;}&#xA;-&#x9;});&#xA;-}&#xA;-&#xA;-void initGitg()&#xA;-{&#xA;-&#x9;m.create({&quot;gitg&quot;}).setFunc([&amp;]{ runCommandInRepos(&quot;gitg&amp;&quot;); });&#xA;-}&#xA;-&#xA;-void initCommands() { initHelp(); initPush(); initPull(); initStatus(); initSubmodule(); initGitg(); }&#xA;-&#xA;-int main(int argc, char* argv[])&#xA;-{&#xA;-&#x9;for(auto&amp; cf : getScan&lt;Mode::Single, Type::Folder>(&quot;./&quot;)) if(exists(cf + &quot;/.git/&quot;)) repoFolders.push_back(cf);&#xA;-&#xA;-&#x9;initCommands();&#xA;-&#xA;-&#x9;vector&lt;string> args;&#xA;-&#x9;for(int i{1}; i &lt; argc; ++i) args.push_back(toStr(argv[i]));&#xA;-&#xA;-&#x9;try{ m.parseCommandLine(args); }&#xA;-&#x9;catch(runtime_error mException) { log(mException.what()); return 1; }&#xA;-&#xA;-&#x9;return 0;&#xA;-}&#xA;-&#xA;" file="/0/@files.7" revision="/0/@revisions.13"/>
  <MG:Patch patch="--- /dev/null&#xA;+++ b/src/git-ws/CommandLine/ArgBase.cpp&#xA;@@ -0,0 +1,12 @@&#xA;+#include &quot;git-ws/CommandLine/ArgBase.h&quot;&#xA;+&#xA;+using namespace std;&#xA;+&#xA;+namespace ssvcl&#xA;+{&#xA;+&#x9;ArgBase::ArgBase(const string&amp; mDescription) : description{mDescription} { }&#xA;+&#x9;ArgBase::~ArgBase() { }&#xA;+&#x9;const string&amp; ArgBase::getDescription() { return description; }&#xA;+&#x9;string ArgBase::getArgString() { return &quot;(&quot; + description + &quot;)&quot;; }&#xA;+}&#xA;+&#xA;" file="/0/@files.21" revision="/0/@revisions.13"/>
  <MG:Patch patch="--- /dev/null&#xA;+++ b/src/git-ws/CommandLine/Cmd.cpp&#xA;@@ -0,0 +1,69 @@&#xA;+#include &lt;SSVUtils/SSVUtils.h>&#xA;+#include &quot;git-ws/CommandLine/ArgBase.h&quot;&#xA;+#include &quot;git-ws/CommandLine/Arg.h&quot;&#xA;+#include &quot;git-ws/CommandLine/Flag.h&quot;&#xA;+#include &quot;git-ws/CommandLine/Cmd.h&quot;&#xA;+&#xA;+using namespace std;&#xA;+using namespace ssvu;&#xA;+&#xA;+namespace ssvcl&#xA;+{&#xA;+&#x9;Cmd::Cmd(initializer_list&lt;string> mNames) : names{mNames} { }&#xA;+&#x9;Cmd::~Cmd() { for(const auto&amp; a : args) delete a; for(const auto&amp; f : flags) delete f; }&#xA;+&#xA;+&#x9;Flag&amp; Cmd::findFlag(const string&amp; mName)&#xA;+&#x9;{&#xA;+&#x9;&#x9;for(const auto&amp; f : flags) if(f->hasName(mName)) return *f;&#xA;+&#x9;&#x9;throw runtime_error(&quot;No flag with name '&quot; + mName + &quot;' in command &quot; + getNamesString());&#xA;+&#x9;}&#xA;+&#xA;+&#x9;void Cmd::setArgValue(unsigned int mIndex, const string&amp; mValue) { args[mIndex]->set(mValue); }&#xA;+&#x9;unsigned int Cmd::getArgCount() { return args.size(); }&#xA;+&#xA;+&#x9;Flag&amp;Cmd::createFlag(const string&amp; mShortName, const string&amp; mLongName) { auto result(new Flag{mShortName, mLongName}); flags.push_back(result); return *result; }&#xA;+&#x9;unsigned int Cmd::getFlagCount() { return flags.size(); }&#xA;+&#x9;bool Cmd::isFlagActive(unsigned int mIndex) { return flags[mIndex]->isActive(); }&#xA;+&#x9;void Cmd::activateFlag(const string&amp; mName) { findFlag(mName).setActive(true); }&#xA;+&#xA;+&#x9;bool Cmd::hasName(const string&amp; mName) { return contains(names, mName); }&#xA;+&#xA;+&#x9;void Cmd::execute() { func(); }&#xA;+&#x9;void Cmd::setFunc(function&lt;void ()> mFunc) { func = mFunc; }&#xA;+&#xA;+&#x9;const vector&lt;string>&amp;Cmd::getNames() { return names; }&#xA;+&#x9;const vector&lt;ArgBase*>&amp;Cmd::getArgs() { return args; }&#xA;+&#x9;const vector&lt;Flag*>&amp;Cmd::getFlags() { return flags; }&#xA;+&#xA;+&#x9;string Cmd::getNamesString()&#xA;+&#x9;{&#xA;+&#x9;&#x9;string result{&quot;&lt;&quot;};&#xA;+&#x9;&#x9;for(unsigned int i{0}; i &lt; names.size(); ++i)&#xA;+&#x9;&#x9;{&#xA;+&#x9;&#x9;&#x9;result.append(names[i]);&#xA;+&#x9;&#x9;&#x9;if(i &lt; names.size() - 1) result.append(&quot; || &quot;);&#xA;+&#x9;&#x9;}&#xA;+&#x9;&#x9;result.append(&quot;>&quot;);&#xA;+&#x9;&#x9;return result;&#xA;+&#x9;}&#xA;+&#x9;string Cmd::getArgsString()&#xA;+&#x9;{&#xA;+&#x9;&#x9;string result;&#xA;+&#x9;&#x9;for(unsigned int i{0}; i &lt; args.size(); ++i)&#xA;+&#x9;&#x9;{&#xA;+&#x9;&#x9;&#x9;result.append(args[i]->getArgString());&#xA;+&#x9;&#x9;&#x9;if(i &lt; args.size() - 1) result.append(&quot; &quot;);&#xA;+&#x9;&#x9;}&#xA;+&#x9;&#x9;return result;&#xA;+&#x9;}&#xA;+&#x9;string Cmd::getFlagsString()&#xA;+&#x9;{&#xA;+&#x9;&#x9;string result;&#xA;+&#x9;&#x9;for(unsigned int i{0}; i &lt; flags.size(); ++i)&#xA;+&#x9;&#x9;{&#xA;+&#x9;&#x9;&#x9;result.append(flags[i]->getFlagString());&#xA;+&#x9;&#x9;&#x9;if(i &lt; flags.size() - 1) result.append(&quot; &quot;);&#xA;+&#x9;&#x9;}&#xA;+&#x9;&#x9;return result;&#xA;+&#x9;}&#xA;+}&#xA;" file="/0/@files.22" revision="/0/@revisions.13"/>
  <MG:Patch patch="--- /dev/null&#xA;+++ b/src/git-ws/CommandLine/CmdLine.cpp&#xA;@@ -0,0 +1,35 @@&#xA;+#include &lt;SSVUtils/SSVUtils.h>&#xA;+#include &quot;git-ws/CommandLine/Cmd.h&quot;&#xA;+#include &quot;git-ws/CommandLine/Flag.h&quot;&#xA;+#include &quot;git-ws/CommandLine/CmdLine.h&quot;&#xA;+&#xA;+using namespace std;&#xA;+using namespace ssvu;&#xA;+&#xA;+namespace ssvcl&#xA;+{&#xA;+&#x9;Cmd&amp; CmdLine::findCommand(const string&amp; mName)&#xA;+&#x9;{&#xA;+&#x9;&#x9;for(const auto&amp; c : commands) if(c->hasName(mName)) return *c;&#xA;+&#x9;&#x9;throw runtime_error(&quot;No command with name &lt;&quot; + mName + &quot;>&quot;);&#xA;+&#x9;}&#xA;+&#x9;Cmd&amp; CmdLine::create(initializer_list&lt;string> mNames) { auto result(new Cmd{mNames}); commands.push_back(result); return *result; }&#xA;+&#x9;void CmdLine::parseCommandLine(const vector&lt;string>&amp; mArgs)&#xA;+&#x9;{&#xA;+&#x9;&#x9;const string&amp; cmdName{mArgs[0]};&#xA;+&#x9;&#x9;Cmd&amp; cmd{findCommand(cmdName)};&#xA;+&#xA;+&#x9;&#x9;vector&lt;string> cArgs, cFlags;&#xA;+&#x9;&#x9;for(unsigned int i{1}; i &lt; mArgs.size(); ++i)&#xA;+&#x9;&#x9;{&#xA;+&#x9;&#x9;&#x9;const string&amp; s{mArgs[i]};&#xA;+&#x9;&#x9;&#x9;(startsWith(s, flagPrefixShort) || startsWith(s, flagPrefixLong)) ? cFlags.push_back(s) : cArgs.push_back(s);&#xA;+&#x9;&#x9;}&#xA;+&#xA;+&#x9;&#x9;if(cArgs.size() != cmd.getArgCount()) throw runtime_error(&quot;Incorrect number of arguments for command &quot; + cmd.getNamesString() + &quot; , correct number is '&quot; + ssvu::toStr(cmd.getArgCount()) + &quot;'&quot;);&#xA;+&#xA;+&#x9;&#x9;for(unsigned int i{0}; i &lt; cArgs.size(); ++i) cmd.setArgValue(i, cArgs[i]);&#xA;+&#x9;&#x9;for(const auto&amp; f : cFlags) cmd.activateFlag(f);&#xA;+&#x9;&#x9;cmd.execute();&#xA;+&#x9;}&#xA;+}&#xA;" file="/0/@files.23" revision="/0/@revisions.13"/>
  <MG:Patch patch="--- /dev/null&#xA;+++ b/src/git-ws/CommandLine/Flag.cpp&#xA;@@ -0,0 +1,19 @@&#xA;+#include &quot;git-ws/CommandLine/Flag.h&quot;&#xA;+&#xA;+using namespace std;&#xA;+&#xA;+namespace ssvcl&#xA;+{&#xA;+&#x9;Flag::Flag(const string&amp; mShortName, const string&amp; mLongName) : shortName{mShortName}, longName{mLongName} { }&#xA;+&#xA;+&#x9;void Flag::setActive(bool mActive) { active = mActive; }&#xA;+&#x9;bool Flag::isActive() { return active; }&#xA;+&#x9;bool Flag::hasName(const string&amp; mName) { return mName == flagPrefixShort + shortName || mName == flagPrefixLong + longName; }&#xA;+&#xA;+&#x9;const string&amp;Flag::getShortName() { return shortName; }&#xA;+&#x9;const string&amp;Flag::getLongName() { return longName; }&#xA;+&#xA;+&#x9;string Flag::getShortNameWithPrefix() { return flagPrefixShort + shortName; }&#xA;+&#x9;string Flag::getLongNameWithPrefix() { return flagPrefixLong + longName; }&#xA;+&#x9;string Flag::getFlagString() { return &quot;[&quot; + getShortNameWithPrefix() + &quot; || &quot; + getLongNameWithPrefix() + &quot;]&quot;; }&#xA;+}&#xA;" file="/0/@files.24" revision="/0/@revisions.13"/>
  <MG:Patch patch="--- /dev/null&#xA;+++ b/src/git-ws/main.cpp&#xA;@@ -0,0 +1,107 @@&#xA;+#include &lt;iostream>&#xA;+#include &lt;string>&#xA;+#include &lt;vector>&#xA;+#include &lt;functional>&#xA;+#include &lt;stdexcept>&#xA;+#include &lt;SSVUtils/SSVUtils.h>&#xA;+#include &quot;git-ws/CommandLine/Parser.h&quot;&#xA;+#include &quot;git-ws/CommandLine/ArgBase.h&quot;&#xA;+#include &quot;git-ws/CommandLine/Arg.h&quot;&#xA;+#include &quot;git-ws/CommandLine/Flag.h&quot;&#xA;+#include &quot;git-ws/CommandLine/Cmd.h&quot;&#xA;+#include &quot;git-ws/CommandLine/CmdLine.h&quot;&#xA;+&#xA;+using namespace std;&#xA;+using namespace ssvu;&#xA;+using namespace ssvu::FileSystem;&#xA;+using namespace ssvcl;&#xA;+&#xA;+vector&lt;string> repoFolders;&#xA;+CmdLine m;&#xA;+&#xA;+void runCommandInRepos(const string&amp; mCommand)&#xA;+{&#xA;+&#x9;for(const auto&amp; f : repoFolders)&#xA;+&#x9;{&#xA;+&#x9;&#x9;log(&quot;&#x9;&quot; + f);&#xA;+&#x9;&#x9;system(string{&quot;(cd &quot; + f + &quot;;&quot; + mCommand + &quot;)&quot;}.c_str());&#xA;+&#x9;&#x9;log(&quot;&quot;);&#xA;+&#x9;}&#xA;+}&#xA;+&#xA;+void initHelp()&#xA;+{&#xA;+&#x9;auto&amp; helpCommand(m.create({&quot;?&quot;, &quot;help&quot;}));&#xA;+&#x9;auto&amp; argCommandName(helpCommand.createArg&lt;string>(&quot;command name&quot;));&#xA;+&#x9;helpCommand.setFunc([&amp;]&#xA;+&#x9;{&#xA;+&#x9;&#x9;auto&amp; command(m.findCommand(argCommandName.get()));&#xA;+&#x9;&#x9;log(&quot;Command &quot; + command.getNamesString() + &quot; usage:&quot;);&#xA;+&#x9;&#x9;log(command.getNamesString() + &quot; &quot; + command.getArgsString() + &quot; &quot; + command.getFlagsString());&#xA;+&#x9;});&#xA;+}&#xA;+&#xA;+void initPush()&#xA;+{&#xA;+&#x9;auto&amp; pushCmd(m.create({&quot;push&quot;}));&#xA;+&#x9;auto&amp; forceFlag(pushCmd.createFlag(&quot;f&quot;, &quot;force&quot;));&#xA;+&#x9;pushCmd.setFunc([&amp;]&#xA;+&#x9;{&#xA;+&#x9;&#x9;runCommandInRepos(forceFlag.isActive() ? &quot;git push -f&quot; : &quot;git push&quot;);&#xA;+&#x9;});&#xA;+}&#xA;+&#xA;+void initPull()&#xA;+{&#xA;+&#x9;auto&amp; pullCmd(m.create({&quot;pull&quot;}));&#xA;+&#x9;auto&amp; stashFlag(pullCmd.createFlag(&quot;s&quot;, &quot;stash&quot;));&#xA;+&#x9;pullCmd.setFunc([&amp;]&#xA;+&#x9;{&#xA;+&#x9;&#x9;runCommandInRepos(stashFlag.isActive() ? &quot;git stash; git pull&quot; : &quot;git pull&quot;);&#xA;+&#x9;});&#xA;+}&#xA;+&#xA;+void initStatus()&#xA;+{&#xA;+&#x9;m.create({&quot;status&quot;}).setFunc([&amp;]{ runCommandInRepos(&quot;git status -s --ignore-submodules=dirty&quot;); });&#xA;+}&#xA;+&#xA;+void initSubmodule()&#xA;+{&#xA;+&#x9;auto&amp; submoduleCmd(m.create({&quot;sub&quot;, &quot;submodule&quot;}));&#xA;+&#x9;auto&amp; arg(submoduleCmd.createArg&lt;string>(&quot;submodule action&quot;));&#xA;+&#x9;submoduleCmd.setFunc([&amp;]&#xA;+&#x9;{&#xA;+&#x9;&#x9;if(arg.get() == &quot;push&quot;) runCommandInRepos(&quot;git commit -am 'automated submodule update'; git push&quot;);&#xA;+&#x9;&#x9;else if(arg.get() == &quot;pull&quot;) runCommandInRepos(&quot;git submodule foreach git stash; git submodule foreach git pull origin master --recurse-submodules&quot;);&#xA;+&#x9;&#x9;else if(arg.get() == &quot;au&quot;)&#xA;+&#x9;&#x9;{&#xA;+&#x9;&#x9;&#x9;runCommandInRepos(&quot;git submodule foreach git stash; git submodule foreach git pull origin master --recurse-submodules&quot;);&#xA;+&#x9;&#x9;&#x9;runCommandInRepos(&quot;git commit -am 'automated submodule update'; git push&quot;);&#xA;+&#x9;&#x9;&#x9;runCommandInRepos(&quot;git submodule update&quot;);&#xA;+&#x9;&#x9;}&#xA;+&#x9;});&#xA;+}&#xA;+&#xA;+void initGitg()&#xA;+{&#xA;+&#x9;m.create({&quot;gitg&quot;}).setFunc([&amp;]{ runCommandInRepos(&quot;gitg&amp;&quot;); });&#xA;+}&#xA;+&#xA;+void initCommands() { initHelp(); initPush(); initPull(); initStatus(); initSubmodule(); initGitg(); }&#xA;+&#xA;+int main(int argc, char* argv[])&#xA;+{&#xA;+&#x9;for(auto&amp; cf : getScan&lt;Mode::Single, Type::Folder>(&quot;./&quot;)) if(exists(cf + &quot;/.git/&quot;)) repoFolders.push_back(cf);&#xA;+&#xA;+&#x9;initCommands();&#xA;+&#xA;+&#x9;vector&lt;string> args;&#xA;+&#x9;for(int i{1}; i &lt; argc; ++i) args.push_back(toStr(argv[i]));&#xA;+&#xA;+&#x9;try{ m.parseCommandLine(args); }&#xA;+&#x9;catch(runtime_error mException) { log(mException.what()); return 1; }&#xA;+&#xA;+&#x9;return 0;&#xA;+}&#xA;+&#xA;" file="/0/@files.25" revision="/0/@revisions.13"/>
  <MG:Patch patch="--- a/extlibs/SSVUtilsJson&#xA;+++ b/extlibs/SSVUtilsJson&#xA;@@ -1 +1 @@&#xA;-Subproject commit 3457ba6b6eee57e4885563e5df8e94662e27f35a&#xA;+Subproject commit b47ae77c70a08e4f21fc4e22d8a72ae4d0301269&#xA;" file="/0/@files.6" revision="/0/@revisions.28"/>
  <MG:Patch patch="--- a/extlibs/SSVUtils&#xA;+++ b/extlibs/SSVUtils&#xA;@@ -1 +1 @@&#xA;-Subproject commit 7994fbbea674c7671f71bacca9d89e39d3bee6bb&#xA;+Subproject commit 1877801d30dd59fafc40656d8b0af4d294f06bd4&#xA;" file="/0/@files.5" revision="/0/@revisions.29"/>
  <MG:Patch patch="--- a/extlibs/SSVUtilsJson&#xA;+++ b/extlibs/SSVUtilsJson&#xA;@@ -1 +1 @@&#xA;-Subproject commit b47ae77c70a08e4f21fc4e22d8a72ae4d0301269&#xA;+Subproject commit 745faebdf7cdade99ccc955c45d830bacd54d673&#xA;" file="/0/@files.6" revision="/0/@revisions.29"/>
  <MG:Patch patch="--- a/extlibs/SSVUtils&#xA;+++ b/extlibs/SSVUtils&#xA;@@ -1 +1 @@&#xA;-Subproject commit 1877801d30dd59fafc40656d8b0af4d294f06bd4&#xA;+Subproject commit 360de399f10e87e9789493c3e8aef1b3ab1b106e&#xA;" file="/0/@files.5" revision="/0/@revisions.32"/>
  <MG:Patch patch="--- a/extlibs/SSVUtilsJson&#xA;+++ b/extlibs/SSVUtilsJson&#xA;@@ -1 +1 @@&#xA;-Subproject commit d9c48b13c1846bead8301bd603745dac02b0bd32&#xA;+Subproject commit edaf679644e5d279f6c731512c06e108fbf29c05&#xA;" file="/0/@files.6" revision="/0/@revisions.32"/>
  <MG:Patch patch="--- a/include/git-ws/CommandLine/ArgBase.h&#xA;+++ b/include/git-ws/CommandLine/ArgBase.h&#xA;@@ -19,8 +19,8 @@ namespace ssvcl&#xA; &#x9;&#x9;&#x9;virtual ~ArgBase();&#xA; &#xA; &#x9;&#x9;&#x9;virtual void set(const std::string&amp; mString) = 0;&#xA;-&#x9;&#x9;&#x9;const std::string&amp; getDescription();&#xA;-&#x9;&#x9;&#x9;std::string getArgString();&#xA;+&#x9;&#x9;&#x9;const std::string&amp; getDescription() const;&#xA;+&#x9;&#x9;&#x9;std::string getArgString() const;&#xA; &#x9;};&#xA; }&#xA;" file="/0/@files.13" revision="/0/@revisions.33"/>
  <MG:Patch patch="--- a/src/git-ws/main.cpp&#xA;+++ b/src/git-ws/main.cpp&#xA;@@ -65,7 +65,13 @@ struct GitWs&#xA; &#x9;{&#xA; &#x9;&#x9;auto&amp; cmd(cmdLine.create({&quot;pull&quot;}));&#xA; &#x9;&#x9;auto&amp; flagStash(cmd.createFlag(&quot;s&quot;, &quot;stash&quot;));&#xA;-&#x9;&#x9;cmd += [&amp;]{ runShInRepos(flagStash ? &quot;git stash; git pull&quot; : &quot;git pull&quot;); };&#xA;+&#x9;&#x9;auto&amp; flagForce(cmd.createFlag(&quot;f&quot;, &quot;force-checkout&quot;));&#xA;+&#x9;&#x9;cmd += [&amp;]&#xA;+&#x9;&#x9;{ &#xA;+&#x9;&#x9;&#x9;if(flagStash) runShInRepos(&quot;git stash&quot;);&#xA;+&#x9;&#x9;&#x9;if(flagForce) runShInRepos(&quot;git checkout -f&quot;);&#xA;+&#x9;&#x9;&#x9;runShInRepos(&quot;git pull&quot;); &#xA;+&#x9;&#x9;};&#xA; &#x9;}&#xA; &#x9;void initCmdSubmodule()&#xA; &#x9;{&#xA;@@ -79,7 +85,6 @@ struct GitWs&#xA; &#x9;&#x9;&#x9;{&#xA; &#x9;&#x9;&#x9;&#x9;runShInRepos(&quot;git submodule foreach git stash; git submodule foreach git pull origin master --recurse-submodules&quot;);&#xA; &#x9;&#x9;&#x9;&#x9;runShInRepos(&quot;git commit -am 'automated submodule update'; git push&quot;);&#xA;-&#x9;&#x9;&#x9;&#x9;//runShInRepos(&quot;git submodule update&quot;);&#xA; &#x9;&#x9;&#x9;}&#xA; &#x9;&#x9;};&#xA; &#x9;}&#xA;" file="/0/@files.25" revision="/0/@revisions.31"/>
  <MG:Patch patch="--- a/extlibs/SSVUtilsJson&#xA;+++ b/extlibs/SSVUtilsJson&#xA;@@ -1 +1 @@&#xA;-Subproject commit 745faebdf7cdade99ccc955c45d830bacd54d673&#xA;+Subproject commit d9c48b13c1846bead8301bd603745dac02b0bd32&#xA;" file="/0/@files.6" revision="/0/@revisions.30"/>
  <MG:Patch patch="--- /dev/null&#xA;+++ b/init-repository.sh&#xA;@@ -0,0 +1,12 @@&#xA;+#!/bin/bash&#xA;+&#xA;+# This bash script, called in a repository with submodules, inits and pulls all submodules recursively&#xA;+&#xA;+echo &quot;Initializing all submodules...&quot;&#xA;+git submodule update --init --recursive&#xA;+&#xA;+echo &quot;Stashing all submodule changes...&quot;&#xA;+git submodule foreach --recursive git stash&#xA;+&#xA;+echo &quot;Recursively pulling all submodules...&quot;&#xA;+git submodule foreach --recursive git pull origin master --recurse-submodules&#xA;\ No newline at end of file&#xA;" file="/0/@files.29" revision="/0/@revisions.30"/>
  <MG:Patch patch="--- a/include/git-ws/CommandLine/Arg.h&#xA;+++ b/include/git-ws/CommandLine/Arg.h&#xA;@@ -21,21 +21,6 @@ namespace ssvcl&#xA; &#x9;&#x9;&#x9;T get() const { return value; }&#xA; &#x9;&#x9;&#x9;void set(const std::string&amp; mValue) override { value = Parser&lt;T>::parse(mValue); }&#xA; &#x9;};&#xA;-&#xA;-&#x9;template&lt;typename T> class OptArg : public Arg&lt;T>&#xA;-&#x9;{&#xA;-&#x9;&#x9;private:&#xA;-&#x9;&#x9;&#x9;T defaultValue;&#xA;-&#x9;&#x9;&#x9;bool active{false};&#xA;-&#xA;-&#x9;&#x9;public:&#xA;-&#x9;&#x9;&#x9;OptArg(T mDefaultValue, const std::string&amp; mDescription) :  Arg&lt;T>{mDescription}, defaultValue{mDefaultValue} { }&#xA;-&#xA;-&#x9;&#x9;&#x9;T get() const { return active ? this->value : defaultValue; }&#xA;-&#x9;&#x9;&#x9;void set(const std::string&amp; mValue) override { Arg&lt;T>::set(mValue); active = true; }&#xA;-&#xA;-&#x9;&#x9;&#x9;operator bool() const { return active; }&#xA;-&#x9;};&#xA; }&#xA; &#xA; #endif&#xA;" file="/0/@files.12" revision="/0/@revisions.34"/>
  <MG:Patch patch="--- a/include/git-ws/CommandLine/Arg.h&#xA;+++ b/include/git-ws/CommandLine/OptArg.h&#xA;@@ -2,26 +2,14 @@&#xA; // License: Academic Free License (&quot;AFL&quot;) v. 3.0&#xA; // AFL License page: http://opensource.org/licenses/AFL-3.0&#xA; &#xA;-#ifndef GITWS_COMMANDLINE_ARG&#xA;-#define GITWS_COMMANDLINE_ARG&#xA;+#ifndef GITWS_COMMANDLINE_OPTARG&#xA;+#define GITWS_COMMANDLINE_OPTARG&#xA; &#xA; #include &lt;string>&#xA; #include &quot;git-ws/CommandLine/Parser.h&quot;&#xA; &#xA; namespace ssvcl&#xA; {&#xA;-&#x9;template&lt;typename T> class Arg : public ArgBase&#xA;-&#x9;{&#xA;-&#x9;&#x9;protected:&#xA;-&#x9;&#x9;&#x9;T value;&#xA;-&#xA;-&#x9;&#x9;public:&#xA;-&#x9;&#x9;&#x9;Arg(const std::string&amp; mDescription) : ArgBase{mDescription} { }&#xA;-&#xA;-&#x9;&#x9;&#x9;T get() const { return value; }&#xA;-&#x9;&#x9;&#x9;void set(const std::string&amp; mValue) override { value = Parser&lt;T>::parse(mValue); }&#xA;-&#x9;};&#xA;-&#xA; &#x9;template&lt;typename T> class OptArg : public Arg&lt;T>&#xA; &#x9;{&#xA; &#x9;&#x9;private:&#xA;" file="/0/@files.30" revision="/0/@revisions.34"/>
  <MG:Patch patch="--- a/extlibs/SSVUtils&#xA;+++ b/extlibs/SSVUtils&#xA;@@ -1 +1 @@&#xA;-Subproject commit 360de399f10e87e9789493c3e8aef1b3ab1b106e&#xA;+Subproject commit e90a5e80bb2bce7250539cb6e4f4509a129e0591&#xA;" file="/0/@files.5" revision="/0/@revisions.37"/>
  <MG:Patch patch="--- a/extlibs/SSVUtilsJson&#xA;+++ b/extlibs/SSVUtilsJson&#xA;@@ -1 +1 @@&#xA;-Subproject commit edaf679644e5d279f6c731512c06e108fbf29c05&#xA;+Subproject commit 3ce85741efc92311c485ce16c01164e86cae898f&#xA;" file="/0/@files.6" revision="/0/@revisions.37"/>
  <MG:Patch patch="--- a/extlibs/SSVUtilsJson&#xA;+++ b/extlibs/SSVUtilsJson&#xA;@@ -1 +1 @@&#xA;-Subproject commit 3ce85741efc92311c485ce16c01164e86cae898f&#xA;+Subproject commit c60bdd82ddb46577d8fe189673ca09d1921f4f3f&#xA;" file="/0/@files.6" revision="/0/@revisions.38"/>
  <MG:Patch patch="--- a/src/git-ws/main.cpp&#xA;+++ b/src/git-ws/main.cpp&#xA;@@ -47,10 +47,23 @@ struct GitWs&#xA; &#x9;void initCmdHelp()&#xA; &#x9;{&#xA; &#x9;&#x9;auto&amp; cmd(cmdLine.create({&quot;?&quot;, &quot;help&quot;}));&#xA;-&#x9;&#x9;auto&amp; arg(cmd.createArg&lt;string>(&quot;command name&quot;));&#xA;+&#x9;&#x9;auto&amp; optArg(cmd.createOptArg&lt;string>(&quot;&quot;, &quot;command name&quot;));&#xA; &#x9;&#x9;cmd += [&amp;]&#xA; &#x9;&#x9;{&#xA;-&#x9;&#x9;&#x9;auto&amp; c(cmdLine.findCommand(arg.get()));&#xA;+&#x9;&#x9;&#x9;if(!optArg)&#xA;+&#x9;&#x9;&#x9;{&#xA;+&#x9;&#x9;&#x9;&#x9;log(&quot;Git-ws help&quot;);&#xA;+&#x9;&#x9;&#x9;&#x9;log(&quot;&quot;);&#xA;+&#xA;+&#x9;&#x9;&#x9;&#x9;for(const auto&amp; c : cmdLine.getCmds())&#xA;+&#x9;&#x9;&#x9;&#x9;{&#xA;+&#x9;&#x9;&#x9;&#x9;&#x9;log(c->getNamesString(), &quot;Command help&quot;);&#xA;+&#x9;&#x9;&#x9;&#x9;&#x9;log(c->getNamesString() + &quot; &quot; + c->getArgsString() + &quot; &quot; + c->getOptArgsString() + &quot; &quot; + c->getFlagsString());&#xA;+&#x9;&#x9;&#x9;&#x9;&#x9;log(&quot;&quot;);&#xA;+&#x9;&#x9;&#x9;&#x9;}&#xA;+&#x9;&#x9;&#x9;}&#xA;+&#xA;+&#x9;&#x9;&#x9;auto&amp; c(cmdLine.findCmd(optArg.get()));&#xA; &#x9;&#x9;&#x9;log(c.getNamesString(), &quot;Command help&quot;);&#xA; &#x9;&#x9;&#x9;log(c.getNamesString() + &quot; &quot; + c.getArgsString() + &quot; &quot; + c.getOptArgsString() + &quot; &quot; + c.getFlagsString());&#xA; &#x9;&#x9;};&#xA;@@ -113,7 +126,7 @@ int main(int argc, char* argv[])&#xA; &#x9;vector&lt;string> args;&#xA; &#x9;for(int i{1}; i &lt; argc; ++i) args.push_back(argv[i]);&#xA; &#xA;-&#x9;try{ GitWs{}.cmdLine.parseCommandLine(args); }&#xA;+&#x9;try{ GitWs{}.cmdLine.parseCmdLine(args); }&#xA; &#x9;catch(runtime_error mException) { log(mException.what()); return 1; }&#xA; &#xA; &#x9;return 0;&#xA;" file="/0/@files.25" revision="/0/@revisions.36"/>
  <MG:Patch patch="--- a/include/git-ws/CommandLine/Cmd.h&#xA;+++ b/include/git-ws/CommandLine/Cmd.h&#xA;@@ -28,35 +28,35 @@ namespace ssvcl&#xA; &#x9;&#x9;&#x9;Flag&amp; findFlag(const std::string&amp; mName);&#xA; &#xA; &#x9;&#x9;public:&#xA;-&#x9;&#x9;&#x9;Cmd(std::initializer_list&lt;std::string> mNames);&#xA;+&#x9;&#x9;&#x9;Cmd(const std::initializer_list&lt;std::string>&amp; mNames);&#xA; &#x9;&#x9;&#x9;~Cmd();&#xA; &#xA;-&#x9;&#x9;&#x9;template&lt;typename T> Arg&lt;T>&amp; createArg(const std::string&amp; mDescription) { auto result(new Arg&lt;T>(mDescription)); args.push_back(result); return *result; }&#xA;-&#x9;&#x9;&#x9;void setArgValue(unsigned int mIndex, const std::string&amp; mValue);&#xA;-&#x9;&#x9;&#x9;unsigned int getArgCount();&#xA;+&#x9;&#x9;&#x9;Cmd&amp; operator+=(std::function&lt;void()> mFunc);&#xA;+&#x9;&#x9;&#x9;Cmd&amp; operator()();&#xA; &#xA;+&#x9;&#x9;&#x9;template&lt;typename T> Arg&lt;T>&amp; createArg(const std::string&amp; mDescription) { auto result(new Arg&lt;T>(mDescription)); args.push_back(result); return *result; }&#xA; &#x9;&#x9;&#x9;template&lt;typename T> OptArg&lt;T>&amp; createOptArg(T mDefaultValue, const std::string&amp; mDescription) { auto result(new OptArg&lt;T>(mDefaultValue, mDescription)); optArgs.push_back(result); return *result; }&#xA;+&#x9;&#x9;&#x9;Flag&amp; createFlag(const std::string&amp; mShortName, const std::string&amp; mLongName);&#xA;+&#xA;+&#x9;&#x9;&#x9;void setArgValue(unsigned int mIndex, const std::string&amp; mValue);&#xA; &#x9;&#x9;&#x9;void setOptArgValue(unsigned int mIndex, const std::string&amp; mValue);&#xA;-&#x9;&#x9;&#x9;unsigned int getOptArgCount();&#xA; &#xA;-&#x9;&#x9;&#x9;Flag&amp; createFlag(const std::string&amp; mShortName, const std::string&amp; mLongName);&#xA;-&#x9;&#x9;&#x9;bool isFlagActive(unsigned int mIndex);&#xA;-&#x9;&#x9;&#x9;unsigned int getFlagCount();&#xA; &#x9;&#x9;&#x9;void activateFlag(const std::string&amp; mName);&#xA; &#xA;-&#x9;&#x9;&#x9;bool hasName(const std::string&amp; mName);&#xA;-&#x9;&#x9;&#x9;void execute();&#xA;-&#xA;-&#x9;&#x9;&#x9;Cmd&amp; operator+=(std::function&lt;void()> mFunc);&#xA;+&#x9;&#x9;&#x9;bool hasName(const std::string&amp; mName) const;&#xA;+&#x9;&#x9;&#x9;bool isFlagActive(unsigned int mIndex) const;&#xA; &#xA;-&#x9;&#x9;&#x9;const std::vector&lt;std::string>&amp; getNames();&#xA;-&#x9;&#x9;&#x9;const std::vector&lt;ArgBase*>&amp; getArgs();&#xA;-&#x9;&#x9;&#x9;const std::vector&lt;Flag*>&amp; getFlags();&#xA;+&#x9;&#x9;&#x9;unsigned int getArgCount() const;&#xA;+&#x9;&#x9;&#x9;unsigned int getOptArgCount() const;&#xA;+&#x9;&#x9;&#x9;unsigned int getFlagCount() const;&#xA;+&#x9;&#x9;&#x9;const std::vector&lt;std::string>&amp; getNames() const;&#xA;+&#x9;&#x9;&#x9;const std::vector&lt;ArgBase*>&amp; getArgs() const;&#xA;+&#x9;&#x9;&#x9;const std::vector&lt;Flag*>&amp; getFlags() const;&#xA; &#xA;-&#x9;&#x9;&#x9;std::string getNamesString();&#xA;-&#x9;&#x9;&#x9;std::string getArgsString();&#xA;-&#x9;&#x9;&#x9;std::string getOptArgsString();&#xA;-&#x9;&#x9;&#x9;std::string getFlagsString();&#xA;+&#x9;&#x9;&#x9;std::string getNamesString() const;&#xA;+&#x9;&#x9;&#x9;std::string getArgsString() const;&#xA;+&#x9;&#x9;&#x9;std::string getOptArgsString() const;&#xA;+&#x9;&#x9;&#x9;std::string getFlagsString() const;&#xA; &#x9;};&#xA; }&#xA; &#xA;" file="/0/@files.14" revision="/0/@revisions.35"/>
  <MG:Patch patch="--- a/include/git-ws/CommandLine/CmdLine.h&#xA;+++ b/include/git-ws/CommandLine/CmdLine.h&#xA;@@ -15,12 +15,13 @@ namespace ssvcl&#xA; &#x9;class CmdLine&#xA; &#x9;{&#xA; &#x9;&#x9;private:&#xA;-&#x9;&#x9;&#x9;std::vector&lt;Cmd*> commands;&#xA;+&#x9;&#x9;&#x9;std::vector&lt;Cmd*> cmds;&#xA; &#xA; &#x9;&#x9;public:&#xA;-&#x9;&#x9;&#x9;Cmd&amp; findCommand(const std::string&amp; mName);&#xA;-&#x9;&#x9;&#x9;Cmd&amp; create(std::initializer_list&lt;std::string> mNames);&#xA;-&#x9;&#x9;&#x9;void parseCommandLine(const std::vector&lt;std::string>&amp; mArgs);&#xA;+&#x9;&#x9;&#x9;Cmd&amp; findCmd(const std::string&amp; mName) const;&#xA;+&#x9;&#x9;&#x9;Cmd&amp; create(const std::initializer_list&lt;std::string>&amp; mNames);&#xA;+&#x9;&#x9;&#x9;void parseCmdLine(const std::vector&lt;std::string>&amp; mArgs);&#xA;+&#x9;&#x9;&#x9;const std::vector&lt;Cmd*>&amp; getCmds() const;&#xA; &#x9;};&#xA; }&#xA; &#xA;" file="/0/@files.15" revision="/0/@revisions.35"/>
  <MG:Patch patch="--- a/include/git-ws/CommandLine/CommandLine.h&#xA;+++ b/include/git-ws/CommandLine/CommandLine.h&#xA;@@ -8,6 +8,7 @@&#xA; #include &quot;git-ws/CommandLine/Parser.h&quot;&#xA; #include &quot;git-ws/CommandLine/ArgBase.h&quot;&#xA; #include &quot;git-ws/CommandLine/Arg.h&quot;&#xA;+#include &quot;git-ws/CommandLine/OptArg.h&quot;&#xA; #include &quot;git-ws/CommandLine/Flag.h&quot;&#xA; #include &quot;git-ws/CommandLine/Cmd.h&quot;&#xA; #include &quot;git-ws/CommandLine/CmdLine.h&quot;&#xA;" file="/0/@files.26" revision="/0/@revisions.35"/>
  <MG:Patch patch="--- a/include/git-ws/CommandLine/Flag.h&#xA;+++ b/include/git-ws/CommandLine/Flag.h&#xA;@@ -24,13 +24,13 @@ namespace ssvcl&#xA; &#x9;&#x9;&#x9;Flag&amp; operator=(bool mActive);&#xA; &#x9;&#x9;&#x9;operator bool() const;&#xA; &#xA;-&#x9;&#x9;&#x9;bool hasName(const std::string&amp; mName);&#xA;+&#x9;&#x9;&#x9;bool hasName(const std::string&amp; mName) const;&#xA; &#xA;-&#x9;&#x9;&#x9;const std::string&amp; getShortName();&#xA;-&#x9;&#x9;&#x9;const std::string&amp; getLongName();&#xA;-&#x9;&#x9;&#x9;std::string getShortNameWithPrefix();&#xA;-&#x9;&#x9;&#x9;std::string getLongNameWithPrefix();&#xA;-&#x9;&#x9;&#x9;std::string getFlagString();&#xA;+&#x9;&#x9;&#x9;const std::string&amp; getShortName() const;&#xA;+&#x9;&#x9;&#x9;const std::string&amp; getLongName() const;&#xA;+&#x9;&#x9;&#x9;std::string getShortNameWithPrefix() const;&#xA;+&#x9;&#x9;&#x9;std::string getLongNameWithPrefix() const;&#xA;+&#x9;&#x9;&#x9;std::string getFlagString() const;&#xA; &#x9;};&#xA; }&#xA; &#xA;" file="/0/@files.16" revision="/0/@revisions.35"/>
  <MG:Patch patch="--- a/src/git-ws/CommandLine/ArgBase.cpp&#xA;+++ b/src/git-ws/CommandLine/ArgBase.cpp&#xA;@@ -10,7 +10,7 @@ namespace ssvcl&#xA; {&#xA; &#x9;ArgBase::ArgBase(const string&amp; mDescription) : description{mDescription} { }&#xA; &#x9;ArgBase::~ArgBase() { }&#xA;-&#x9;const string&amp; ArgBase::getDescription() { return description; }&#xA;-&#x9;string ArgBase::getArgString() { return &quot;(&quot; + description + &quot;)&quot;; }&#xA;+&#x9;const string&amp; ArgBase::getDescription() const { return description; }&#xA;+&#x9;string ArgBase::getArgString() const { return &quot;(&quot; + description + &quot;)&quot;; }&#xA; }&#xA; &#xA;" file="/0/@files.21" revision="/0/@revisions.35"/>
  <MG:Patch patch="--- a/src/git-ws/CommandLine/Cmd.cpp&#xA;+++ b/src/git-ws/CommandLine/Cmd.cpp&#xA;@@ -13,36 +13,36 @@ using namespace ssvu;&#xA; &#xA; namespace ssvcl&#xA; {&#xA;-&#x9;Cmd::Cmd(initializer_list&lt;string> mNames) : names{mNames} { }&#xA;-&#x9;Cmd::~Cmd() { for(const auto&amp; a : args) delete a; for(const auto&amp; a : optArgs) delete a; for(const auto&amp; f : flags) delete f; }&#xA;-&#xA; &#x9;Flag&amp; Cmd::findFlag(const string&amp; mName)&#xA; &#x9;{&#xA; &#x9;&#x9;for(const auto&amp; f : flags) if(f->hasName(mName)) return *f;&#xA; &#x9;&#x9;throw runtime_error(&quot;No flag with name '&quot; + mName + &quot;' in command &quot; + getNamesString());&#xA; &#x9;}&#xA; &#xA;-&#x9;void Cmd::setArgValue(unsigned int mIndex, const string&amp; mValue) { args[mIndex]->set(mValue); }&#xA;-&#x9;unsigned int Cmd::getArgCount() { return args.size(); }&#xA;+&#x9;Cmd::Cmd(const initializer_list&lt;string>&amp; mNames) : names{mNames} { }&#xA;+&#x9;Cmd::~Cmd() { for(const auto&amp; a : args) delete a; for(const auto&amp; a : optArgs) delete a; for(const auto&amp; f : flags) delete f; }&#xA; &#xA;-&#x9;void Cmd::setOptArgValue(unsigned int mIndex, const string&amp; mValue) { optArgs[mIndex]->set(mValue); }&#xA;-&#x9;unsigned int Cmd::getOptArgCount() { return optArgs.size(); }&#xA;+&#x9;Cmd&amp; Cmd::operator()() { func(); return *this; }&#xA;+&#x9;Cmd&amp; Cmd::operator+=(std::function&lt;void()> mFunc) { func = mFunc; return *this; }&#xA; &#xA; &#x9;Flag&amp; Cmd::createFlag(const string&amp; mShortName, const string&amp; mLongName) { auto result(new Flag{mShortName, mLongName}); flags.push_back(result); return *result; }&#xA;-&#x9;unsigned int Cmd::getFlagCount() { return flags.size(); }&#xA;-&#x9;bool Cmd::isFlagActive(unsigned int mIndex) { return *flags[mIndex]; }&#xA;-&#x9;void Cmd::activateFlag(const string&amp; mName) { findFlag(mName) = true; }&#xA; &#xA;-&#x9;bool Cmd::hasName(const string&amp; mName) { return contains(names, mName); }&#xA;+&#x9;void Cmd::setArgValue(unsigned int mIndex, const string&amp; mValue)&#x9;{ args[mIndex]->set(mValue); }&#xA;+&#x9;void Cmd::setOptArgValue(unsigned int mIndex, const string&amp; mValue)&#x9;{ optArgs[mIndex]->set(mValue); }&#xA;+&#xA;+&#x9;void Cmd::activateFlag(const string&amp; mName) { findFlag(mName) = true; }&#xA; &#xA;-&#x9;void Cmd::execute() { func(); }&#xA;-&#x9;Cmd&amp; Cmd::operator+=(std::function&lt;void()> mFunc) { func = mFunc; return *this; }&#xA;+&#x9;bool Cmd::hasName(const string&amp; mName) const&#x9;&#x9;{ return contains(names, mName); }&#xA;+&#x9;bool Cmd::isFlagActive(unsigned int mIndex) const&#x9;{ return *flags[mIndex]; }&#xA; &#xA;-&#x9;const vector&lt;string>&amp; Cmd::getNames() { return names; }&#xA;-&#x9;const vector&lt;ArgBase*>&amp; Cmd::getArgs() { return args; }&#xA;-&#x9;const vector&lt;Flag*>&amp; Cmd::getFlags() { return flags; }&#xA;+&#x9;unsigned int Cmd::getArgCount() const&#x9;&#x9;&#x9;{ return args.size(); }&#xA;+&#x9;unsigned int Cmd::getOptArgCount() const&#x9;&#x9;{ return optArgs.size(); }&#xA;+&#x9;unsigned int Cmd::getFlagCount() const&#x9;&#x9;&#x9;{ return flags.size(); }&#xA;+&#x9;const vector&lt;string>&amp; Cmd::getNames() const&#x9;&#x9;{ return names; }&#xA;+&#x9;const vector&lt;ArgBase*>&amp; Cmd::getArgs() const&#x9;{ return args; }&#xA;+&#x9;const vector&lt;Flag*>&amp; Cmd::getFlags() const&#x9;&#x9;{ return flags; }&#xA; &#xA;-&#x9;string Cmd::getNamesString()&#xA;+&#x9;string Cmd::getNamesString() const&#xA; &#x9;{&#xA; &#x9;&#x9;string result{&quot;&lt;&quot;};&#xA; &#x9;&#x9;for(unsigned int i{0}; i &lt; names.size(); ++i)&#xA;@@ -53,7 +53,7 @@ namespace ssvcl&#xA; &#x9;&#x9;result.append(&quot;>&quot;);&#xA; &#x9;&#x9;return result;&#xA; &#x9;}&#xA;-&#x9;string Cmd::getArgsString()&#xA;+&#x9;string Cmd::getArgsString() const&#xA; &#x9;{&#xA; &#x9;&#x9;string result;&#xA; &#x9;&#x9;for(unsigned int i{0}; i &lt; args.size(); ++i)&#xA;@@ -63,7 +63,7 @@ namespace ssvcl&#xA; &#x9;&#x9;}&#xA; &#x9;&#x9;return result;&#xA; &#x9;}&#xA;-&#x9;string Cmd::getOptArgsString()&#xA;+&#x9;string Cmd::getOptArgsString() const&#xA; &#x9;{&#xA; &#x9;&#x9;string result;&#xA; &#x9;&#x9;for(unsigned int i{0}; i &lt; optArgs.size(); ++i)&#xA;@@ -73,7 +73,7 @@ namespace ssvcl&#xA; &#x9;&#x9;}&#xA; &#x9;&#x9;return result;&#xA; &#x9;}&#xA;-&#x9;string Cmd::getFlagsString()&#xA;+&#x9;string Cmd::getFlagsString() const&#xA; &#x9;{&#xA; &#x9;&#x9;string result;&#xA; &#x9;&#x9;for(unsigned int i{0}; i &lt; flags.size(); ++i)&#xA;" file="/0/@files.22" revision="/0/@revisions.35"/>
  <MG:Patch patch="--- a/src/git-ws/CommandLine/CmdLine.cpp&#xA;+++ b/src/git-ws/CommandLine/CmdLine.cpp&#xA;@@ -3,6 +3,7 @@&#xA; // AFL License page: http://opensource.org/licenses/AFL-3.0&#xA; &#xA; #include &lt;deque>&#xA;+#include &lt;stdexcept>&#xA; #include &lt;SSVUtils/SSVUtils.h>&#xA; #include &quot;git-ws/CommandLine/Cmd.h&quot;&#xA; #include &quot;git-ws/CommandLine/Flag.h&quot;&#xA;@@ -13,17 +14,17 @@ using namespace ssvu;&#xA; &#xA; namespace ssvcl&#xA; {&#xA;-&#x9;Cmd&amp; CmdLine::findCommand(const string&amp; mName)&#xA;+&#x9;Cmd&amp; CmdLine::findCmd(const string&amp; mName) const&#xA; &#x9;{&#xA;-&#x9;&#x9;for(const auto&amp; c : commands) if(c->hasName(mName)) return *c;&#xA;+&#x9;&#x9;for(const auto&amp; c : cmds) if(c->hasName(mName)) return *c;&#xA; &#x9;&#x9;throw runtime_error(&quot;No command with name &lt;&quot; + mName + &quot;>&quot;);&#xA; &#x9;}&#xA;-&#x9;Cmd&amp; CmdLine::create(initializer_list&lt;string> mNames) { auto result(new Cmd{mNames}); commands.push_back(result); return *result; }&#xA;-&#x9;void CmdLine::parseCommandLine(const vector&lt;string>&amp; mArgs)&#xA;+&#x9;Cmd&amp; CmdLine::create(const initializer_list&lt;string>&amp; mNames) { auto result(new Cmd{mNames}); cmds.push_back(result); return *result; }&#xA;+&#x9;void CmdLine::parseCmdLine(const vector&lt;string>&amp; mArgs)&#xA; &#x9;{&#xA; &#x9;&#x9;deque&lt;string> args{begin(mArgs), end(mArgs)};&#xA; &#xA;-&#x9;&#x9;Cmd&amp; cmd{findCommand(args.front())};&#xA;+&#x9;&#x9;Cmd&amp; cmd(findCmd(args.front()));&#xA; &#x9;&#x9;args.pop_front();&#xA; &#xA; &#x9;&#x9;// Find all flags, put them in cFlags, remove them from mArgs&#xA;@@ -59,6 +60,7 @@ namespace ssvcl&#xA; &#x9;&#x9;for(unsigned int i{0}; i &lt; cArgs.size(); ++i) cmd.setArgValue(i, cArgs[i]);&#xA; &#x9;&#x9;for(unsigned int i{0}; i &lt; cOptArgs.size(); ++i) cmd.setOptArgValue(i, cOptArgs[i]);&#xA; &#x9;&#x9;for(const auto&amp; f : cFlags) cmd.activateFlag(f);&#xA;-&#x9;&#x9;cmd.execute();&#xA;+&#x9;&#x9;cmd();&#xA; &#x9;}&#xA;+&#x9;const vector&lt;Cmd*>&amp; CmdLine::getCmds() const { return cmds; }&#xA; }&#xA;" file="/0/@files.23" revision="/0/@revisions.35"/>
  <MG:Patch patch="--- a/src/git-ws/CommandLine/Flag.cpp&#xA;+++ b/src/git-ws/CommandLine/Flag.cpp&#xA;@@ -13,12 +13,11 @@ namespace ssvcl&#xA; &#x9;Flag&amp; Flag::operator=(bool mActive) { active = mActive; return *this; }&#xA; &#x9;Flag::operator bool() const { return active; }&#xA; &#xA;-&#x9;bool Flag::hasName(const string&amp; mName) { return mName == flagPrefixShort + shortName || mName == flagPrefixLong + longName; }&#xA;+&#x9;bool Flag::hasName(const string&amp; mName) const { return mName == getShortNameWithPrefix() || mName == getLongNameWithPrefix(); }&#xA; &#xA;-&#x9;const string&amp; Flag::getShortName() { return shortName; }&#xA;-&#x9;const string&amp; Flag::getLongName() { return longName; }&#xA;-&#xA;-&#x9;string Flag::getShortNameWithPrefix() { return flagPrefixShort + shortName; }&#xA;-&#x9;string Flag::getLongNameWithPrefix() { return flagPrefixLong + longName; }&#xA;-&#x9;string Flag::getFlagString() { return &quot;[&quot; + getShortNameWithPrefix() + &quot; || &quot; + getLongNameWithPrefix() + &quot;]&quot;; }&#xA;+&#x9;const string&amp; Flag::getShortName() const&#x9;{ return shortName; }&#xA;+&#x9;const string&amp; Flag::getLongName() const&#x9;&#x9;{ return longName; }&#xA;+&#x9;string Flag::getShortNameWithPrefix() const&#x9;{ return flagPrefixShort + shortName; }&#xA;+&#x9;string Flag::getLongNameWithPrefix() const&#x9;{ return flagPrefixLong + longName; }&#xA;+&#x9;string Flag::getFlagString() const&#x9;&#x9;&#x9;{ return &quot;[&quot; + getShortNameWithPrefix() + &quot; || &quot; + getLongNameWithPrefix() + &quot;]&quot;; }&#xA; }&#xA;" file="/0/@files.24" revision="/0/@revisions.35"/>
  <MG:Patch patch="--- a/src/git-ws/main.cpp&#xA;+++ b/src/git-ws/main.cpp&#xA;@@ -151,7 +151,7 @@ struct GitWs&#xA; &#x9;&#x9;&#x9;if(exists(p + &quot;/.git/&quot;))&#xA; &#x9;&#x9;&#x9;{&#xA; &#x9;&#x9;&#x9;&#x9;repoPaths.push_back(p);&#xA;-&#x9;&#x9;&#x9;&#x9;if(!runShInPath(p, &quot;git diff-index --name-only --ignore-submodules HEAD --&quot;).empty()) { changedRepoPaths.push_back(p); log(p);}&#xA;+&#x9;&#x9;&#x9;&#x9;if(!runShInPath(p, &quot;git diff-index --name-only --ignore-submodules HEAD --&quot;).empty()) changedRepoPaths.push_back(p);&#xA; &#x9;&#x9;&#x9;}&#xA; &#x9;}&#xA; &#x9;void initCmds() { initCmdHelp(); initCmdPush(); initCmdPull(); initCmdSubmodule(); initCmdStatus(); initCmdGitg(); initCmdDo(); }&#xA;" file="/0/@files.25" revision="/0/@revisions.42"/>
  <MG:Patch patch="--- a/README.md&#xA;+++ b/README.md&#xA;@@ -3,19 +3,66 @@&#xA; Command line utility to work with multiple git repositories at once &lt;br/>&#xA; Currently intended for personal use only (use at your own risk)&#xA; &#xA;-&lt;br/>&#xA;+&#xA; &#xA; ## Usage&#xA; &#xA; Using `git-ws` in a directory calls git commands in all subdirectiories which are git repositories.&#xA; &#xA;-* `> git-ws ? (command name)`: displays auto-generated help for a command&#xA;-* `> git-ws push`: push staged changes&#xA;-* `> git-ws push -f`: force push staged changes&#xA;-* `> git-ws pull`: pull latest version&#xA;-* `> git-ws pull -s`: pull latest version, stashing all changes before pulling&#xA;-* `> git-ws status`: displays short git status, ignoring dirty submodules&#xA;-* `> git-ws submodule push`: commits all staged changes and pushes (intended to be used only after non-submodule changes have been pushed)&#xA;-* `> git-ws submodule pull`: stashes all submodule local changes, pulls latest submodules recursively&#xA;-* `> git-ws submodule au`: equivalent of `git-ws submodule pull` followed by `git-ws submodule push` and by `git submodule update`&#xA;-* `> git-ws do 'command here'`: creates a subshell in every git repo folder, and executes a bash command in it&#xA;\ No newline at end of file&#xA;+* `git-ws ?`: displays auto-generated help for all commands&#xA;+* `git-ws ? (command name)`: displays auto-generated help for a command&#xA;+* `git-ws push`: push staged changes&#xA;+* `git-ws push -f`: force push staged changes&#xA;+* `git-ws pull`: pull latest version&#xA;+* `git-ws pull -s`: pull latest version, stashing all changes before pulling&#xA;+* `git-ws status`: displays short git status, ignoring dirty submodules&#xA;+* `git-ws submodule push`: commits all staged changes and pushes (intended to be used only after non-submodule changes have been pushed)&#xA;+* `git-ws submodule pull`: stashes all submodule local changes, pulls latest submodules recursively&#xA;+* `git-ws submodule au`: equivalent of `git-ws submodule pull` followed by `git-ws submodule push` and by `git submodule update`&#xA;+* `git-ws do 'command here'`: creates a subshell in every git repo folder, and executes a bash command in it&#xA;+&#xA;+&#xA;+&#xA;+## Why is this useful?&#xA;+&#xA;+Real-life situation: I'm working on Open Hexagon and related libraries. &lt;br/>&#xA;+I create a `OHWorkspace` folder, where I clone all the required git repos.&#xA;+&#xA;+* `mkdir OHWorkspace; cd OHWorkspace`&#xA;+* `git clone http://.../SSVUtils`&#xA;+* `git clone http://.../SSVUtilsJson`&#xA;+* `git clone http://.../SSVStart`&#xA;+* `git clone http://.../&lt;etc>`&#xA;+* `git clone http://.../SSVOpenHexagon`&#xA;+&#xA;+Now my directory tree looks like this:&#xA;+&#xA;+```&#xA;+OHWorkspace/&#xA;+&#x9;...&#xA;+&#x9;SSVUtils/&#xA;+&#x9;&#x9;.git/&#xA;+&#x9;&#x9;...&#xA;+&#x9;SSVUtilsJson/&#xA;+&#x9;&#x9;.git/&#xA;+&#x9;&#x9;...&#xA;+&#x9;SSVStart/&#xA;+&#x9;&#x9;.git/&#xA;+&#x9;&#x9;...&#xA;+&#x9;SSVOpenHexagon/&#xA;+&#x9;&#x9;.git/&#xA;+&#x9;&#x9;...&#xA;+```&#xA;+&#xA;+I work on all the repos simultaneously. I constantly need to check what repos I've modified.&#xA;+&#xA;+* `cd OHWorkspace/; git-ws st` (st == status)&#xA;+* returns a human-readable list of changes&#xA;+&#xA;+After I review changes, it's time to commit.&#xA;+&#xA;+* `git-ws gitg` or `git-ws do &quot;open your favorite GUI here&quot;` (this opens gitg in every repo) (TODO: open gitg only in repos with changes)&#xA;+&#xA;+I use gitg to make my commits.&#xA;+&#xA;+* `git-ws push; git-ws sub au` (these two commands save a lot of time: first, all staged commits are pushed to GitHub - then, every submodule is recursively pulled, updated, and pushed, so that the online submodules are up-to-date)&#xA;" file="/0/@files.1" revision="/0/@revisions.40"/>
  <MG:Patch patch="--- a/src/git-ws/main.cpp&#xA;+++ b/src/git-ws/main.cpp&#xA;@@ -22,6 +22,18 @@ struct GitWs&#xA; &#x9;vector&lt;string> changedRepoPaths;&#xA; &#x9;CmdLine cmdLine;&#xA; &#xA;+&#x9;vector&lt;string> getAheadRepoPaths()&#xA;+&#x9;{&#xA;+&#x9;&#x9;vector&lt;string> result;&#xA;+&#x9;&#x9;for(const auto&amp; p : repoPaths)&#xA;+&#x9;&#x9;{&#xA;+&#x9;&#x9;&#x9;bool isAhead{false};&#xA;+&#x9;&#x9;&#x9;for(auto&amp; f : runShInPath(p, &quot;git status -sb&quot;)) if(f.find(&quot;ahead&quot;) != string::npos) { isAhead = true; break; }&#xA;+&#x9;&#x9;&#x9;if(isAhead) result.push_back(p);&#xA;+&#x9;&#x9;}&#xA;+&#x9;&#x9;return result;&#xA;+&#x9;}&#xA;+&#xA; &#x9;vector&lt;string> runShInPath(const string&amp; mPath, const string&amp; mCommand)&#xA; &#x9;{&#xA; &#x9;&#x9;FILE* pipe{popen(string{&quot;(cd &quot; + mPath + &quot;;&quot; + mCommand + &quot;)&quot;}.c_str(), &quot;r&quot;)};&#xA;@@ -79,11 +91,10 @@ struct GitWs&#xA; &#x9;{&#xA; &#x9;&#x9;auto&amp; cmd(cmdLine.create({&quot;push&quot;}));&#xA; &#x9;&#x9;auto&amp; flagForce(cmd.createFlag(&quot;f&quot;, &quot;force&quot;));&#xA;-&#x9;&#x9;auto&amp; flagChanged(cmd.createFlag(&quot;c&quot;, &quot;changed-only&quot;));&#xA;+&#x9;&#x9;auto&amp; flagAhead(cmd.createFlag(&quot;a&quot;, &quot;ahead-only&quot;));&#xA; &#x9;&#x9;cmd += [&amp;]&#xA; &#x9;&#x9;{&#xA;-&#x9;&#x9;&#x9;auto&amp; currentRepoPaths(flagChanged ? changedRepoPaths : repoPaths);&#xA;-&#x9;&#x9;&#x9;runShInRepos(currentRepoPaths, flagForce ? &quot;git push -f&quot; : &quot;git push&quot;);&#xA;+&#x9;&#x9;&#x9;runShInRepos(flagAhead ? getAheadRepoPaths() : repoPaths, flagForce ? &quot;git push -f&quot; : &quot;git push&quot;);&#xA; &#x9;&#x9;};&#xA; &#x9;}&#xA; &#x9;void initCmdPull()&#xA;@@ -144,6 +155,24 @@ struct GitWs&#xA; &#x9;&#x9;&#x9;runShInRepos(currentRepoPaths, arg.get());&#xA; &#x9;&#x9;};&#xA; &#x9;}&#xA;+&#x9;void initCmdQuery()&#xA;+&#x9;{&#xA;+&#x9;&#x9;auto&amp; cmd(cmdLine.create({&quot;query&quot;}));&#xA;+&#x9;&#x9;cmd += [&amp;]&#xA;+&#x9;&#x9;{&#xA;+&#x9;&#x9;&#x9;log(&quot;&lt;&lt;ALL REPO PATHS>>&quot;, &quot;----&quot;);&#xA;+&#x9;&#x9;&#x9;for(const auto&amp; p : repoPaths) log(p);&#xA;+&#x9;&#x9;&#x9;log(&quot;&quot;, &quot;----&quot;); log(&quot;&quot;); log(&quot;&quot;);&#xA;+&#xA;+&#x9;&#x9;&#x9;log(&quot;&lt;&lt;CHANGED REPO PATHS (can commit)>>&quot;, &quot;----&quot;);&#xA;+&#x9;&#x9;&#x9;for(const auto&amp; p : changedRepoPaths) log(p);&#xA;+&#x9;&#x9;&#x9;log(&quot;&quot;, &quot;----&quot;); log(&quot;&quot;); log(&quot;&quot;);&#xA;+&#xA;+&#x9;&#x9;&#x9;log(&quot;&lt;&lt;AHEAD REPO PATHS (can push)>>&quot;, &quot;----&quot;);&#xA;+&#x9;&#x9;&#x9;for(const auto&amp; p : getAheadRepoPaths()) log(p);&#xA;+&#x9;&#x9;&#x9;log(&quot;&quot;, &quot;----&quot;); log(&quot;&quot;); log(&quot;&quot;);&#xA;+&#x9;&#x9;};&#xA;+&#x9;}&#xA; &#xA; &#x9;void initRepoPaths()&#xA; &#x9;{&#xA;@@ -154,7 +183,7 @@ struct GitWs&#xA; &#x9;&#x9;&#x9;&#x9;if(!runShInPath(p, &quot;git diff-index --name-only --ignore-submodules HEAD --&quot;).empty()) changedRepoPaths.push_back(p);&#xA; &#x9;&#x9;&#x9;}&#xA; &#x9;}&#xA;-&#x9;void initCmds() { initCmdHelp(); initCmdPush(); initCmdPull(); initCmdSubmodule(); initCmdStatus(); initCmdGitg(); initCmdDo(); }&#xA;+&#x9;void initCmds() { initCmdHelp(); initCmdPush(); initCmdPull(); initCmdSubmodule(); initCmdStatus(); initCmdGitg(); initCmdDo(); initCmdQuery(); }&#xA; &#xA; &#x9;GitWs() { initRepoPaths(); initCmds(); }&#xA; };&#xA;" file="/0/@files.25" revision="/0/@revisions.43"/>
  <MG:Patch patch="--- a/src/git-ws/GitWs/GitWs.cpp&#xA;+++ b/src/git-ws/GitWs/GitWs.cpp&#xA;@@ -145,9 +145,14 @@ namespace gitws&#xA; &#x9;&#x9;auto&amp; cmd(cmdLine.create({&quot;do&quot;}));&#xA; &#x9;&#x9;auto&amp; arg(cmd.createArg&lt;string>(&quot;command to execute&quot;));&#xA; &#x9;&#x9;auto&amp; flagChanged(cmd.createFlag(&quot;c&quot;, &quot;changed-only&quot;));&#xA;+&#x9;&#x9;auto&amp; flagAhead(cmd.createFlag(&quot;a&quot;, &quot;ahead-only&quot;));&#xA; &#x9;&#x9;cmd += [&amp;]&#xA; &#x9;&#x9;{&#xA;+&#x9;&#x9;&#x9;if(flagChanged &amp;&amp; flagAhead) { log(&quot;-c and -a are mutually exclusive&quot;); return; }&#xA;+&#xA; &#x9;&#x9;&#x9;auto currentRepoPaths(flagChanged ? getChangedRepoPaths() : repoPaths);&#xA;+&#x9;&#x9;&#x9;if(flagAhead) currentRepoPaths = getAheadRepoPaths();&#xA;+&#xA; &#x9;&#x9;&#x9;runShInRepos(currentRepoPaths, arg.get());&#xA; &#x9;&#x9;};&#xA; &#x9;}&#xA;" file="/0/@files.34" revision="/0/@revisions.47"/>
  <MG:Patch patch="--- a/src/git-ws/GitWs/GitWs.cpp&#xA;+++ b/src/git-ws/GitWs/GitWs.cpp&#xA;@@ -142,6 +142,7 @@ namespace gitws&#xA; &#x9;}&#xA; &#x9;void GitWs::initCmdDo()&#xA; &#x9;{&#xA;+&#xA; &#x9;&#x9;auto&amp; cmd(cmdLine.create({&quot;do&quot;}));&#xA; &#x9;&#x9;auto&amp; arg(cmd.createArg&lt;string>(&quot;command to execute&quot;));&#xA; &#x9;&#x9;auto&amp; flagChanged(cmd.createFlag(&quot;c&quot;, &quot;changed-only&quot;));&#xA;" file="/0/@files.34" revision="/0/@revisions.48"/>
  <MG:Patch patch="--- a/README.md&#xA;+++ b/README.md&#xA;@@ -1,7 +1,7 @@&#xA; # git-ws&#xA; &#xA; Command line utility to work with multiple git repositories at once &lt;br/>&#xA;-Currently intended for personal use only (use at your own risk)&#xA;+Currently intended for personal use only, but quite functional&#xA; &#xA; &#xA; &#xA;@@ -11,15 +11,19 @@ Using `git-ws` in a directory calls git commands in all subdirectiories which ar&#xA; &#xA; * `git-ws ?`: displays auto-generated help for all commands&#xA; * `git-ws ? (command name)`: displays auto-generated help for a command&#xA;+* `git-ws query`: displays all repos detected by git-ws&#xA; * `git-ws push`: push staged changes&#xA; * `git-ws push -f`: force push staged changes&#xA;+* `git-ws push -a`: push staged changes, only in repos ahead from remote&#xA; * `git-ws pull`: pull latest version&#xA; * `git-ws pull -s`: pull latest version, stashing all changes before pulling&#xA;-* `git-ws status`: displays short git status, ignoring dirty submodules&#xA;-* `git-ws submodule push`: commits all staged changes and pushes (intended to be used only after non-submodule changes have been pushed)&#xA;-* `git-ws submodule pull`: stashes all submodule local changes, pulls latest submodules recursively&#xA;-* `git-ws submodule au`: equivalent of `git-ws submodule pull` followed by `git-ws submodule push` and by `git submodule update`&#xA;+* `git-ws status` or `git-ws st`: displays short git status, ignoring dirty submodules&#xA;+* `git-ws submodule push` or `git-ws sub push`: commits all staged changes and pushes (intended to be used only after non-submodule changes have been pushed)&#xA;+* `git-ws sub pull`: stashes all submodule local changes, pulls latest submodules recursively&#xA;+* `git-ws sub au`: equivalent of `git-ws submodule pull` followed by `git-ws submodule push` and by `git submodule update`&#xA; * `git-ws do 'command here'`: creates a subshell in every git repo folder, and executes a bash command in it&#xA;+* `git-ws do -c 'command here'`: creates a subshell in every git repo folder with changes, and executes a bash command in it&#xA;+* `git-ws do -a 'command here'`: creates a subshell in every ahead git repo folder, and executes a bash command in it&#xA; &#xA; &#xA; &#xA;@@ -61,8 +65,8 @@ I work on all the repos simultaneously. I constantly need to check what repos I'&#xA; &#xA; After I review changes, it's time to commit.&#xA; &#xA;-* `git-ws gitg` or `git-ws do &quot;open your favorite GUI here&quot;` (this opens gitg in every repo) (TODO: open gitg only in repos with changes)&#xA;+* `git-ws gitg -c` or `git-ws do &quot;open your favorite GUI here&quot;` (this opens gitg in every repo with changes to commit) &#xA; &#xA; I use gitg to make my commits.&#xA; &#xA;-* `git-ws push; git-ws sub au` (these two commands save a lot of time: first, all staged commits are pushed to GitHub - then, every submodule is recursively pulled, updated, and pushed, so that the online submodules are up-to-date)&#xA;+* `git-ws push -a; git-ws sub au` (these two commands save a lot of time: first, all staged commits in ahead repos are pushed to GitHub - then, every submodule is recursively pulled, updated, and pushed, so that the online submodules are up-to-date)&#xA;" file="/0/@files.1" revision="/0/@revisions.46"/>
  <MG:Patch patch="--- a/src/git-ws/main.cpp&#xA;+++ b/src/git-ws/main.cpp&#xA;@@ -19,16 +19,14 @@ using namespace ssvcl;&#xA; struct GitWs&#xA; {&#xA; &#x9;vector&lt;string> repoPaths;&#xA;+&#x9;vector&lt;string> changedRepoPaths;&#xA; &#x9;CmdLine cmdLine;&#xA; &#xA;-&#x9;void runShInRepos(const string&amp; mCommand, bool mPrintEmpty = false)&#xA;+&#x9;vector&lt;string> runShInPath(const string&amp; mPath, const string&amp; mCommand)&#xA; &#x9;{&#xA;-&#x9;&#x9;for(const auto&amp; p : repoPaths)&#xA;-&#x9;&#x9;{&#xA;-&#x9;&#x9;&#x9;FILE* pipe{popen(string{&quot;(cd &quot; + p + &quot;;&quot; + mCommand + &quot;)&quot;}.c_str(), &quot;r&quot;)};&#xA;+&#x9;&#x9;FILE* pipe{popen(string{&quot;(cd &quot; + mPath + &quot;;&quot; + mCommand + &quot;)&quot;}.c_str(), &quot;r&quot;)};&#xA; &#x9;&#x9;char buffer[1000];&#xA;-&#x9;&#x9;&#x9;string file;&#xA;-&#x9;&#x9;&#x9;vector&lt;string> files;&#xA;+&#x9;&#x9;string file; vector&lt;string> files;&#xA; &#x9;&#x9;while(fgets(buffer, sizeof(buffer), pipe) != NULL)&#xA; &#x9;&#x9;{&#xA; &#x9;&#x9;&#x9;file = buffer;&#xA;@@ -36,6 +34,15 @@ struct GitWs&#xA; &#x9;&#x9;}&#xA; &#x9;&#x9;pclose(pipe);&#xA; &#xA;+&#x9;&#x9;return files;&#xA;+&#x9;}&#xA;+&#xA;+&#x9;void runShInRepos(const vector&lt;string>&amp; mRepoPaths, const string&amp; mCommand, bool mPrintEmpty = false)&#xA;+&#x9;{&#xA;+&#x9;&#x9;for(const auto&amp; p : mRepoPaths)&#xA;+&#x9;&#x9;{&#xA;+&#x9;&#x9;&#x9;vector&lt;string> files{runShInPath(p, mCommand)};&#xA;+&#xA; &#x9;&#x9;&#x9;if(files.empty() &amp;&amp; !mPrintEmpty) continue;&#xA; &#xA; &#x9;&#x9;&#x9;log(&quot;&lt;&lt;&quot; + p + &quot;>>&quot;, &quot;Repo&quot;);&#xA;@@ -72,32 +79,41 @@ struct GitWs&#xA; &#x9;{&#xA; &#x9;&#x9;auto&amp; cmd(cmdLine.create({&quot;push&quot;}));&#xA; &#x9;&#x9;auto&amp; flagForce(cmd.createFlag(&quot;f&quot;, &quot;force&quot;));&#xA;-&#x9;&#x9;cmd += [&amp;]{ runShInRepos(flagForce ? &quot;git push -f&quot; : &quot;git push&quot;); };&#xA;+&#x9;&#x9;auto&amp; flagChanged(cmd.createFlag(&quot;c&quot;, &quot;changed-only&quot;));&#xA;+&#x9;&#x9;cmd += [&amp;]&#xA;+&#x9;&#x9;{&#xA;+&#x9;&#x9;&#x9;auto&amp; currentRepoPaths(flagChanged ? changedRepoPaths : repoPaths);&#xA;+&#x9;&#x9;&#x9;runShInRepos(currentRepoPaths, flagForce ? &quot;git push -f&quot; : &quot;git push&quot;);&#xA;+&#x9;&#x9;};&#xA; &#x9;}&#xA; &#x9;void initCmdPull()&#xA; &#x9;{&#xA; &#x9;&#x9;auto&amp; cmd(cmdLine.create({&quot;pull&quot;}));&#xA; &#x9;&#x9;auto&amp; flagStash(cmd.createFlag(&quot;s&quot;, &quot;stash&quot;));&#xA; &#x9;&#x9;auto&amp; flagForce(cmd.createFlag(&quot;f&quot;, &quot;force-checkout&quot;));&#xA;+&#x9;&#x9;auto&amp; flagChanged(cmd.createFlag(&quot;c&quot;, &quot;changed-only&quot;));&#xA; &#x9;&#x9;cmd += [&amp;]&#xA; &#x9;&#x9;{&#xA;-&#x9;&#x9;&#x9;if(flagStash) runShInRepos(&quot;git stash&quot;);&#xA;-&#x9;&#x9;&#x9;if(flagForce) runShInRepos(&quot;git checkout -f&quot;);&#xA;-&#x9;&#x9;&#x9;runShInRepos(&quot;git pull&quot;);&#xA;+&#x9;&#x9;&#x9;auto&amp; currentRepoPaths(flagChanged ? changedRepoPaths : repoPaths);&#xA;+&#x9;&#x9;&#x9;if(flagStash) runShInRepos(currentRepoPaths, &quot;git stash&quot;);&#xA;+&#x9;&#x9;&#x9;if(flagForce) runShInRepos(currentRepoPaths, &quot;git checkout -f&quot;);&#xA;+&#x9;&#x9;&#x9;runShInRepos(currentRepoPaths, &quot;git pull&quot;);&#xA; &#x9;&#x9;};&#xA; &#x9;}&#xA; &#x9;void initCmdSubmodule()&#xA; &#x9;{&#xA; &#x9;&#x9;auto&amp; cmd(cmdLine.create({&quot;sub&quot;, &quot;submodule&quot;}));&#xA; &#x9;&#x9;auto&amp; arg(cmd.createArg&lt;string>(&quot;submodule action&quot;));&#xA;+&#x9;&#x9;auto&amp; flagChanged(cmd.createFlag(&quot;c&quot;, &quot;changed-only&quot;));&#xA; &#x9;&#x9;cmd += [&amp;]&#xA; &#x9;&#x9;{&#xA;-&#x9;&#x9;&#x9;if(arg.get() == &quot;push&quot;) runShInRepos(&quot;git commit -am 'automated submodule update'; git push&quot;);&#xA;-&#x9;&#x9;&#x9;else if(arg.get() == &quot;pull&quot;) runShInRepos(&quot;git submodule foreach git stash; git submodule foreach git pull origin master --recurse-submodules&quot;);&#xA;+&#x9;&#x9;&#x9;auto&amp; currentRepoPaths(flagChanged ? changedRepoPaths : repoPaths);&#xA;+&#x9;&#x9;&#x9;if(arg.get() == &quot;push&quot;) runShInRepos(currentRepoPaths, &quot;git commit -am 'automated submodule update'; git push&quot;);&#xA;+&#x9;&#x9;&#x9;else if(arg.get() == &quot;pull&quot;) runShInRepos(currentRepoPaths, &quot;git submodule foreach git stash; git submodule foreach git pull origin master --recurse-submodules&quot;);&#xA; &#x9;&#x9;&#x9;else if(arg.get() == &quot;au&quot;)&#xA; &#x9;&#x9;&#x9;{&#xA;-&#x9;&#x9;&#x9;&#x9;runShInRepos(&quot;git submodule foreach git stash; git submodule foreach git pull origin master --recurse-submodules&quot;);&#xA;-&#x9;&#x9;&#x9;&#x9;runShInRepos(&quot;git commit -am 'automated submodule update'; git push&quot;);&#xA;+&#x9;&#x9;&#x9;&#x9;runShInRepos(currentRepoPaths, &quot;git submodule foreach git stash; git submodule foreach git pull origin master --recurse-submodules&quot;);&#xA;+&#x9;&#x9;&#x9;&#x9;runShInRepos(currentRepoPaths, &quot;git commit -am 'automated submodule update'; git push&quot;);&#xA; &#x9;&#x9;&#x9;}&#xA; &#x9;&#x9;};&#xA; &#x9;}&#xA;@@ -105,17 +121,39 @@ struct GitWs&#xA; &#x9;{&#xA; &#x9;&#x9;auto&amp; cmd(cmdLine.create({&quot;st&quot;, &quot;status&quot;}));&#xA; &#x9;&#x9;auto&amp; showAllFlag(cmd.createFlag(&quot;a&quot;, &quot;showall&quot;));&#xA;-&#x9;&#x9;cmd += [&amp;]{ runShInRepos(&quot;git status -s --ignore-submodules=dirty&quot;, showAllFlag); };&#xA;+&#x9;&#x9;cmd += [&amp;]{ runShInRepos(repoPaths, &quot;git status -s --ignore-submodules=dirty&quot;, showAllFlag); };&#xA;+&#x9;}&#xA;+&#x9;void initCmdGitg()&#xA;+&#x9;{&#xA;+&#x9;&#x9;auto&amp; cmd(cmdLine.create({&quot;gitg&quot;}));&#xA;+&#x9;&#x9;auto&amp; flagChanged(cmd.createFlag(&quot;c&quot;, &quot;changed-only&quot;));&#xA;+&#x9;&#x9;cmd += [&amp;]&#xA;+&#x9;&#x9;{&#xA;+&#x9;&#x9;&#x9;auto&amp; currentRepoPaths(flagChanged ? changedRepoPaths : repoPaths);&#xA;+&#x9;&#x9;&#x9;runShInRepos(currentRepoPaths, &quot;gitg&amp;&quot;);&#xA;+&#x9;&#x9;};&#xA; &#x9;}&#xA;-&#x9;void initCmdGitg() { cmdLine.create({&quot;gitg&quot;}) += [&amp;]{ runShInRepos(&quot;gitg&amp;&quot;); }; }&#xA; &#x9;void initCmdDo()&#xA; &#x9;{&#xA; &#x9;&#x9;auto&amp; cmd(cmdLine.create({&quot;do&quot;}));&#xA; &#x9;&#x9;auto&amp; arg(cmd.createArg&lt;string>(&quot;command to execute&quot;));&#xA;-&#x9;&#x9;cmd += [&amp;]{ runShInRepos(arg.get()); };&#xA;+&#x9;&#x9;auto&amp; flagChanged(cmd.createFlag(&quot;c&quot;, &quot;changed-only&quot;));&#xA;+&#x9;&#x9;cmd += [&amp;]&#xA;+&#x9;&#x9;{&#xA;+&#x9;&#x9;&#x9;auto&amp; currentRepoPaths(flagChanged ? changedRepoPaths : repoPaths);&#xA;+&#x9;&#x9;&#x9;runShInRepos(currentRepoPaths, arg.get());&#xA;+&#x9;&#x9;};&#xA; &#x9;}&#xA; &#xA;-&#x9;void initRepoPaths() { for(auto&amp; p : getScan&lt;Mode::Single, Type::Folder>(&quot;./&quot;)) if(exists(p + &quot;/.git/&quot;)) repoPaths.push_back(p); }&#xA;+&#x9;void initRepoPaths()&#xA;+&#x9;{&#xA;+&#x9;&#x9;for(auto&amp; p : getScan&lt;Mode::Single, Type::Folder>(&quot;./&quot;))&#xA;+&#x9;&#x9;&#x9;if(exists(p + &quot;/.git/&quot;))&#xA;+&#x9;&#x9;&#x9;{&#xA;+&#x9;&#x9;&#x9;&#x9;repoPaths.push_back(p);&#xA;+&#x9;&#x9;&#x9;&#x9;if(!runShInPath(p, &quot;git diff-index --name-only --ignore-submodules HEAD --&quot;).empty()) { changedRepoPaths.push_back(p); log(p);}&#xA;+&#x9;&#x9;&#x9;}&#xA;+&#x9;}&#xA; &#x9;void initCmds() { initCmdHelp(); initCmdPush(); initCmdPull(); initCmdSubmodule(); initCmdStatus(); initCmdGitg(); initCmdDo(); }&#xA; &#xA; &#x9;GitWs() { initRepoPaths(); initCmds(); }&#xA;" file="/0/@files.25" revision="/0/@revisions.41"/>
  <MG:Patch patch="--- a/src/git-ws/GitWs/GitWs.cpp&#xA;+++ b/src/git-ws/GitWs/GitWs.cpp&#xA;@@ -142,7 +142,6 @@ namespace gitws&#xA; &#x9;}&#xA; &#x9;void GitWs::initCmdDo()&#xA; &#x9;{&#xA;-&#xA; &#x9;&#x9;auto&amp; cmd(cmdLine.create({&quot;do&quot;}));&#xA; &#x9;&#x9;auto&amp; arg(cmd.createArg&lt;string>(&quot;command to execute&quot;));&#xA; &#x9;&#x9;auto&amp; flagChanged(cmd.createFlag(&quot;c&quot;, &quot;changed-only&quot;));&#xA;" file="/0/@files.34" revision="/0/@revisions.49"/>
  <MG:Patch patch="--- a/CMakeLists.txt&#xA;+++ b/CMakeLists.txt&#xA;@@ -23,6 +23,8 @@ file(GLOB SRC_LIST&#xA; &#x9;&quot;${SRC_DIR}/${PROJECT_NAME}/*.cpp&quot;&#xA; &#x9;&quot;${INC_DIR}/${PROJECT_NAME}/CommandLine/*.h&quot;&#xA; &#x9;&quot;${SRC_DIR}/${PROJECT_NAME}/CommandLine/*.cpp&quot;&#xA;+&#x9;&quot;${INC_DIR}/${PROJECT_NAME}/GitWs/*.h&quot;&#xA;+&#x9;&quot;${SRC_DIR}/${PROJECT_NAME}/GitWs/*.cpp&quot;&#xA; )&#xA; &#xA; include_directories(${INC_DIR})&#xA;" file="/0/@files.2" revision="/0/@revisions.44"/>
  <MG:Patch patch="--- /dev/null&#xA;+++ b/include/git-ws/GitWs/GitWs.h&#xA;@@ -0,0 +1,44 @@&#xA;+// Copyright (c) 2013 Vittorio Romeo&#xA;+// License: Academic Free License (&quot;AFL&quot;) v. 3.0&#xA;+// AFL License page: http://opensource.org/licenses/AFL-3.0&#xA;+&#xA;+#ifndef GITWS_GITWS&#xA;+#define GITWS_GITWS&#xA;+&#xA;+#include &lt;string>&#xA;+#include &lt;vector>&#xA;+#include &lt;SSVUtils/SSVUtils.h>&#xA;+#include &quot;git-ws/CommandLine/CommandLine.h&quot;&#xA;+&#xA;+namespace gitws&#xA;+{&#xA;+&#x9;class GitWs&#xA;+&#x9;{&#xA;+&#x9;&#x9;private:&#xA;+&#x9;&#x9;&#x9;std::vector&lt;std::string> repoPaths;&#xA;+&#x9;&#x9;&#x9;ssvcl::CmdLine cmdLine;&#xA;+&#xA;+&#x9;&#x9;&#x9;std::vector&lt;std::string> getAheadRepoPaths();&#xA;+&#x9;&#x9;&#x9;std::vector&lt;std::string> getChangedRepoPaths();&#xA;+&#xA;+&#x9;&#x9;&#x9;std::vector&lt;std::string> runShInPath(const std::string&amp; mPath, const std::string&amp; mCommand);&#xA;+&#x9;&#x9;&#x9;void runShInRepos(const std::vector&lt;std::string>&amp; mRepoPaths, const std::string&amp; mCommand, bool mPrintEmpty = false);&#xA;+&#xA;+&#x9;&#x9;&#x9;void initCmdHelp();&#xA;+&#x9;&#x9;&#x9;void initCmdPush();&#xA;+&#x9;&#x9;&#x9;void initCmdPull();&#xA;+&#x9;&#x9;&#x9;void initCmdSubmodule();&#xA;+&#x9;&#x9;&#x9;void initCmdStatus();&#xA;+&#x9;&#x9;&#x9;void initCmdGitg();&#xA;+&#x9;&#x9;&#x9;void initCmdDo();&#xA;+&#x9;&#x9;&#x9;void initCmdQuery();&#xA;+&#xA;+&#x9;&#x9;&#x9;void initRepoPaths();&#xA;+&#x9;&#x9;&#x9;void initCmds();&#xA;+&#xA;+&#x9;&#x9;public:&#xA;+&#x9;&#x9;&#x9;GitWs(const std::vector&lt;std::string>&amp; mCommandLine);&#xA;+&#x9;};&#xA;+}&#xA;+&#xA;+#endif&#xA;" file="/0/@files.32" revision="/0/@revisions.44"/>
  <MG:Patch patch="--- a/src/git-ws/main.cpp&#xA;+++ b/src/git-ws/GitWs/GitWs.cpp&#xA;@@ -4,25 +4,16 @@&#xA; &#xA; #include &lt;cstdio>&#xA; #include &lt;iostream>&#xA;-#include &lt;string>&#xA;-#include &lt;vector>&#xA;-#include &lt;functional>&#xA;-#include &lt;stdexcept>&#xA;-#include &lt;SSVUtils/SSVUtils.h>&#xA;-#include &quot;git-ws/CommandLine/CommandLine.h&quot;&#xA;+#include &quot;git-ws/GitWs/GitWs.h&quot;&#xA; &#xA; using namespace std;&#xA; using namespace ssvu;&#xA; using namespace ssvu::FileSystem;&#xA; using namespace ssvcl;&#xA; &#xA;-struct GitWs&#xA;+namespace gitws&#xA; {&#xA;-&#x9;vector&lt;string> repoPaths;&#xA;-&#x9;vector&lt;string> changedRepoPaths;&#xA;-&#x9;CmdLine cmdLine;&#xA;-&#xA;-&#x9;vector&lt;string> getAheadRepoPaths()&#xA;+&#x9;vector&lt;string> GitWs::getAheadRepoPaths()&#xA; &#x9;{&#xA; &#x9;&#x9;vector&lt;string> result;&#xA; &#x9;&#x9;for(const auto&amp; p : repoPaths)&#xA;@@ -33,8 +24,14 @@ struct GitWs&#xA; &#x9;&#x9;}&#xA; &#x9;&#x9;return result;&#xA; &#x9;}&#xA;+&#x9;vector&lt;string> GitWs::getChangedRepoPaths()&#xA;+&#x9;{&#xA;+&#x9;&#x9;vector&lt;string> result;&#xA;+&#x9;&#x9;for(const auto&amp; p : repoPaths) if(!runShInPath(p, &quot;git diff-index --name-only --ignore-submodules HEAD --&quot;).empty()) result.push_back(p);&#xA;+&#x9;&#x9;return result;&#xA;+&#x9;}&#xA; &#xA;-&#x9;vector&lt;string> runShInPath(const string&amp; mPath, const string&amp; mCommand)&#xA;+&#x9;vector&lt;string> GitWs::runShInPath(const string&amp; mPath, const string&amp; mCommand)&#xA; &#x9;{&#xA; &#x9;&#x9;FILE* pipe{popen(string{&quot;(cd &quot; + mPath + &quot;;&quot; + mCommand + &quot;)&quot;}.c_str(), &quot;r&quot;)};&#xA; &#x9;&#x9;char buffer[1000];&#xA;@@ -48,8 +45,7 @@ struct GitWs&#xA; &#xA; &#x9;&#x9;return files;&#xA; &#x9;}&#xA;-&#xA;-&#x9;void runShInRepos(const vector&lt;string>&amp; mRepoPaths, const string&amp; mCommand, bool mPrintEmpty = false)&#xA;+&#x9;void GitWs::runShInRepos(const vector&lt;string>&amp; mRepoPaths, const string&amp; mCommand, bool mPrintEmpty)&#xA; &#x9;{&#xA; &#x9;&#x9;for(const auto&amp; p : mRepoPaths)&#xA; &#x9;&#x9;{&#xA;@@ -63,7 +59,7 @@ struct GitWs&#xA; &#x9;&#x9;}&#xA; &#x9;}&#xA; &#xA;-&#x9;void initCmdHelp()&#xA;+&#x9;void GitWs::initCmdHelp()&#xA; &#x9;{&#xA; &#x9;&#x9;auto&amp; cmd(cmdLine.create({&quot;?&quot;, &quot;help&quot;}));&#xA; &#x9;&#x9;auto&amp; optArg(cmd.createOptArg&lt;string>(&quot;&quot;, &quot;command name&quot;));&#xA;@@ -87,7 +83,7 @@ struct GitWs&#xA; &#x9;&#x9;&#x9;log(c.getNamesString() + &quot; &quot; + c.getArgsString() + &quot; &quot; + c.getOptArgsString() + &quot; &quot; + c.getFlagsString());&#xA; &#x9;&#x9;};&#xA; &#x9;}&#xA;-&#x9;void initCmdPush()&#xA;+&#x9;void GitWs::initCmdPush()&#xA; &#x9;{&#xA; &#x9;&#x9;auto&amp; cmd(cmdLine.create({&quot;push&quot;}));&#xA; &#x9;&#x9;auto&amp; flagForce(cmd.createFlag(&quot;f&quot;, &quot;force&quot;));&#xA;@@ -97,7 +93,7 @@ struct GitWs&#xA; &#x9;&#x9;&#x9;runShInRepos(flagAhead ? getAheadRepoPaths() : repoPaths, flagForce ? &quot;git push -f&quot; : &quot;git push&quot;);&#xA; &#x9;&#x9;};&#xA; &#x9;}&#xA;-&#x9;void initCmdPull()&#xA;+&#x9;void GitWs::initCmdPull()&#xA; &#x9;{&#xA; &#x9;&#x9;auto&amp; cmd(cmdLine.create({&quot;pull&quot;}));&#xA; &#x9;&#x9;auto&amp; flagStash(cmd.createFlag(&quot;s&quot;, &quot;stash&quot;));&#xA;@@ -105,20 +101,20 @@ struct GitWs&#xA; &#x9;&#x9;auto&amp; flagChanged(cmd.createFlag(&quot;c&quot;, &quot;changed-only&quot;));&#xA; &#x9;&#x9;cmd += [&amp;]&#xA; &#x9;&#x9;{&#xA;-&#x9;&#x9;&#x9;auto&amp; currentRepoPaths(flagChanged ? changedRepoPaths : repoPaths);&#xA;+&#x9;&#x9;&#x9;auto currentRepoPaths(flagChanged ? getChangedRepoPaths() : repoPaths);&#xA; &#x9;&#x9;&#x9;if(flagStash) runShInRepos(currentRepoPaths, &quot;git stash&quot;);&#xA; &#x9;&#x9;&#x9;if(flagForce) runShInRepos(currentRepoPaths, &quot;git checkout -f&quot;);&#xA; &#x9;&#x9;&#x9;runShInRepos(currentRepoPaths, &quot;git pull&quot;);&#xA; &#x9;&#x9;};&#xA; &#x9;}&#xA;-&#x9;void initCmdSubmodule()&#xA;+&#x9;void GitWs::initCmdSubmodule()&#xA; &#x9;{&#xA; &#x9;&#x9;auto&amp; cmd(cmdLine.create({&quot;sub&quot;, &quot;submodule&quot;}));&#xA; &#x9;&#x9;auto&amp; arg(cmd.createArg&lt;string>(&quot;submodule action&quot;));&#xA; &#x9;&#x9;auto&amp; flagChanged(cmd.createFlag(&quot;c&quot;, &quot;changed-only&quot;));&#xA; &#x9;&#x9;cmd += [&amp;]&#xA; &#x9;&#x9;{&#xA;-&#x9;&#x9;&#x9;auto&amp; currentRepoPaths(flagChanged ? changedRepoPaths : repoPaths);&#xA;+&#x9;&#x9;&#x9;auto currentRepoPaths(flagChanged ? getChangedRepoPaths() : repoPaths);&#xA; &#x9;&#x9;&#x9;if(arg.get() == &quot;push&quot;) runShInRepos(currentRepoPaths, &quot;git commit -am 'automated submodule update'; git push&quot;);&#xA; &#x9;&#x9;&#x9;else if(arg.get() == &quot;pull&quot;) runShInRepos(currentRepoPaths, &quot;git submodule foreach git stash; git submodule foreach git pull origin master --recurse-submodules&quot;);&#xA; &#x9;&#x9;&#x9;else if(arg.get() == &quot;au&quot;)&#xA;@@ -128,74 +124,48 @@ struct GitWs&#xA; &#x9;&#x9;&#x9;}&#xA; &#x9;&#x9;};&#xA; &#x9;}&#xA;-&#x9;void initCmdStatus()&#xA;+&#x9;void GitWs::initCmdStatus()&#xA; &#x9;{&#xA; &#x9;&#x9;auto&amp; cmd(cmdLine.create({&quot;st&quot;, &quot;status&quot;}));&#xA; &#x9;&#x9;auto&amp; showAllFlag(cmd.createFlag(&quot;a&quot;, &quot;showall&quot;));&#xA; &#x9;&#x9;cmd += [&amp;]{ runShInRepos(repoPaths, &quot;git status -s --ignore-submodules=dirty&quot;, showAllFlag); };&#xA; &#x9;}&#xA;-&#x9;void initCmdGitg()&#xA;+&#x9;void GitWs::initCmdGitg()&#xA; &#x9;{&#xA; &#x9;&#x9;auto&amp; cmd(cmdLine.create({&quot;gitg&quot;}));&#xA; &#x9;&#x9;auto&amp; flagChanged(cmd.createFlag(&quot;c&quot;, &quot;changed-only&quot;));&#xA; &#x9;&#x9;cmd += [&amp;]&#xA; &#x9;&#x9;{&#xA;-&#x9;&#x9;&#x9;auto&amp; currentRepoPaths(flagChanged ? changedRepoPaths : repoPaths);&#xA;+&#x9;&#x9;&#x9;auto currentRepoPaths(flagChanged ? getChangedRepoPaths() : repoPaths);&#xA; &#x9;&#x9;&#x9;runShInRepos(currentRepoPaths, &quot;gitg&amp;&quot;);&#xA; &#x9;&#x9;};&#xA; &#x9;}&#xA;-&#x9;void initCmdDo()&#xA;+&#x9;void GitWs::initCmdDo()&#xA; &#x9;{&#xA; &#x9;&#x9;auto&amp; cmd(cmdLine.create({&quot;do&quot;}));&#xA; &#x9;&#x9;auto&amp; arg(cmd.createArg&lt;string>(&quot;command to execute&quot;));&#xA; &#x9;&#x9;auto&amp; flagChanged(cmd.createFlag(&quot;c&quot;, &quot;changed-only&quot;));&#xA; &#x9;&#x9;cmd += [&amp;]&#xA; &#x9;&#x9;{&#xA;-&#x9;&#x9;&#x9;auto&amp; currentRepoPaths(flagChanged ? changedRepoPaths : repoPaths);&#xA;+&#x9;&#x9;&#x9;auto currentRepoPaths(flagChanged ? getChangedRepoPaths() : repoPaths);&#xA; &#x9;&#x9;&#x9;runShInRepos(currentRepoPaths, arg.get());&#xA; &#x9;&#x9;};&#xA; &#x9;}&#xA;-&#x9;void initCmdQuery()&#xA;+&#x9;void GitWs::initCmdQuery()&#xA; &#x9;{&#xA;-&#x9;&#x9;auto&amp; cmd(cmdLine.create({&quot;query&quot;}));&#xA;-&#x9;&#x9;cmd += [&amp;]&#xA;+&#x9;&#x9;cmdLine.create({&quot;query&quot;}) += [&amp;]&#xA; &#x9;&#x9;{&#xA;-&#x9;&#x9;&#x9;log(&quot;&lt;&lt;ALL REPO PATHS>>&quot;, &quot;----&quot;);&#xA;-&#x9;&#x9;&#x9;for(const auto&amp; p : repoPaths) log(p);&#xA;-&#x9;&#x9;&#x9;log(&quot;&quot;, &quot;----&quot;); log(&quot;&quot;); log(&quot;&quot;);&#xA;-&#xA;-&#x9;&#x9;&#x9;log(&quot;&lt;&lt;CHANGED REPO PATHS (can commit)>>&quot;, &quot;----&quot;);&#xA;-&#x9;&#x9;&#x9;for(const auto&amp; p : changedRepoPaths) log(p);&#xA;-&#x9;&#x9;&#x9;log(&quot;&quot;, &quot;----&quot;); log(&quot;&quot;); log(&quot;&quot;);&#xA;-&#xA;-&#x9;&#x9;&#x9;log(&quot;&lt;&lt;AHEAD REPO PATHS (can push)>>&quot;, &quot;----&quot;);&#xA;-&#x9;&#x9;&#x9;for(const auto&amp; p : getAheadRepoPaths()) log(p);&#xA;-&#x9;&#x9;&#x9;log(&quot;&quot;, &quot;----&quot;); log(&quot;&quot;); log(&quot;&quot;);&#xA;+&#x9;&#x9;&#x9;log(&quot;&lt;&lt;ALL REPO PATHS>>&quot;, &quot;----&quot;);&#x9;&#x9;&#x9;&#x9;&#x9;for(const auto&amp; p : repoPaths) log(p);&#x9;&#x9;&#x9;&#x9;log(&quot;&quot;, &quot;----&quot;); log(&quot;&quot;); log(&quot;&quot;);&#xA;+&#x9;&#x9;&#x9;log(&quot;&lt;&lt;CHANGED REPO PATHS (can commit)>>&quot;, &quot;----&quot;);&#x9;for(const auto&amp; p : getChangedRepoPaths()) log(p);&#x9;log(&quot;&quot;, &quot;----&quot;); log(&quot;&quot;); log(&quot;&quot;);&#xA;+&#x9;&#x9;&#x9;log(&quot;&lt;&lt;AHEAD REPO PATHS (can push)>>&quot;, &quot;----&quot;);&#x9;&#x9;for(const auto&amp; p : getAheadRepoPaths()) log(p);&#x9;log(&quot;&quot;, &quot;----&quot;); log(&quot;&quot;); log(&quot;&quot;);&#xA; &#x9;&#x9;};&#xA; &#x9;}&#xA; &#xA;-&#x9;void initRepoPaths()&#xA;+&#x9;void GitWs::initRepoPaths()&#xA; &#x9;{&#xA;-&#x9;&#x9;for(auto&amp; p : getScan&lt;Mode::Single, Type::Folder>(&quot;./&quot;))&#xA;-&#x9;&#x9;&#x9;if(exists(p + &quot;/.git/&quot;))&#xA;-&#x9;&#x9;&#x9;{&#xA;-&#x9;&#x9;&#x9;&#x9;repoPaths.push_back(p);&#xA;-&#x9;&#x9;&#x9;&#x9;if(!runShInPath(p, &quot;git diff-index --name-only --ignore-submodules HEAD --&quot;).empty()) changedRepoPaths.push_back(p);&#xA;-&#x9;&#x9;&#x9;}&#xA;+&#x9;&#x9;for(auto&amp; p : getScan&lt;Mode::Single, Type::Folder>(&quot;./&quot;)) if(exists(p + &quot;/.git/&quot;)) repoPaths.push_back(p);&#xA; &#x9;}&#xA;-&#x9;void initCmds() { initCmdHelp(); initCmdPush(); initCmdPull(); initCmdSubmodule(); initCmdStatus(); initCmdGitg(); initCmdDo(); initCmdQuery(); }&#xA;-&#xA;-&#x9;GitWs() { initRepoPaths(); initCmds(); }&#xA;-};&#xA;+&#x9;void GitWs::initCmds() { initCmdHelp(); initCmdPush(); initCmdPull(); initCmdSubmodule(); initCmdStatus(); initCmdGitg(); initCmdDo(); initCmdQuery(); }&#xA; &#xA;-int main(int argc, char* argv[])&#xA;-{&#xA;-&#x9;vector&lt;string> args;&#xA;-&#x9;for(int i{1}; i &lt; argc; ++i) args.push_back(argv[i]);&#xA;-&#xA;-&#x9;try{ GitWs{}.cmdLine.parseCmdLine(args); }&#xA;-&#x9;catch(runtime_error mException) { log(mException.what()); return 1; }&#xA;-&#xA;-&#x9;return 0;&#xA;+&#x9;GitWs::GitWs(const vector&lt;string>&amp; mCommandLine) { initRepoPaths(); initCmds(); cmdLine.parseCmdLine(mCommandLine); }&#xA; }&#xA;-&#xA;" file="/0/@files.34" revision="/0/@revisions.44"/>
  <MG:Patch patch="--- a/src/git-ws/main.cpp&#xA;+++ b/src/git-ws/main.cpp&#xA;@@ -2,200 +2,19 @@&#xA; // License: Academic Free License (&quot;AFL&quot;) v. 3.0&#xA; // AFL License page: http://opensource.org/licenses/AFL-3.0&#xA; &#xA;-#include &lt;cstdio>&#xA;-#include &lt;iostream>&#xA; #include &lt;string>&#xA; #include &lt;vector>&#xA;-#include &lt;functional>&#xA; #include &lt;stdexcept>&#xA; #include &lt;SSVUtils/SSVUtils.h>&#xA;-#include &quot;git-ws/CommandLine/CommandLine.h&quot;&#xA;-&#xA;-using namespace std;&#xA;-using namespace ssvu;&#xA;-using namespace ssvu::FileSystem;&#xA;-using namespace ssvcl;&#xA;-&#xA;-struct GitWs&#xA;-{&#xA;-&#x9;vector&lt;string> repoPaths;&#xA;-&#x9;vector&lt;string> changedRepoPaths;&#xA;-&#x9;CmdLine cmdLine;&#xA;-&#xA;-&#x9;vector&lt;string> getAheadRepoPaths()&#xA;-&#x9;{&#xA;-&#x9;&#x9;vector&lt;string> result;&#xA;-&#x9;&#x9;for(const auto&amp; p : repoPaths)&#xA;-&#x9;&#x9;{&#xA;-&#x9;&#x9;&#x9;bool isAhead{false};&#xA;-&#x9;&#x9;&#x9;for(auto&amp; f : runShInPath(p, &quot;git status -sb&quot;)) if(f.find(&quot;ahead&quot;) != string::npos) { isAhead = true; break; }&#xA;-&#x9;&#x9;&#x9;if(isAhead) result.push_back(p);&#xA;-&#x9;&#x9;}&#xA;-&#x9;&#x9;return result;&#xA;-&#x9;}&#xA;-&#xA;-&#x9;vector&lt;string> runShInPath(const string&amp; mPath, const string&amp; mCommand)&#xA;-&#x9;{&#xA;-&#x9;&#x9;FILE* pipe{popen(string{&quot;(cd &quot; + mPath + &quot;;&quot; + mCommand + &quot;)&quot;}.c_str(), &quot;r&quot;)};&#xA;-&#x9;&#x9;char buffer[1000];&#xA;-&#x9;&#x9;string file; vector&lt;string> files;&#xA;-&#x9;&#x9;while(fgets(buffer, sizeof(buffer), pipe) != NULL)&#xA;-&#x9;&#x9;{&#xA;-&#x9;&#x9;&#x9;file = buffer;&#xA;-&#x9;&#x9;&#x9;files.push_back(file.substr(0, file.size() - 1));&#xA;-&#x9;&#x9;}&#xA;-&#x9;&#x9;pclose(pipe);&#xA;-&#xA;-&#x9;&#x9;return files;&#xA;-&#x9;}&#xA;-&#xA;-&#x9;void runShInRepos(const vector&lt;string>&amp; mRepoPaths, const string&amp; mCommand, bool mPrintEmpty = false)&#xA;-&#x9;{&#xA;-&#x9;&#x9;for(const auto&amp; p : mRepoPaths)&#xA;-&#x9;&#x9;{&#xA;-&#x9;&#x9;&#x9;vector&lt;string> files{runShInPath(p, mCommand)};&#xA;-&#xA;-&#x9;&#x9;&#x9;if(files.empty() &amp;&amp; !mPrintEmpty) continue;&#xA;-&#xA;-&#x9;&#x9;&#x9;log(&quot;&lt;&lt;&quot; + p + &quot;>>&quot;, &quot;Repo&quot;);&#xA;-&#x9;&#x9;&#x9;for(auto&amp; f : files) log(f, &quot;>&quot;);&#xA;-&#x9;&#x9;&#x9;log(&quot;&quot;, &quot;----&quot;); log(&quot;&quot;);&#xA;-&#x9;&#x9;}&#xA;-&#x9;}&#xA;-&#xA;-&#x9;void initCmdHelp()&#xA;-&#x9;{&#xA;-&#x9;&#x9;auto&amp; cmd(cmdLine.create({&quot;?&quot;, &quot;help&quot;}));&#xA;-&#x9;&#x9;auto&amp; optArg(cmd.createOptArg&lt;string>(&quot;&quot;, &quot;command name&quot;));&#xA;-&#x9;&#x9;cmd += [&amp;]&#xA;-&#x9;&#x9;{&#xA;-&#x9;&#x9;&#x9;if(!optArg)&#xA;-&#x9;&#x9;&#x9;{&#xA;-&#x9;&#x9;&#x9;&#x9;log(&quot;Git-ws help&quot;);&#xA;-&#x9;&#x9;&#x9;&#x9;log(&quot;&quot;);&#xA;-&#xA;-&#x9;&#x9;&#x9;&#x9;for(const auto&amp; c : cmdLine.getCmds())&#xA;-&#x9;&#x9;&#x9;&#x9;{&#xA;-&#x9;&#x9;&#x9;&#x9;&#x9;log(c->getNamesString(), &quot;Command help&quot;);&#xA;-&#x9;&#x9;&#x9;&#x9;&#x9;log(c->getNamesString() + &quot; &quot; + c->getArgsString() + &quot; &quot; + c->getOptArgsString() + &quot; &quot; + c->getFlagsString());&#xA;-&#x9;&#x9;&#x9;&#x9;&#x9;log(&quot;&quot;);&#xA;-&#x9;&#x9;&#x9;&#x9;}&#xA;-&#x9;&#x9;&#x9;}&#xA;-&#xA;-&#x9;&#x9;&#x9;auto&amp; c(cmdLine.findCmd(optArg.get()));&#xA;-&#x9;&#x9;&#x9;log(c.getNamesString(), &quot;Command help&quot;);&#xA;-&#x9;&#x9;&#x9;log(c.getNamesString() + &quot; &quot; + c.getArgsString() + &quot; &quot; + c.getOptArgsString() + &quot; &quot; + c.getFlagsString());&#xA;-&#x9;&#x9;};&#xA;-&#x9;}&#xA;-&#x9;void initCmdPush()&#xA;-&#x9;{&#xA;-&#x9;&#x9;auto&amp; cmd(cmdLine.create({&quot;push&quot;}));&#xA;-&#x9;&#x9;auto&amp; flagForce(cmd.createFlag(&quot;f&quot;, &quot;force&quot;));&#xA;-&#x9;&#x9;auto&amp; flagAhead(cmd.createFlag(&quot;a&quot;, &quot;ahead-only&quot;));&#xA;-&#x9;&#x9;cmd += [&amp;]&#xA;-&#x9;&#x9;{&#xA;-&#x9;&#x9;&#x9;runShInRepos(flagAhead ? getAheadRepoPaths() : repoPaths, flagForce ? &quot;git push -f&quot; : &quot;git push&quot;);&#xA;-&#x9;&#x9;};&#xA;-&#x9;}&#xA;-&#x9;void initCmdPull()&#xA;-&#x9;{&#xA;-&#x9;&#x9;auto&amp; cmd(cmdLine.create({&quot;pull&quot;}));&#xA;-&#x9;&#x9;auto&amp; flagStash(cmd.createFlag(&quot;s&quot;, &quot;stash&quot;));&#xA;-&#x9;&#x9;auto&amp; flagForce(cmd.createFlag(&quot;f&quot;, &quot;force-checkout&quot;));&#xA;-&#x9;&#x9;auto&amp; flagChanged(cmd.createFlag(&quot;c&quot;, &quot;changed-only&quot;));&#xA;-&#x9;&#x9;cmd += [&amp;]&#xA;-&#x9;&#x9;{&#xA;-&#x9;&#x9;&#x9;auto&amp; currentRepoPaths(flagChanged ? changedRepoPaths : repoPaths);&#xA;-&#x9;&#x9;&#x9;if(flagStash) runShInRepos(currentRepoPaths, &quot;git stash&quot;);&#xA;-&#x9;&#x9;&#x9;if(flagForce) runShInRepos(currentRepoPaths, &quot;git checkout -f&quot;);&#xA;-&#x9;&#x9;&#x9;runShInRepos(currentRepoPaths, &quot;git pull&quot;);&#xA;-&#x9;&#x9;};&#xA;-&#x9;}&#xA;-&#x9;void initCmdSubmodule()&#xA;-&#x9;{&#xA;-&#x9;&#x9;auto&amp; cmd(cmdLine.create({&quot;sub&quot;, &quot;submodule&quot;}));&#xA;-&#x9;&#x9;auto&amp; arg(cmd.createArg&lt;string>(&quot;submodule action&quot;));&#xA;-&#x9;&#x9;auto&amp; flagChanged(cmd.createFlag(&quot;c&quot;, &quot;changed-only&quot;));&#xA;-&#x9;&#x9;cmd += [&amp;]&#xA;-&#x9;&#x9;{&#xA;-&#x9;&#x9;&#x9;auto&amp; currentRepoPaths(flagChanged ? changedRepoPaths : repoPaths);&#xA;-&#x9;&#x9;&#x9;if(arg.get() == &quot;push&quot;) runShInRepos(currentRepoPaths, &quot;git commit -am 'automated submodule update'; git push&quot;);&#xA;-&#x9;&#x9;&#x9;else if(arg.get() == &quot;pull&quot;) runShInRepos(currentRepoPaths, &quot;git submodule foreach git stash; git submodule foreach git pull origin master --recurse-submodules&quot;);&#xA;-&#x9;&#x9;&#x9;else if(arg.get() == &quot;au&quot;)&#xA;-&#x9;&#x9;&#x9;{&#xA;-&#x9;&#x9;&#x9;&#x9;runShInRepos(currentRepoPaths, &quot;git submodule foreach git stash; git submodule foreach git pull origin master --recurse-submodules&quot;);&#xA;-&#x9;&#x9;&#x9;&#x9;runShInRepos(currentRepoPaths, &quot;git commit -am 'automated submodule update'; git push&quot;);&#xA;-&#x9;&#x9;&#x9;}&#xA;-&#x9;&#x9;};&#xA;-&#x9;}&#xA;-&#x9;void initCmdStatus()&#xA;-&#x9;{&#xA;-&#x9;&#x9;auto&amp; cmd(cmdLine.create({&quot;st&quot;, &quot;status&quot;}));&#xA;-&#x9;&#x9;auto&amp; showAllFlag(cmd.createFlag(&quot;a&quot;, &quot;showall&quot;));&#xA;-&#x9;&#x9;cmd += [&amp;]{ runShInRepos(repoPaths, &quot;git status -s --ignore-submodules=dirty&quot;, showAllFlag); };&#xA;-&#x9;}&#xA;-&#x9;void initCmdGitg()&#xA;-&#x9;{&#xA;-&#x9;&#x9;auto&amp; cmd(cmdLine.create({&quot;gitg&quot;}));&#xA;-&#x9;&#x9;auto&amp; flagChanged(cmd.createFlag(&quot;c&quot;, &quot;changed-only&quot;));&#xA;-&#x9;&#x9;cmd += [&amp;]&#xA;-&#x9;&#x9;{&#xA;-&#x9;&#x9;&#x9;auto&amp; currentRepoPaths(flagChanged ? changedRepoPaths : repoPaths);&#xA;-&#x9;&#x9;&#x9;runShInRepos(currentRepoPaths, &quot;gitg&amp;&quot;);&#xA;-&#x9;&#x9;};&#xA;-&#x9;}&#xA;-&#x9;void initCmdDo()&#xA;-&#x9;{&#xA;-&#x9;&#x9;auto&amp; cmd(cmdLine.create({&quot;do&quot;}));&#xA;-&#x9;&#x9;auto&amp; arg(cmd.createArg&lt;string>(&quot;command to execute&quot;));&#xA;-&#x9;&#x9;auto&amp; flagChanged(cmd.createFlag(&quot;c&quot;, &quot;changed-only&quot;));&#xA;-&#x9;&#x9;cmd += [&amp;]&#xA;-&#x9;&#x9;{&#xA;-&#x9;&#x9;&#x9;auto&amp; currentRepoPaths(flagChanged ? changedRepoPaths : repoPaths);&#xA;-&#x9;&#x9;&#x9;runShInRepos(currentRepoPaths, arg.get());&#xA;-&#x9;&#x9;};&#xA;-&#x9;}&#xA;-&#x9;void initCmdQuery()&#xA;-&#x9;{&#xA;-&#x9;&#x9;auto&amp; cmd(cmdLine.create({&quot;query&quot;}));&#xA;-&#x9;&#x9;cmd += [&amp;]&#xA;-&#x9;&#x9;{&#xA;-&#x9;&#x9;&#x9;log(&quot;&lt;&lt;ALL REPO PATHS>>&quot;, &quot;----&quot;);&#xA;-&#x9;&#x9;&#x9;for(const auto&amp; p : repoPaths) log(p);&#xA;-&#x9;&#x9;&#x9;log(&quot;&quot;, &quot;----&quot;); log(&quot;&quot;); log(&quot;&quot;);&#xA;-&#xA;-&#x9;&#x9;&#x9;log(&quot;&lt;&lt;CHANGED REPO PATHS (can commit)>>&quot;, &quot;----&quot;);&#xA;-&#x9;&#x9;&#x9;for(const auto&amp; p : changedRepoPaths) log(p);&#xA;-&#x9;&#x9;&#x9;log(&quot;&quot;, &quot;----&quot;); log(&quot;&quot;); log(&quot;&quot;);&#xA;-&#xA;-&#x9;&#x9;&#x9;log(&quot;&lt;&lt;AHEAD REPO PATHS (can push)>>&quot;, &quot;----&quot;);&#xA;-&#x9;&#x9;&#x9;for(const auto&amp; p : getAheadRepoPaths()) log(p);&#xA;-&#x9;&#x9;&#x9;log(&quot;&quot;, &quot;----&quot;); log(&quot;&quot;); log(&quot;&quot;);&#xA;-&#x9;&#x9;};&#xA;-&#x9;}&#xA;-&#xA;-&#x9;void initRepoPaths()&#xA;-&#x9;{&#xA;-&#x9;&#x9;for(auto&amp; p : getScan&lt;Mode::Single, Type::Folder>(&quot;./&quot;))&#xA;-&#x9;&#x9;&#x9;if(exists(p + &quot;/.git/&quot;))&#xA;-&#x9;&#x9;&#x9;{&#xA;-&#x9;&#x9;&#x9;&#x9;repoPaths.push_back(p);&#xA;-&#x9;&#x9;&#x9;&#x9;if(!runShInPath(p, &quot;git diff-index --name-only --ignore-submodules HEAD --&quot;).empty()) changedRepoPaths.push_back(p);&#xA;-&#x9;&#x9;&#x9;}&#xA;-&#x9;}&#xA;-&#x9;void initCmds() { initCmdHelp(); initCmdPush(); initCmdPull(); initCmdSubmodule(); initCmdStatus(); initCmdGitg(); initCmdDo(); initCmdQuery(); }&#xA;-&#xA;-&#x9;GitWs() { initRepoPaths(); initCmds(); }&#xA;-};&#xA;+#include &quot;git-ws/GitWs/GitWs.h&quot;&#xA; &#xA; int main(int argc, char* argv[])&#xA; {&#xA;-&#x9;vector&lt;string> args;&#xA;+&#x9;std::vector&lt;std::string> args;&#xA; &#x9;for(int i{1}; i &lt; argc; ++i) args.push_back(argv[i]);&#xA; &#xA;-&#x9;try{ GitWs{}.cmdLine.parseCmdLine(args); }&#xA;-&#x9;catch(runtime_error mException) { log(mException.what()); return 1; }&#xA;+&#x9;try { gitws::GitWs{args}; }&#xA;+&#x9;catch(std::runtime_error mException) { ssvu::log(mException.what()); return 1; }&#xA; &#xA; &#x9;return 0;&#xA; }&#xA;-&#xA;" file="/0/@files.25" revision="/0/@revisions.44"/>
  <MG:HunkBlames hunk="/276" lastRevision="/0/@revisions.0"/>
  <MG:HunkBlames hunk="/277" lastRevision="/0/@revisions.0"/>
  <MG:HunkBlames hunk="/443" lastRevision="/0/@revisions.12"/>
  <MG:HunkBlames hunk="/444" lastRevision="/0/@revisions.12"/>
  <MG:HunkBlames hunk="/444" lastRevision="/0/@revisions.20"/>
  <MG:HunkBlames hunk="/278" lastRevision="/0/@revisions.1"/>
  <MG:HunkBlames hunk="/279" lastRevision="/0/@revisions.1"/>
  <MG:HunkBlames hunk="/505" lastRevision="/0/@revisions.40"/>
  <MG:HunkBlames hunk="/499" lastRevision="/0/@revisions.12"/>
  <MG:HunkBlames hunk="/502" lastRevision="/0/@revisions.40"/>
  <MG:HunkBlames hunk="/504" lastRevision="/0/@revisions.40"/>
  <MG:HunkBlames hunk="/272" lastRevision="/0/@revisions.7"/>
  <MG:HunkBlames hunk="/225" lastRevision="/0/@revisions.1"/>
  <MG:HunkBlames hunk="/207" lastRevision="/0/@revisions.1"/>
  <MG:HunkBlames hunk="/208" lastRevision="/0/@revisions.1"/>
  <MG:HunkBlames hunk="/209" lastRevision="/0/@revisions.1"/>
  <MG:HunkBlames hunk="/212" lastRevision="/0/@revisions.1"/>
  <MG:HunkBlames hunk="/213" lastRevision="/0/@revisions.1"/>
  <MG:HunkBlames hunk="/214" lastRevision="/0/@revisions.1"/>
  <MG:HunkBlames hunk="/215" lastRevision="/0/@revisions.1"/>
  <MG:HunkBlames hunk="/216" lastRevision="/0/@revisions.1"/>
  <MG:HunkBlames hunk="/217" lastRevision="/0/@revisions.1"/>
  <MG:HunkBlames hunk="/218" lastRevision="/0/@revisions.1"/>
  <MG:HunkBlames hunk="/219" lastRevision="/0/@revisions.1"/>
  <MG:HunkBlames hunk="/220" lastRevision="/0/@revisions.1"/>
  <MG:HunkBlames hunk="/221" lastRevision="/0/@revisions.1"/>
  <MG:HunkBlames hunk="/222" lastRevision="/0/@revisions.1"/>
  <MG:HunkBlames hunk="/223" lastRevision="/0/@revisions.1"/>
  <MG:HunkBlames hunk="/224" lastRevision="/0/@revisions.1"/>
  <MG:HunkBlames hunk="/226" lastRevision="/0/@revisions.5"/>
  <MG:HunkBlames hunk="/227" lastRevision="/0/@revisions.1"/>
  <MG:HunkBlames hunk="/233" lastRevision="/0/@revisions.5"/>
  <MG:HunkBlames hunk="/234" lastRevision="/0/@revisions.5"/>
  <MG:HunkBlames hunk="/235" lastRevision="/0/@revisions.5"/>
  <MG:HunkBlames hunk="/236" lastRevision="/0/@revisions.5"/>
  <MG:HunkBlames hunk="/238" lastRevision="/0/@revisions.5"/>
  <MG:HunkBlames hunk="/239" lastRevision="/0/@revisions.5"/>
  <MG:HunkBlames hunk="/240" lastRevision="/0/@revisions.5"/>
  <MG:HunkBlames hunk="/241" lastRevision="/0/@revisions.5"/>
  <MG:HunkBlames hunk="/241" lastRevision="/0/@revisions.1"/>
  <MG:HunkBlames hunk="/242" lastRevision="/0/@revisions.5"/>
  <MG:HunkBlames hunk="/244" lastRevision="/0/@revisions.5"/>
  <MG:HunkBlames hunk="/245" lastRevision="/0/@revisions.5"/>
  <MG:HunkBlames hunk="/246" lastRevision="/0/@revisions.5"/>
  <MG:HunkBlames hunk="/247" lastRevision="/0/@revisions.5"/>
  <MG:HunkBlames hunk="/248" lastRevision="/0/@revisions.5"/>
  <MG:HunkBlames hunk="/249" lastRevision="/0/@revisions.5"/>
  <MG:HunkBlames hunk="/250" lastRevision="/0/@revisions.1"/>
  <MG:HunkBlames hunk="/252" lastRevision="/0/@revisions.5"/>
  <MG:HunkBlames hunk="/257" lastRevision="/0/@revisions.5"/>
  <MG:HunkBlames hunk="/257" lastRevision="/0/@revisions.1"/>
  <MG:HunkBlames hunk="/258" lastRevision="/0/@revisions.6"/>
  <MG:HunkBlames hunk="/259" lastRevision="/0/@revisions.5"/>
  <MG:HunkBlames hunk="/262" lastRevision="/0/@revisions.6"/>
  <MG:HunkBlames hunk="/263" lastRevision="/0/@revisions.6"/>
  <MG:HunkBlames hunk="/264" lastRevision="/0/@revisions.6"/>
  <MG:HunkBlames hunk="/265" lastRevision="/0/@revisions.6"/>
  <MG:HunkBlames hunk="/266" lastRevision="/0/@revisions.6"/>
  <MG:HunkBlames hunk="/267" lastRevision="/0/@revisions.6"/>
  <MG:HunkBlames hunk="/255" lastRevision="/0/@revisions.1"/>
  <MG:HunkBlames hunk="/256" lastRevision="/0/@revisions.5"/>
  <MG:HunkBlames hunk="/274" lastRevision="/0/@revisions.7"/>
  <MG:HunkBlames hunk="/356" lastRevision="/0/@revisions.20"/>
  <MG:HunkBlames hunk="/398" lastRevision="/0/@revisions.13"/>
  <MG:HunkBlames hunk="/353" lastRevision="/0/@revisions.13"/>
  <MG:HunkBlames hunk="/354" lastRevision="/0/@revisions.20"/>
  <MG:HunkBlames hunk="/399" lastRevision="/0/@revisions.21"/>
  <MG:HunkBlames hunk="/399" lastRevision="/0/@revisions.20"/>
  <MG:HunkBlames hunk="/357" lastRevision="/0/@revisions.20"/>
  <MG:HunkBlames hunk="/292" lastRevision="/0/@revisions.13"/>
  <MG:HunkBlames hunk="/402" lastRevision="/0/@revisions.13"/>
  <MG:HunkBlames hunk="/403" lastRevision="/0/@revisions.13"/>
  <MG:HunkBlames hunk="/406" lastRevision="/0/@revisions.21"/>
  <MG:HunkBlames hunk="/407" lastRevision="/0/@revisions.13"/>
  <MG:HunkBlames hunk="/408" lastRevision="/0/@revisions.13"/>
  <MG:HunkBlames hunk="/408" lastRevision="/0/@revisions.14"/>
  <MG:HunkBlames hunk="/409" lastRevision="/0/@revisions.13"/>
  <MG:HunkBlames hunk="/410" lastRevision="/0/@revisions.13"/>
  <MG:HunkBlames hunk="/410" lastRevision="/0/@revisions.21"/>
  <MG:HunkBlames hunk="/411" lastRevision="/0/@revisions.13"/>
  <MG:HunkBlames hunk="/412" lastRevision="/0/@revisions.13"/>
  <MG:HunkBlames hunk="/280" lastRevision="/0/@revisions.6"/>
  <MG:HunkBlames hunk="/280" lastRevision="/0/@revisions.1"/>
  <MG:HunkBlames hunk="/280" lastRevision="/0/@revisions.11"/>
  <MG:HunkBlames hunk="/280" lastRevision="/0/@revisions.5"/>
  <MG:HunkBlames hunk="/280" lastRevision="/0/@revisions.7"/>
  <MG:HunkBlames hunk="/280" lastRevision="/0/@revisions.9"/>
  <MG:HunkBlames hunk="/293" lastRevision="/0/@revisions.13"/>
  <MG:HunkBlames hunk="/413" lastRevision="/0/@revisions.13"/>
  <MG:HunkBlames hunk="/414" lastRevision="/0/@revisions.13"/>
  <MG:HunkBlames hunk="/415" lastRevision="/0/@revisions.13"/>
  <MG:HunkBlames hunk="/294" lastRevision="/0/@revisions.13"/>
  <MG:HunkBlames hunk="/295" lastRevision="/0/@revisions.13"/>
  <MG:HunkBlames hunk="/350" lastRevision="/0/@revisions.13"/>
  <MG:HunkBlames hunk="/360" lastRevision="/0/@revisions.20"/>
  <MG:HunkBlames hunk="/380" lastRevision="/0/@revisions.21"/>
  <MG:HunkBlames hunk="/363" lastRevision="/0/@revisions.13"/>
  <MG:HunkBlames hunk="/364" lastRevision="/0/@revisions.13"/>
  <MG:HunkBlames hunk="/365" lastRevision="/0/@revisions.13"/>
  <MG:HunkBlames hunk="/366" lastRevision="/0/@revisions.13"/>
  <MG:HunkBlames hunk="/296" lastRevision="/0/@revisions.13"/>
  <MG:HunkBlames hunk="/428" lastRevision="/0/@revisions.13"/>
  <MG:HunkBlames hunk="/429" lastRevision="/0/@revisions.13"/>
  <MG:HunkBlames hunk="/430" lastRevision="/0/@revisions.13"/>
  <MG:HunkBlames hunk="/431" lastRevision="/0/@revisions.21"/>
  <MG:HunkBlames hunk="/432" lastRevision="/0/@revisions.13"/>
  <MG:HunkBlames hunk="/434" lastRevision="/0/@revisions.13"/>
  <MG:HunkBlames hunk="/435" lastRevision="/0/@revisions.13"/>
  <MG:HunkBlames hunk="/417" lastRevision="/0/@revisions.13"/>
  <MG:HunkBlames hunk="/418" lastRevision="/0/@revisions.21"/>
  <MG:HunkBlames hunk="/419" lastRevision="/0/@revisions.13"/>
  <MG:HunkBlames hunk="/419" lastRevision="/0/@revisions.14"/>
  <MG:HunkBlames hunk="/420" lastRevision="/0/@revisions.13"/>
  <MG:HunkBlames hunk="/421" lastRevision="/0/@revisions.13"/>
  <MG:HunkBlames hunk="/421" lastRevision="/0/@revisions.14"/>
  <MG:HunkBlames hunk="/422" lastRevision="/0/@revisions.13"/>
  <MG:HunkBlames hunk="/423" lastRevision="/0/@revisions.13"/>
  <MG:HunkBlames hunk="/424" lastRevision="/0/@revisions.13"/>
  <MG:HunkBlames hunk="/425" lastRevision="/0/@revisions.21"/>
  <MG:HunkBlames hunk="/426" lastRevision="/0/@revisions.13"/>
  <MG:HunkBlames hunk="/416" lastRevision="/0/@revisions.13"/>
  <MG:HunkBlames hunk="/416" lastRevision="/0/@revisions.20"/>
  <MG:HunkBlames hunk="/329" lastRevision="/0/@revisions.14"/>
  <MG:HunkBlames hunk="/352" lastRevision="/0/@revisions.14"/>
  <MG:HunkBlames hunk="/297" lastRevision="/0/@revisions.13"/>
  <MG:HunkBlames hunk="/298" lastRevision="/0/@revisions.13"/>
  <MG:HunkBlames hunk="/299" lastRevision="/0/@revisions.13"/>
  <MG:HunkBlames hunk="/300" lastRevision="/0/@revisions.13"/>
  <MG:HunkBlames hunk="/301" lastRevision="/0/@revisions.13"/>
  <MG:HunkBlames hunk="/302" lastRevision="/0/@revisions.13"/>
  <MG:HunkBlames hunk="/303" lastRevision="/0/@revisions.13"/>
  <MG:HunkBlames hunk="/304" lastRevision="/0/@revisions.13"/>
  <MG:HunkBlames hunk="/305" lastRevision="/0/@revisions.13"/>
  <MG:HunkBlames hunk="/306" lastRevision="/0/@revisions.13"/>
  <MG:HunkBlames hunk="/307" lastRevision="/0/@revisions.13"/>
  <MG:HunkBlames hunk="/308" lastRevision="/0/@revisions.13"/>
  <MG:HunkBlames hunk="/309" lastRevision="/0/@revisions.13"/>
  <MG:HunkBlames hunk="/310" lastRevision="/0/@revisions.13"/>
  <MG:HunkBlames hunk="/311" lastRevision="/0/@revisions.13"/>
  <MG:HunkBlames hunk="/312" lastRevision="/0/@revisions.13"/>
  <MG:HunkBlames hunk="/313" lastRevision="/0/@revisions.13"/>
  <MG:HunkBlames hunk="/315" lastRevision="/0/@revisions.13"/>
  <MG:HunkBlames hunk="/316" lastRevision="/0/@revisions.13"/>
  <MG:HunkBlames hunk="/317" lastRevision="/0/@revisions.13"/>
  <MG:HunkBlames hunk="/319" lastRevision="/0/@revisions.13"/>
  <MG:HunkBlames hunk="/322" lastRevision="/0/@revisions.14"/>
  <MG:HunkBlames hunk="/323" lastRevision="/0/@revisions.14"/>
  <MG:HunkBlames hunk="/324" lastRevision="/0/@revisions.14"/>
  <MG:HunkBlames hunk="/394" lastRevision="/0/@revisions.14"/>
  <MG:HunkBlames hunk="/395" lastRevision="/0/@revisions.20"/>
  <MG:HunkBlames hunk="/385" lastRevision="/0/@revisions.15"/>
  <MG:HunkBlames hunk="/387" lastRevision="/0/@revisions.21"/>
  <MG:HunkBlames hunk="/384" lastRevision="/0/@revisions.14"/>
  <MG:HunkBlames hunk="/368" lastRevision="/0/@revisions.14"/>
  <MG:HunkBlames hunk="/369" lastRevision="/0/@revisions.14"/>
  <MG:HunkBlames hunk="/370" lastRevision="/0/@revisions.14"/>
  <MG:HunkBlames hunk="/371" lastRevision="/0/@revisions.14"/>
  <MG:HunkBlames hunk="/372" lastRevision="/0/@revisions.14"/>
  <MG:HunkBlames hunk="/373" lastRevision="/0/@revisions.14"/>
  <MG:HunkBlames hunk="/374" lastRevision="/0/@revisions.14"/>
  <MG:HunkBlames hunk="/375" lastRevision="/0/@revisions.14"/>
  <MG:HunkBlames hunk="/376" lastRevision="/0/@revisions.18"/>
  <MG:HunkBlames hunk="/377" lastRevision="/0/@revisions.15"/>
  <MG:HunkBlames hunk="/378" lastRevision="/0/@revisions.13"/>
  <MG:HunkBlames hunk="/378" lastRevision="/0/@revisions.15"/>
  <MG:HunkBlames hunk="/379" lastRevision="/0/@revisions.13"/>
  <MG:HunkBlames hunk="/437" lastRevision="/0/@revisions.14"/>
  <MG:HunkBlames hunk="/438" lastRevision="/0/@revisions.21"/>
  <MG:HunkBlames hunk="/439" lastRevision="/0/@revisions.21"/>
  <MG:HunkBlames hunk="/460" lastRevision="/0/@revisions.41"/>
  <MG:HunkBlames hunk="/401" lastRevision="/0/@revisions.13"/>
  <MG:HunkBlames hunk="/401" lastRevision="/0/@revisions.21"/>
  <MG:HunkBlames hunk="/401" lastRevision="/0/@revisions.20"/>
  <MG:HunkBlames hunk="/400" lastRevision="/0/@revisions.13"/>
  <MG:HunkBlames hunk="/450" lastRevision="/0/@revisions.14"/>
  <MG:HunkBlames hunk="/452" lastRevision="/0/@revisions.31"/>
  <MG:HunkBlames hunk="/454" lastRevision="/0/@revisions.14"/>
  <MG:HunkBlames hunk="/455" lastRevision="/0/@revisions.14"/>
  <MG:HunkBlames hunk="/456" lastRevision="/0/@revisions.26"/>
  <MG:HunkBlames hunk="/457" lastRevision="/0/@revisions.21"/>
  <MG:HunkBlames hunk="/458" lastRevision="/0/@revisions.18"/>
  <MG:HunkBlames hunk="/459" lastRevision="/0/@revisions.14"/>
  <MG:HunkBlames hunk="/446" lastRevision="/0/@revisions.26"/>
  <MG:HunkBlames hunk="/447" lastRevision="/0/@revisions.13"/>
  <MG:HunkBlames hunk="/447" lastRevision="/0/@revisions.15"/>
  <MG:HunkBlames hunk="/447" lastRevision="/0/@revisions.14"/>
  <MG:HunkBlames hunk="/448" lastRevision="/0/@revisions.15"/>
  <MG:HunkBlames hunk="/465" lastRevision="/0/@revisions.18"/>
  <MG:HunkBlames hunk="/462" lastRevision="/0/@revisions.41"/>
  <MG:HunkBlames hunk="/463" lastRevision="/0/@revisions.41"/>
  <MG:HunkBlames hunk="/467" lastRevision="/0/@revisions.13"/>
  <MG:HunkBlames hunk="/467" lastRevision="/0/@revisions.15"/>
  <MG:HunkBlames hunk="/468" lastRevision="/0/@revisions.13"/>
  <MG:HunkBlames hunk="/469" lastRevision="/0/@revisions.42"/>
  <MG:HunkBlames hunk="/469" lastRevision="/0/@revisions.13"/>
  <MG:HunkBlames hunk="/469" lastRevision="/0/@revisions.18"/>
  <MG:HunkBlames hunk="/469" lastRevision="/0/@revisions.26"/>
  <MG:HunkBlames hunk="/469" lastRevision="/0/@revisions.36"/>
  <MG:HunkBlames hunk="/469" lastRevision="/0/@revisions.31"/>
  <MG:HunkBlames hunk="/469" lastRevision="/0/@revisions.15"/>
  <MG:HunkBlames hunk="/469" lastRevision="/0/@revisions.21"/>
  <MG:HunkBlames hunk="/469" lastRevision="/0/@revisions.14"/>
  <MG:HunkBlames hunk="/469" lastRevision="/0/@revisions.43"/>
  <MG:HunkBlames hunk="/469" lastRevision="/0/@revisions.41"/>
  <MG:HunkBlames hunk="/469" lastRevision="/0/@revisions.22"/>
  <MG:HunkBlames hunk="/470" lastRevision="/0/@revisions.13"/>
  <MG:HunkBlames hunk="/471" lastRevision="/0/@revisions.13"/>
  <MG:HunkBlames hunk="/471" lastRevision="/0/@revisions.36"/>
  <MG:HunkBlames hunk="/472" lastRevision="/0/@revisions.13"/>
  <MG:HunkBlames hunk="/510" lastRevision="/0/@revisions.48"/>
  <MG:HunkBlames hunk="/474" lastRevision="/0/@revisions.13"/>
  <MG:HunkBlames hunk="/474" lastRevision="/0/@revisions.14"/>
  <MG:HunkBlames hunk="/475" lastRevision="/0/@revisions.14"/>
  <MG:HunkBlames hunk="/476" lastRevision="/0/@revisions.13"/>
  <MG:HunkBlames hunk="/476" lastRevision="/0/@revisions.41"/>
  <MG:HunkBlames hunk="/476" lastRevision="/0/@revisions.21"/>
  <MG:HunkBlames hunk="/476" lastRevision="/0/@revisions.14"/>
  <MG:HunkBlames hunk="/476" lastRevision="/0/@revisions.43"/>
  <MG:HunkBlames hunk="/478" lastRevision="/0/@revisions.41"/>
  <MG:HunkBlames hunk="/479" lastRevision="/0/@revisions.41"/>
  <MG:HunkBlames hunk="/480" lastRevision="/0/@revisions.14"/>
  <MG:HunkBlames hunk="/481" lastRevision="/0/@revisions.14"/>
  <MG:HunkBlames hunk="/482" lastRevision="/0/@revisions.14"/>
  <MG:HunkBlames hunk="/483" lastRevision="/0/@revisions.41"/>
  <MG:HunkBlames hunk="/484" lastRevision="/0/@revisions.14"/>
  <MG:HunkBlames hunk="/485" lastRevision="/0/@revisions.41"/>
  <MG:HunkBlames hunk="/486" lastRevision="/0/@revisions.26"/>
  <MG:HunkBlames hunk="/487" lastRevision="/0/@revisions.41"/>
  <MG:HunkBlames hunk="/488" lastRevision="/0/@revisions.41"/>
  <MG:HunkBlames hunk="/489" lastRevision="/0/@revisions.18"/>
  <MG:HunkBlames hunk="/490" lastRevision="/0/@revisions.41"/>
  <MG:HunkBlames hunk="/491" lastRevision="/0/@revisions.43"/>
  <MG:HunkBlames hunk="/492" lastRevision="/0/@revisions.43"/>
  <MG:HunkBlames hunk="/493" lastRevision="/0/@revisions.43"/>
  <MG:HunkBlames hunk="/494" lastRevision="/0/@revisions.41"/>
  <MG:HunkBlames hunk="/495" lastRevision="/0/@revisions.42"/>
  <MG:HunkBlames hunk="/495" lastRevision="/0/@revisions.41"/>
  <MG:HunkBlames hunk="/496" lastRevision="/0/@revisions.13"/>
  <MG:HunkBlames hunk="/496" lastRevision="/0/@revisions.14"/>
  <MG:HunkBlames hunk="/496" lastRevision="/0/@revisions.43"/>
  <MG:HunkBlames hunk="/497" lastRevision="/0/@revisions.13"/>
  <MG:HunkBlames hunk="/497" lastRevision="/0/@revisions.36"/>
  <MG:HunkBlames hunk="/497" lastRevision="/0/@revisions.22"/>
  <MG:HunkBlames hunk="/498" lastRevision="/0/@revisions.13"/>
  <MG:Content loc="63" size="961" file="/0/@files.7" revision="/0/@revisions.1"/>
  <MG:Content loc="155" size="4765" file="/0/@files.7" revision="/0/@revisions.5"/>
  <MG:Content loc="226" size="6475" file="/0/@files.7" revision="/0/@revisions.6"/>
  <MG:Content loc="268" size="7715" file="/0/@files.7" revision="/0/@revisions.7"/>
  <MG:Content loc="267" size="7710" file="/0/@files.7" revision="/0/@revisions.9"/>
  <MG:Content loc="22" size="427" file="/0/@files.12" revision="/0/@revisions.13"/>
  <MG:Content loc="51" size="1308" file="/0/@files.14" revision="/0/@revisions.13"/>
  <MG:Content loc="23" size="381" file="/0/@files.13" revision="/0/@revisions.13"/>
  <MG:Content loc="268" size="7782" file="/0/@files.7" revision="/0/@revisions.11"/>
  <MG:Content loc="23" size="393" file="/0/@files.15" revision="/0/@revisions.13"/>
  <MG:Content loc="32" size="649" file="/0/@files.16" revision="/0/@revisions.13"/>
  <MG:Content loc="11" size="320" file="/0/@files.21" revision="/0/@revisions.13"/>
  <MG:Content loc="24" size="520" file="/0/@files.17" revision="/0/@revisions.13"/>
  <MG:Content loc="19" size="804" file="/0/@files.24" revision="/0/@revisions.13"/>
  <MG:Content loc="35" size="1236" file="/0/@files.23" revision="/0/@revisions.13"/>
  <MG:Content loc="69" size="2150" file="/0/@files.22" revision="/0/@revisions.13"/>
  <MG:Content loc="106" size="2889" file="/0/@files.25" revision="/0/@revisions.13"/>
  <MG:Content loc="52" size="1312" file="/0/@files.14" revision="/0/@revisions.14"/>
  <MG:Content loc="33" size="657" file="/0/@files.16" revision="/0/@revisions.14"/>
  <MG:Content loc="11" size="289" file="/0/@files.26" revision="/0/@revisions.14"/>
  <MG:Content loc="69" size="2151" file="/0/@files.22" revision="/0/@revisions.14"/>
  <MG:Content loc="20" size="826" file="/0/@files.24" revision="/0/@revisions.14"/>
  <MG:Content loc="11" size="289" file="/0/@files.26" revision="/0/@revisions.16"/>
  <MG:Content loc="87" size="2661" file="/0/@files.25" revision="/0/@revisions.14"/>
  <MG:Content loc="100" size="2975" file="/0/@files.25" revision="/0/@revisions.15"/>
  <MG:Content loc="110" size="3296" file="/0/@files.25" revision="/0/@revisions.18"/>
  <MG:Content loc="26" size="574" file="/0/@files.12" revision="/0/@revisions.19"/>
  <MG:Content loc="27" size="528" file="/0/@files.13" revision="/0/@revisions.19"/>
  <MG:Content loc="56" size="1459" file="/0/@files.14" revision="/0/@revisions.19"/>
  <MG:Content loc="27" size="540" file="/0/@files.15" revision="/0/@revisions.19"/>
  <MG:Content loc="15" size="436" file="/0/@files.26" revision="/0/@revisions.19"/>
  <MG:Content loc="37" size="804" file="/0/@files.16" revision="/0/@revisions.19"/>
  <MG:Content loc="28" size="667" file="/0/@files.17" revision="/0/@revisions.19"/>
  <MG:Content loc="15" size="467" file="/0/@files.21" revision="/0/@revisions.19"/>
  <MG:Content loc="39" size="1383" file="/0/@files.23" revision="/0/@revisions.19"/>
  <MG:Content loc="73" size="2298" file="/0/@files.22" revision="/0/@revisions.19"/>
  <MG:Content loc="33" size="605" file="/0/@files.13" revision="/0/@revisions.20"/>
  <MG:Content loc="24" size="973" file="/0/@files.24" revision="/0/@revisions.19"/>
  <MG:Content loc="38" size="879" file="/0/@files.12" revision="/0/@revisions.20"/>
  <MG:Content loc="61" size="1781" file="/0/@files.14" revision="/0/@revisions.20"/>
  <MG:Content loc="75" size="2479" file="/0/@files.22" revision="/0/@revisions.20"/>
  <MG:Content loc="27" size="528" file="/0/@files.13" revision="/0/@revisions.21"/>
  <MG:Content loc="41" size="1015" file="/0/@files.12" revision="/0/@revisions.21"/>
  <MG:Content loc="110" size="3298" file="/0/@files.25" revision="/0/@revisions.20"/>
  <MG:Content loc="86" size="2748" file="/0/@files.22" revision="/0/@revisions.21"/>
  <MG:Content loc="63" size="1882" file="/0/@files.14" revision="/0/@revisions.21"/>
  <MG:Content loc="24" size="975" file="/0/@files.24" revision="/0/@revisions.22"/>
  <MG:Content loc="63" size="2254" file="/0/@files.23" revision="/0/@revisions.21"/>
  <MG:Content loc="110" size="3327" file="/0/@files.25" revision="/0/@revisions.21"/>
  <MG:Content loc="109" size="3317" file="/0/@files.25" revision="/0/@revisions.22"/>
  <MG:Content loc="64" size="2271" file="/0/@files.23" revision="/0/@revisions.23"/>
  <MG:Content loc="12" size="404" file="/0/@files.29" revision="/0/@revisions.30"/>
  <MG:Content loc="27" size="540" file="/0/@files.13" revision="/0/@revisions.33"/>
  <MG:Content loc="120" size="3564" file="/0/@files.25" revision="/0/@revisions.32"/>
  <MG:Content loc="115" size="3484" file="/0/@files.25" revision="/0/@revisions.26"/>
  <MG:Content loc="120" size="3566" file="/0/@files.25" revision="/0/@revisions.31"/>
  <MG:Content loc="26" size="576" file="/0/@files.12" revision="/0/@revisions.34"/>
  <MG:Content loc="29" size="738" file="/0/@files.30" revision="/0/@revisions.34"/>
  <MG:Content loc="63" size="1964" file="/0/@files.14" revision="/0/@revisions.35"/>
  <MG:Content loc="28" size="586" file="/0/@files.15" revision="/0/@revisions.35"/>
  <MG:Content loc="16" size="475" file="/0/@files.26" revision="/0/@revisions.35"/>
  <MG:Content loc="15" size="479" file="/0/@files.21" revision="/0/@revisions.35"/>
  <MG:Content loc="37" size="840" file="/0/@files.16" revision="/0/@revisions.35"/>
  <MG:Content loc="23" size="1008" file="/0/@files.24" revision="/0/@revisions.35"/>
  <MG:Content loc="86" size="2852" file="/0/@files.22" revision="/0/@revisions.35"/>
  <MG:Content loc="66" size="2340" file="/0/@files.23" revision="/0/@revisions.35"/>
  <MG:Content loc="29" size="738" file="/0/@files.30" revision="/0/@revisions.39"/>
  <MG:Content loc="133" size="3865" file="/0/@files.25" revision="/0/@revisions.36"/>
  <MG:Content loc="171" size="5109" file="/0/@files.25" revision="/0/@revisions.41"/>
  <MG:Content loc="171" size="5098" file="/0/@files.25" revision="/0/@revisions.42"/>
  <MG:Content loc="200" size="5858" file="/0/@files.25" revision="/0/@revisions.43"/>
  <MG:Content loc="44" size="1048" file="/0/@files.32" revision="/0/@revisions.44"/>
  <MG:Content loc="20" size="516" file="/0/@files.25" revision="/0/@revisions.44"/>
  <MG:Content loc="44" size="1048" file="/0/@files.32" revision="/0/@revisions.45"/>
  <MG:Content loc="171" size="5659" file="/0/@files.34" revision="/0/@revisions.44"/>
  <MG:Content loc="171" size="5659" file="/0/@files.34" revision="/0/@revisions.45"/>
  <MG:Content loc="176" size="5857" file="/0/@files.34" revision="/0/@revisions.47"/>
  <MG:Content loc="177" size="5858" file="/0/@files.34" revision="/0/@revisions.48"/>
  <MG:Content loc="176" size="5857" file="/0/@files.34" revision="/0/@revisions.49"/>
</xmi:XMI>
