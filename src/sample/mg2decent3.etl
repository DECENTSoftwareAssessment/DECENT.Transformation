import "famix-init.etl";
pre mgInitPre {

  //Some initialization
  //More generic (might be simplified)
  "Running mg2decent v3".println();
  
  /********************************** INIT (1x) *******************************/
  
  var Model : new DECENT!Model;
  Model.artifactTypeHierarchy = new DECENT!ArtifactTypeHierarchy;
  Model.agentPool = new DECENT!AgentPool;
  Model.attributePool = new DECENT!AttributePool;
  //Model.projects = new List;
  
  var BranchArtifactType = new DECENT!ArtifactType;
  BranchArtifactType.name = "Branch";
  Model.artifactTypeHierarchy.types.add(BranchArtifactType);
    
  var FilePathAttribute = new DECENT!Attribute;
  FilePathAttribute.name = "FilePath";
  Model.attributePool.attributes.add(FilePathAttribute);

  var BranchAttribute = new DECENT!Attribute;
  BranchAttribute.name = "Branch";
  Model.attributePool.attributes.add(BranchAttribute);


  var FileSizeAttribute = new DECENT!Attribute;
  FileSizeAttribute.name = "FileSize";
  Model.attributePool.attributes.add(FileSizeAttribute);

  var LOCAttribute = new DECENT!Attribute;
  LOCAttribute.name = "LOC";
  Model.attributePool.attributes.add(LOCAttribute);

  var LinesAddedAttribute = new DECENT!Attribute;
  LinesAddedAttribute.name = "LinesAdded";
  Model.attributePool.attributes.add(LinesAddedAttribute);

  var LinesRemovedAttribute = new DECENT!Attribute;
  LinesRemovedAttribute.name = "LinesRemoved";
  Model.attributePool.attributes.add(LinesRemovedAttribute);

  var IsBugFix = new DECENT!Attribute;
  IsBugFix.name = "IsBugFix";
  Model.attributePool.attributes.add(IsBugFix);

  var BugFixCount = new DECENT!Attribute;
  BugFixCount.name = "BugFixCount";
  Model.attributePool.attributes.add(BugFixCount);


  //extension
  var FragmentCount = new DECENT!Attribute;
  FragmentCount.name = "FragmentCount";
  Model.attributePool.attributes.add(FragmentCount);

  var HunkCount = new DECENT!Attribute;
  HunkCount.name = "HunkCount";
  Model.attributePool.attributes.add(HunkCount);

  var Message = new DECENT!Attribute;
  Message.name = "Message";
  Model.attributePool.attributes.add(Message);


  var Project = new DECENT!Project;
  Project.name = MG!Model.allInstances().first().name;
  Model.projects.add(Project);
    
  for (b in MG!Branch.allInstances()){
	var Location = new DECENT!Location;
	Location.name = b.name;
	Location.type = BranchArtifactType;
	Project.location.add(Location);
//	var RootArtifact = new DECENT!Artifact;
//	RootArtifact.name = "/";
//	Location.rootArtifact = RootArtifact;
  }
  
  //TODO: handle all branches
  var RootArtifact = Project.location.select(l|l.name = 'master').first().rootArtifact;

  var artifactCount = MG!File.allInstances().size();
  var processedCount = 0;

  var ruleBased = true;

  if (not ruleBased) {

	  for (p in MG!People.allInstances()){
		("Transforming agent "+p.name).println();
		var a = new DECENT!Agent;
		a.name = p.name;
		a.eMail = p.email;
		Model.agentPool.agents.add(a);
		Model.projects.get(0).agents.add(a);
	  }

	  //start preprocessing (building the artifact tree)
	  var MGRootArtifact = MG!File.allInstances().select(f|f.file_name = 'ROOT');
	  ("Pre processing "+MGRootArtifact.get(0).file_name+" : " + RootArtifact.name).println();
	  MGRootArtifact.get(0).traverseChildren(RootArtifact);
  }
}

post mgInitPost{
  ("Post processing... ").println();
  for (a in DECENT!Artifact.allInstances()) {
  	(""+a.name).println();
  	for (s in a.states) {
  		for (v in s.values.select(v|v.ofAttribute = FileSizeAttribute)) {
  			("  " + a.name + " in " + s.ID + " : " + v.ofAttribute.name + " = " + v.content).println();
  		}
  		
  		for (p in s.previous) {
  			("  " +p.ID + " ("+p.artifact.name+")" + " -> " +s.ID +" ("+s.artifact.name+")").println();
  		}
  	}
  }
  
    //TODO: adjust branching structure
}

operation String replaceExtension() : String {
    return self.replace('\\.h','.cpp');
}

operation String replaceInclude() : String {
    return self.replace('include','src');
}

operation dumpFileCopies() {
  for (f in MG!File.allInstances()) {
    (""+f.file_name).println();
  
  	for (a in f.actions) {
  		("  " +a.type + " "+a.revision.commit_id + " " + a.revision.message.trim()).println();
  		if (a.copy.isDefined()) {
  			("  "+a.copy.fromRevision.commit_id +" ("+a.copy.fromFile.file_name+")" + " -> "+ a.revision.commit_id+ " ("+f.file_name+")").println();
  		}
  	}
  }
}

operation Any addValue(attribute : DECENT!Attribute, content : String) : DECENT!Value {
    var value : new DECENT!StringValue;
    value.name = attribute.name;
    value.content = content;
    self.values.add(value);
    value.ofAttribute = attribute;
    //TODO: outsource these
//    self.artifact.attributes.add(attribute);
//    attribute.artifactTypes.add(self.artifact.type);
    return value;
}

operation Any addValue(attribute : DECENT!Attribute, content : Real) : DECENT!Value {
    var value : new DECENT!DoubleValue;
    value.name = attribute.name;
    value.content = content;
    self.values.add(value);
    value.ofAttribute = attribute;
//    self.artifact.attributes.add(attribute);
//    attribute.artifactTypes.add(self.artifact.type);
    return value;
}

operation Any addValue(attribute : DECENT!Attribute, content : Collection(String)) : DECENT!Value {
    var value : new DECENT!StringListValue;
    value.name = attribute.name;
    value.content = content;
    self.values.add(value);
    value.ofAttribute = attribute;
//    self.artifact.attributes.add(attribute);
//    attribute.artifactTypes.add(self.artifact.type);
    return value;
}


operation DECENT!Activity addDelta(attribute : DECENT!Attribute) : DECENT!Delta {
    return self.addDelta(attribute, self.targetState.values.select(v|v.ofAttribute = attribute).first());
}


operation DECENT!Activity addDelta(attribute : DECENT!Attribute, value : DECENT!Value) : DECENT!Delta {
    var delta : new DECENT!Delta;
    delta.onAttribute = attribute;
    delta.targetValue = value;
    if (self.state.isDefined()){
	    delta.sourceValue = self.state.values.select(v|v.ofAttribute = attribute).first();
        delta.change = delta.targetValue.content - delta.sourceValue.content;
    } else {
        delta.change = delta.targetValue.content;
    }
    self.deltas.add(delta);
    return delta;
}

operation DECENT!Artifact setArtifactType(fileType : String) {
    var artifactType = DECENT!ArtifactType.allInstances().
        select(at|at.name = fileType).first;
    if (not artifactType.isDefined()){
        //("  Artifact type not defined. Initializing "+fcl.child.file_type+" ").println();
        artifactType = new DECENT!ArtifactType;
        artifactType.name = fileType;
        Model.artifactTypeHierarchy.types.add(artifactType);
    }
    self.type = artifactType;

}

rule People2Agent 
    transform p : MG!People 
    to a : DECENT!Agent {
    guard : ruleBased
    
	a.name = p.name;
    ("Transforming agent "+a.name).println();
	a.eMail = p.email;
	Model.agentPool.agents.add(a);
	Model.projects.get(0).agents.add(a);
}

//rule-based
rule File2Artifact 
    transform f : MG!File 
    to a : DECENT!Artifact {
    guard : ruleBased
    
    a.name = f.file_name;
   	a.setArtifactType(f.file_type);
    var parentName = "ROOT";
    if (f.parentLinks.size()>0) {
    	//("Adding parents... "+f.parentLinks.size()).println();
	    a.parent = f.parentLinks.get(0).parent.equivalent();
	    parentName = a.parent.name;
    } else {
    	//TODO: handle branches properly
    	DECENT!Location.allInstances.select(l|l.name = "master").first().rootArtifact=a;
    }
    ("Transforming artifact "+f.file_name+" ("+f.file_type+") in "+parentName+" ("+processedCount+"/"+artifactCount+" completed)").println();
    
	processedCount = processedCount + 1;
}

rule Action2State 
    transform a : MG!Action
    to s : DECENT!State {
    guard : ruleBased

	s.name = a.revision.rev;
    ("Transforming action "+ a.revision.commit_id + " for " + a.file.file_name).println();
	s.ID = a.revision.commit_id;
	s.artifact = a.file.equivalent();
	s.addValue(FilePathAttribute, a.current_file_path);
	s.addValue(BranchAttribute, a.branch.name);
	
	var lastState = null;
	var aIndex = a.file.actions.indexOf(a);
	if (aIndex > 0) {
		//("  Previous Action "+a.file.actions.at(aIndex-1).revision.commit_id + " mapped to " + a.file.actions.at(aIndex-1).equivalent()).println();
		lastState = a.file.actions.at(aIndex-1).equivalent();
		s.previous.add(lastState);
	}
	
    //dealing with file copies
    //DONE: see notes on this
    //if (a.copy.isDefined()){
    //	var copySourceState = a.copy.fromRevision.actions.select(af|af.file = a.copy.fromFile).first().equivalent();
    //	("  Copy from "+ a.copy.fromFile.equivalent() + " in state " + copySourceState).println();
    //	s.previous.add(copySourceState);
    //}
    
    //dealing with file moves
    //TODO: peform a small study similar to file copies

    var content = a.revision.content.select(c|c.file = a.file).first();
	if (content.isDefined()){
		s.addValue(FileSizeAttribute, a.revision.content.select(c|c.file = a.file).first().size.asDouble());
		s.addValue(LOCAttribute, a.revision.content.select(c|c.file = a.file).first().loc.asDouble());
	}

    s.addValue(FragmentCount, a.revision.lineBlames->select(l|l.file = a.file).size().asDouble());
	
	//TODO: handle activities and deltas (as a post step?)
    var activity = new DECENT!Activity;
    activity.targetState = s;
    activity.state = lastState;            
    activity.date = a.revision.author_date;
    activity.type = a.type;
    activity.agent = a.revision.author.equivalent();
	
    
    var linesAdded = "0".asDouble();
    var linesRemoved = "0".asDouble();
    var difference = "0".asDouble();
    var patchLines = a.revision.patchLines->select(l|l.file = a.file);
    if (patchLines.size() > 0) {
        linesAdded = patchLines.asOrderedSet().first().added.asDouble();
        linesRemoved = patchLines.asOrderedSet().first().removed.asDouble();
        difference = linesAdded - linesRemoved;
    }

    activity.addValue(HunkCount, a.revision.hunks->select(h|h.file = a.file).size().asDouble());
	activity.addValue(Message, a.revision.message);
    activity.addValue(LinesAddedAttribute, linesAdded);
    activity.addValue(LinesRemovedAttribute, linesRemoved);

}

//pre-processing based
operation MG!File traverseChildren(parent : DECENT!Artifact) {
    //NOTE: parent information refers to target artifact, thus "in" is "target" and not "container"
    //TODO: counter is also off.. => need to check for duplicate artifacts and only create if new?
    ("Transforming artifact "+self.file_name+" ("+self.file_type+") in "+parent.name+" ("+processedCount+"/"+artifactCount+" completed)").println();
    
    //processing children
    for (fcl in self.childrenLinks) {
        //("  Linking child artifact "+fcl.child.file_name+"").println();
        var a = DECENT!Artifact.allInstances().select(a|a.name = fcl.child.file_name and a.parent = parent).first();
        //TODO: what if size is > 1?
        if (not a.isDefined()){
	        a = new DECENT!Artifact;
	        a.name = fcl.child.file_name;
	        a.parent = parent; //this should probably be self really..
		    processedCount = processedCount + 1;
        }
        
	    a.setArtifactType(fcl.child.file_type);
        
        //creating states and activities
        //TODO: connect states
        var lastState = null; //naive approach
        
        //TODO: revise using equivalent(s)
        var rIDs = new OrderedSet;
        
        for (ax in MG!Action.allInstances().select(ax|ax.file = fcl.child)){
            var s : new DECENT!State;
            s.name = ax.revision.rev;
            rIDs.add(s.name);
            //s.ID = new Native("java.math.BigInteger")(ax.revision.commit_id.asString());
            s.ID = ax.revision.commit_id;
            a.states.add(s);
            s.addValue(FilePathAttribute, ax.current_file_path);
            s.addValue(BranchAttribute, ax.branch.name);
            //s.addValue(BranchAttribute, rIDs); //test for list values

            var bugFixCount = 0.0;
            if (lastState <> null) {
                bugFixCount = lastState.values.select(v|v.ofAttribute = BugFixCount).first().content;
                s.previous.add(lastState);
                
            }

            s.addValue(BugFixCount, bugFixCount+ax.revision.is_bug_fix.asDouble());
            
            //TODO: check if available
            s.addValue(FragmentCount, ax.revision.lineBlames->select(l|l.file = fcl.child).size().asDouble());
            
            //dealing with file copies
            //TODO: or move in a separate operatation (in post) - set previous state accordingly
            if (ax.copy.isDefined()){
                var fromFile = ax.copy.fromFile.file_name;
                //("  Copy of " + fromFile + "").println();
                var sharedStates = DECENT!State.allInstances().select(s|s.ID = ax.copy.fromRevision.commit_id);
                for (ss in sharedStates){
                    var filePathValue = ss.values.select(v|v.ofAttribute = FilePathAttribute).first();
                    //check 
                    if (ss.artifact.name = fromFile and ss <> s) {
                        //("  Source Artifact: "+ ss.artifact.name).println();
                        lastState = ss; //state itself or rather the previous?
                        if (ss.fromActivity.notEmpty()) {
                            lastState = ss.fromActivity.first().state;
                        }
                    }
                    
                }
            }

            var activity = new DECENT!Activity;
            activity.targetState = s;
            activity.date = ax.revision.author_date;
            activity.type = ax.type;
            activity.agent = Model.agentPool.agents.select(agent|agent.name = ax.revision.author.name).first();
            activity.state = lastState;            
            
            //dealing with filesize and base churn values
            var linesAdded = "0".asDouble();
            var linesRemoved = "0".asDouble();
            var difference = "0".asDouble();
            var fileSize = "0".asDouble();
            
            var patchLines = ax.revision.patchLines->select(l|l.file = fcl.child);
            if (patchLines.size() > 0) {
                //TODO: these look more like activity values
                linesAdded = patchLines.asOrderedSet().first().added.asDouble();
                linesRemoved = patchLines.asOrderedSet().first().removed.asDouble();
                
                difference = linesAdded - linesRemoved;
            }
            
            if (lastState.isDefined()) {
                var lastFileSizeValueSet = lastState.values->select(v|v.ofAttribute = FileSizeAttribute);
                if (lastFileSizeValueSet.notEmpty()){
                    //("*****   Last state "+lastState.ID).println();
                    //("*****   Last size "+lastFileSizeValueSet.first().content).println();
                    fileSize = lastFileSizeValueSet.asOrderedSet().first().content + difference;
                } else {
                    //no last file size value?
                }
            } else {
                fileSize = difference;
            }
            ("***** File: " +a.name+" in "+s.ID+": added "+linesAdded+ " removed "+linesRemoved +" size "+fileSize + " difference " + difference + " last state "+lastState.isDefined()).println();
			fileSize = processedCount.asDouble;
            s.addValue(FileSizeAttribute, fileSize);
            
            activity.addDelta(FragmentCount);
            activity.addDelta(FileSizeAttribute);
            activity.addDelta(BugFixCount);
            
            
            activity.addValue(HunkCount, ax.revision.hunks->select(h|h.file = fcl.child).size().asDouble());
			activity.addValue(Message, ax.revision.message);
            activity.addValue(LinesAddedAttribute, linesAdded);
            activity.addValue(LinesRemovedAttribute, linesRemoved);


            
        }
        fcl.child.traverseChildren(a);
     }
}

