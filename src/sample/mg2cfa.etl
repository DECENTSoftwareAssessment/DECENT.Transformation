pre mgInitPre {

  //Some initialization
  //More generic (might be simplified)
  "Running mg2cfn".println();
  
  /********************************** INIT (1x) *******************************/
  var lowerBound = 0;
  var upperBound = 2310;
  upperBound = 600;
}

post mgInitPost{
    ("Post processing... ").println();
    for (s in CFA!GlobalState.allInstances()) {
        for (f in s.fixes) {
            f.totalWeight = f.totalWeight + (1/s.fixes.size().asDouble());
            f.totalBugWeight = f.totalBugWeight + s.weightFactor * (1/s.fixes.size().asDouble());
        }
    }
    for (s in CFA!GlobalState.allInstances()) {
        s.averageWeight = s.totalWeight / s.causes.size();
        s.averageBugWeight = s.totalBugWeight / s.causes.size();
    }
    
	//essentially duplicated from above
    for (s in CFA!ArtifactState.allInstances()) {
        for (f in s.fixes) {
            f.totalWeight = f.totalWeight + (1/s.fixes.size().asDouble());
            f.totalBugWeight = f.totalBugWeight + s.weightFactor * (1/s.fixes.size().asDouble());
        }
    }
    for (s in CFA!ArtifactState.allInstances()) {
        s.averageWeight = s.totalWeight / s.causes.size();
        s.averageBugWeight = s.totalBugWeight / s.causes.size();
    }

    
    //visualization
    var projectName = MG!Model.allInstances().first().name;
    var filename = "/Users/philip-iii/Dev/workspaces/emf/DECENT.Transformations/plantuml/cfa.model.generated."+projectName+"-"+lowerBound+"-"+upperBound+".plantuml";
    var file = new Native("java.io.File") (filename);
    var writer = new Native("java.io.FileWriter") (file);

    //CFA!GlobalState.allInstances().select(s|s.ID <= upperBound and s.ID >= lowerBound).cfaToPlantUML();
    
    writer.close();
    
}

operation Sequence cfaToPlantUML() {
    ("visualizing..").println();
	var output = "";
	("@startuml").printlno();
	("skinparam classArrowColor #444488").printlno();
	("skinparam objectBorderColor #444444").printlno();
	("skinparam objectBackgroundColor #EDEDED").printlno();
	("skinparam classArrowFontStyle bold").printlno();
	("skinparam classArrowFontSize 16").printlno();
	("skinparam classArrowFontColor #AA4444").printlno();
	("").printlno();
	var lastState;
	for (s in self) {
        ("processing object "+s.name).println();
        ("object "+s.name).printlno();
        (s.name+" : hunks = "+s.hunks).printlno();
        (s.name+" : weight factor (bug fix) = "+s.weightFactor).printlno();
        if (lastState.isDefined()) {
            (lastState.name +" - "+s.name).printlno();
        }
        //files?
        var offsetDistance = "\\n\\n";
        
        for (f in s.fixes){
            offsetDistance = offsetDistance + "\\n";
            
            var distance = "";
	        var d = 0;
	        while (d < (s.ID - f.ID)) {
	            distance = distance + "\\n";
	            d = d+1;
	        }
            var label = "weight";
            label = label + ": " + s.weightFactor + "*" + 1 + "/" + s.fixes.size();
            label = label+"="+(s.weightFactor*(1/s.fixes.size().asDouble()));
            label = label + distance;
            
            (s.name +" : fixes = "+f.name +" ("+1+"/"+s.fixes.size()+")").printlno();
/*            (f.name + " \"" + s.name + ":" + 1 + "/" + f.causes.size() + distance + "\""
                 + " <... "
                 + "\"" + offsetDistance + f.name + ":" + 1 + "/" + s.fixes.size() + distance + "\" " + s.name
                 + " : " + label).printlno();
*/                 
            var notename = f.name+"_"+s.name;
			("note \""+s.name + ":" + 1 + "/" + f.causes.size()+" -> "+f.name + ":" + 1 + "/" + s.fixes.size()+"\\n"+label+"\" as " + notename).printlno();
			(f.name + " <..down.. " + notename).printlno();
			(notename + " ..down.. " + s.name).printlno();
    
        }
        for (c in s.causes) {
            (s.name +" : causes = "+c.name +" ("+1+"/"+s.causes.size()+",w=" +(c.weightFactor*(1/c.fixes.size().asDouble()))+ ")").printlno();
        }

        (s.name+" : total cause weight = "+s.totalWeight).printlno();
        (s.name+" : average cause weight = "+s.averageWeight).printlno();
        (s.name+" : total bug cause weight = "+s.totalBugWeight).printlno();
        (s.name+" : average bug cause weight = "+s.averageBugWeight).printlno();

		//essentially duplicated from above...
        for (a in s.artifactStates) {
	        //("object "+a.name).printlno();
        	(a.name+" : hunks = "+a.hunks).printlno();
        	(a.name+" : weight factor (bug fix) = "+a.weightFactor).printlno();
        	
        	(s.name+" --down-- "+a.name).printlno();
        	for (f in a.fixes) {
	            offsetDistance = offsetDistance + "\\n";
	            
	            var distance = "";
		        var d = 0;
		        while (d < (a.ID - f.ID)) {
		            distance = distance + "\\n";
		            d = d+1;
		        }
	            var label = "weight";
	            label = label + ": " + a.weightFactor + "*" + 1 + "/" + a.fixes.size();
	            label = label+"="+(a.weightFactor*(1/a.fixes.size().asDouble()));
	            //label = label + distance;
	            
	            (a.name +" : fixes = "+f.name +" ("+1+"/"+a.fixes.size()+")").printlno();
/*	            (f.name + " \"" + a.name + ":" + 1 + "/" + f.causes.size() + distance + "\""
	                 + " <.left.. "
	                 + "\"" + offsetDistance + f.name + ":" + 1 + "/" + a.fixes.size() + distance + "\" " + a.name
	                 + " : " + label).printlno();
*/	            var notename = f.name+"_"+a.name;
				("note \""+a.name + ":" + 1 + "/" + f.causes.size()+" -> "+f.name + ":" + 1 + "/" + a.fixes.size()+"\\n"+label+"\" as " + notename).printlno();
				(f.name + " <..up.. " + notename).printlno();
				(notename + " ..up.. " + a.name).printlno();
        	}
	        for (c in a.causes) {
	            (a.name +" : causes = "+c.name +" ("+1+"/"+a.causes.size()+",w=" +(c.weightFactor*(1/c.fixes.size().asDouble()))+ ")").printlno();
	        }

	        (a.name+" : total cause weight = "+a.totalWeight).printlno();
	        (a.name+" : average cause weight = "+a.averageWeight).printlno();
	        (a.name+" : total bug cause weight = "+a.totalBugWeight).printlno();
	        (a.name+" : average bug cause weight = "+a.averageBugWeight).printlno();
        }


        lastState = s;
	}
	("@enduml").printlno();
	("finishing..").println();
}

operation String printlno() {
    writer.write(self.replaceAll("(?:[\\w\\d])-(?:[\\w\\d])", "\\.") + "\n");
    writer.flush();
}	

rule Models
    transform s : MG!Model 
    to t : CFA!CFN {
    ("Transforming model "+ s.name +", URI: " +s.uri).println();    
    t.name = s.name;
}

rule Revisions
    transform r : MG!Revision 
    to s : CFA!GlobalState {
    
    guard : /*r.is_bug_fix <> 0 and*/ (r.commit_id <= upperBound and r.commit_id >= lowerBound )
    ("Transforming "+ r.commit_id +" Fix: " +r.is_bug_fix).println();
    s.cfn = r.repository.equivalent();
    s.revision = r;
    s.ID = r.commit_id;
    s.name = "Mr"+r.commit_id;
    s.hunks = r.hunks.size();
    s.bugFix = r.is_bug_fix.asDouble();
    s.weightFactor = r.is_bug_fix.asDouble();

    //s.fixesWeightFactor = 1.asDouble();
    
    //necessary?
    var totalFixCount = 0;
    for (h in r.hunks) {
        totalFixCount = totalFixCount+h.hunkBlame.size();
	}
    
    for (h in r.hunks) {
        for (hb in h.hunkBlame) {
            if (hb.lastRevision.commit_id >= lowerBound) {
	            var cause = hb.lastRevision.equivalent(); 
	            s.fixes.add(cause);
	            cause.causes.add(s); 
	            
	            //necessary?
	            //var weight = 1/totalFixCount.asDouble();
	            //cause.totalWeight = cause.totalWeight + weight;
	            //cause.totalBugWeight = cause.totalBugWeight + s.weightFactor*weight;
            }
        }
    }        
}

rule Actions
    transform a : MG!Action 
    to s : CFA!ArtifactState {
    //TODO: investigate causes for missing links (copy, rename, other?), try branch filtering, etc...
    guard : /*r.is_bug_fix <> 0 and*/ (a.revision.commit_id <= upperBound and a.revision.commit_id >= lowerBound )
    //("Transforming "+ a.file.file_name+"_Mr"+a.revision.commit_id+" Fix: " +a.revision.is_bug_fix).println();
    s.file = a.file;
    s.action = a;
    s.name = a.file.file_name+"_Mr"+a.revision.commit_id;
    s.ID = a.revision.commit_id;
    
    var hunks = a.revision.hunks.select(h|h.file = a.file);
    s.hunks = hunks.size();
    s.bugFix = a.revision.is_bug_fix.asDouble();
    s.weightFactor = a.revision.is_bug_fix.asDouble();

    s.globalState = a.revision.equivalent();

	//consider moving to preprocessing
	//not sure this is needed any longer
	if (a.copy.isDefined()) {
        a.file.~copyFrom = a.copy.fromFile;
	}	

	//consider moving to post for performance
    for (h in hunks) {
        for (hb in h.hunkBlame) {
            if (hb.lastRevision.commit_id >= lowerBound) {
            	//NOTE: using the file name rather than the file seems to fix resolution issues
	            var cause = hb.lastRevision.actions.select(ax|ax.file.file_name = a.file.file_name).first().equivalent();

				if (cause.isUndefined()) {
	            	//NOTE: file name may still be a problem with renaming, try backup approach with file itself
	            	cause = hb.lastRevision.actions.select(ax|ax.file = a.file).first().equivalent();
				}

	            if (cause.isDefined()) {
		            s.fixes.add(cause);
		            cause.causes.add(s); 
	            } 
	            else {
	            	//log and investigate errors (wrong blames or copied/renamed files?)
	            	//("  Cause link for File "+a.file.file_name+" from Revision "+h.revision.commit_id+" to Revision "+hb.lastRevision.commit_id+" cannot be resolved.. Investigate!").println();
/*	            	if (a.file.~copyFrom.isUndefined()) {
	            		if (a.copy.isDefined()) {
				            a.file.~copyFrom = a.copy.fromFile;
	            		} else {
	            			("  Cause link for File "+a.file.file_name+" from Revision "+h.revision.commit_id+" to Revision "+hb.lastRevision.commit_id+" cannot be resolved.. Investigate!").println();
	            		}
	            	}
*/	            	cause = hb.lastRevision.actions.select(ax|ax.file = a.file.~copyFrom).first().equivalent();
		            if (cause.isDefined()) {
			            s.fixes.add(cause);
			            cause.causes.add(s);
		            } else {
		            	("  Cause link for File "+a.file.file_name+" from Revision "+h.revision.commit_id+" to Revision "+hb.lastRevision.commit_id+" still cannot be resolved.. Investigate!").println();
		            } 
	            	
	            }
	            
	            //necessary?
	            //var weight = 1/totalFixCount.asDouble();
	            //cause.totalWeight = cause.totalWeight + weight;
	            //cause.totalBugWeight = cause.totalBugWeight + s.weightFactor*weight;
            }
        }
    }        


}
