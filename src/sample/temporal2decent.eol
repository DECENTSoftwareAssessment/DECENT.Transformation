import "../decent/common.eol";

  "Running temporal2decent".println();

  var Model = DECENT!Model.allInstances().first();

  var attributes = new Map;

  attributes.put("AbsoluteTime","Set of distances to the beginning of time");
  attributes.put("RelativeTime","Set of distances to the first state");
  attributes.put("DistanceTime","Set of distances to previous states");

  attributes.put("AbsoluteTimeVariance","Variance of distances to the beginning of time");
  attributes.put("RelativeTimeVariance","Variance of distances to the first state");
  attributes.put("DistanceTimeVariance","Variance of distances to previous states");

  attributes.put("Revisions","Current number of revisions");
  attributes.put("Lifespan","Lifespan of artifact");
  attributes.put("Age","Age of artifact in state");
  attributes.put("Distance","Distance to previous state");
  
  attributes.put("Frequency","Frequency of changes (=Revisions-1/Age)");
  attributes.put("FrequencyLowerBound","Frequency lower bound (=Revisions-1/Lifespan)");
  attributes.put("FrequencyUpperBound","Frequency upper bound (=Revisions-1/1)");
  attributes.put("FrequencyAverage","Frequency average (=All Revisions-1/Lifespan)");

  Model.addAttributes(attributes);

  var AbsoluteTimeAttribute = DECENT!Attribute.allInstances().select(a|a.name = "AbsoluteTime").first();
  var RelativeTimeAttribute = DECENT!Attribute.allInstances().select(a|a.name = "RelativeTime").first();
  var DistanceTimeAttribute = DECENT!Attribute.allInstances().select(a|a.name = "DistanceTime").first();

  var AbsoluteTimeVarianceAttribute = DECENT!Attribute.allInstances().select(a|a.name = "AbsoluteTimeVariance").first();
  var RelativeTimeVarianceAttribute = DECENT!Attribute.allInstances().select(a|a.name = "RelativeTimeVariance").first();
  var DistanceTimeVarianceAttribute = DECENT!Attribute.allInstances().select(a|a.name = "DistanceTimeVariance").first();

  var RevisionsAttribute = DECENT!Attribute.allInstances().select(a|a.name = "Revisions").first();
  var LifespanAttribute = DECENT!Attribute.allInstances().select(a|a.name = "Lifespan").first();
  var AgeAttribute = DECENT!Attribute.allInstances().select(a|a.name = "Age").first();
  var DistanceAttribute = DECENT!Attribute.allInstances().select(a|a.name = "Distance").first();
  
  var FrequencyAttribute = DECENT!Attribute.allInstances().select(a|a.name = "Frequency").first();
  var FrequencyLowerBoundAttribute = DECENT!Attribute.allInstances().select(a|a.name = "FrequencyLowerBound").first();
  var FrequencyUpperBoundAttribute = DECENT!Attribute.allInstances().select(a|a.name = "FrequencyUpperBound").first();
  var FrequencyAverageAttribute = DECENT!Attribute.allInstances().select(a|a.name = "FrequencyAverage").first();


  //TODO: other temporal dimensions such as cause-fix time, agent time, bug lifetime vs fragment lifetime, etc.
  ("Adding temporal characteristics...").println();
  for (a in DECENT!Artifact.allInstances().select(a|a.states.size > 0)) {
  	
  	("..."+a.name).println();
  	//TODO: may need to convert to days already here at the expense of flexibility downstream
  	//- alternatively, this can be generalized so that the same can be calculated based on hits for other artifacts
  	var sortedStates = a.states.sortBy(s|s.fromActivity.first().date.time);
  	var timeCreated = sortedStates.first().fromActivity.first().date.time;
  	var lifespan =  sortedStates.last().fromActivity.first().date.time - timeCreated;
  	var revisions = 0;
  	var previousStateTime = timeCreated;
  	var absoluteTime = new Sequence;
  	var relativeTime = new Sequence;
  	var distanceTime = new Sequence;
  	var resolution = 60*1000;//minutes
  	for (s in sortedStates) {
	 	for (a in attributes.keySet()) {
			s.values.removeAll(s.values.select(v|v.ofAttribute.name = a));
		}
  		//TODO: add deltas
  		//TODO: technically lifespan does not need to be included
  		//TODO: difference can also be inferred from age delta
  		//TODO: the interesting part would be the deltas in the 
  		//      frequency as shifting gears between faster and 
  		//      slower speed occurs
  		revisions = revisions + 1;
  		s.addValue(RevisionsAttribute, revisions.asDouble());
  		s.addValue(LifespanAttribute, lifespan.asDouble()/resolution);
  		s.addValue(AgeAttribute, (s.fromActivity.first().date.time - timeCreated).asDouble()/resolution);
  		s.addValue(DistanceAttribute, (s.fromActivity.first().date.time - previousStateTime).asDouble()/resolution);
  		s.addValue(FrequencyAttribute, ((revisions.asDouble()-1)/((s.fromActivity.first().date.time - timeCreated).asDouble()/resolution)).asDouble());
  		s.addValue(FrequencyLowerBoundAttribute, ((revisions.asDouble()-1)/(lifespan.asDouble()/resolution)).asDouble());
  		s.addValue(FrequencyUpperBoundAttribute, ((revisions.asDouble()-1)/1).asDouble());
  		s.addValue(FrequencyAverageAttribute, ((sortedStates.size().asDouble()-1)/(lifespan.asDouble()/resolution)).asDouble());

  		absoluteTime.add(s.fromActivity.first().date.time.asDouble()/resolution);
  		s.addDoubleCollectionValue(AbsoluteTimeAttribute, absoluteTime);
  		s.addValue(AbsoluteTimeVarianceAttribute, absoluteTime.getVariance());

		relativeTime.add((s.fromActivity.first().date.time - timeCreated).asDouble()/resolution);
  		s.addDoubleCollectionValue(RelativeTimeAttribute, relativeTime);
		s.addValue(RelativeTimeVarianceAttribute, relativeTime.getVariance());
		
		distanceTime.add((s.fromActivity.first().date.time - previousStateTime).asDouble()/resolution);
  		s.addDoubleCollectionValue(DistanceTimeAttribute, distanceTime);
		s.addValue(DistanceTimeVarianceAttribute, distanceTime.getVariance());
  		
  		previousStateTime = s.fromActivity.first().date.time;
  	}
  }

  Model.content.add("temporal2decent3");
  