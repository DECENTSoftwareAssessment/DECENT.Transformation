pre {
  //Some initialization
  "Running famix2decent3".println();
  ("DECENT States: "+DECENT!State.allInstances().size()).println();
  var Model = DECENT!Model.allInstances().first();
  
  var ClassArtifactType = DECENT!ArtifactType.allInstances().select(t|t.name = "Class").first();
  var MethodArtifactType = DECENT!ArtifactType.allInstances().select(t|t.name = "Method").first();
  var FunctionArtifactType = DECENT!ArtifactType.allInstances().select(t|t.name = "Function").first();
  var ModuleArtifactType = DECENT!ArtifactType.allInstances().select(t|t.name = "Module").first();
  var FileAnchorAttribute = DECENT!Attribute.allInstances().select(t|t.name = "FileAnchor").first();
  var FilePathAttribute = DECENT!Attribute.allInstances().select(t|t.name = "FilePath").first();
  
  
  var firstClass = FAMIX!Class.allInstances().first();
  ("FAMIX Classes in "+firstClass.revisionId + ": "+FAMIX!Class.allInstances().size()).println();
  var statesInRevision = DECENT!State.allInstances().select(s|s.ID = firstClass.revisionId);
  ("DECENT States in "+firstClass.revisionId + ": "+statesInRevision.size()).println();
  for (s in statesInRevision) {
    ("  Changed state of " + s.values.select(v|v.ofAttribute = FilePathAttribute).first().stringContent).println();
  }
/*
  for (c in FAMIX!Class.allInstances()) {
    ("  Class "+c.name + " in "+c.sourceAnchor_IN_FileAnchor.fileName).println();
  }
*/  
}

//TODO: figure out type specification for content
//TODO: copied from mg2decent3
operation DECENT!State addValue(attribute : DECENT!Attribute, content, stringContent : String) : DECENT!Value {
    var value : new DECENT!Value;
    value.name = attribute.name;
    value.content = content;
    value.stringContent = stringContent;
    self.values.add(value);
    value.ofAttribute = attribute;
    self.artifact.attributes.add(attribute);
    attribute.artifactTypes.add(self.artifact.type);
    return value;
}

operation DECENT!Activity addDelta(attribute : DECENT!Attribute) : DECENT!Delta {
    return self.addDelta(attribute, self.targetState.values.select(v|v.ofAttribute = attribute).first());
}


operation DECENT!Activity addDelta(attribute : DECENT!Attribute, value : DECENT!Value) : DECENT!Delta {
    var delta : new DECENT!Delta;
    delta.onAttribute = attribute;
    delta.targetValue = value;
    if (self.state.isDefined()){
        delta.value = self.state.values.select(v|v.ofAttribute = attribute).first();
        delta.change = delta.targetValue.content - delta.value.content;
    } else {
        delta.change = delta.targetValue.content;
    }
    self.deltas.add(delta);
    return delta;
}

operation DECENT!State mapAnchoredElement(c : FAMIX!AnchoredElement, artifactType : DECENT!ArtifactType) {
    ("Transforming "+artifactType.name+" " +c.name +" at revision "+c.revisionId).println();

    var fileName = c.sourceAnchor_IN_FileAnchor.fileName;
    //("  File Anchor at "+fileName).println();
    //TODO: add backout strategy in case content already exists
    var candidateParentStates = DECENT!State.allInstances().select(s|s.ID = c.revisionId and s.values.get(0).stringContent = fileName);
    //("    Candidate Parent States Count: "+candidateParentStates.size()).println();
    //TODO: what if more than one?
    var parent = candidateParentStates.first().artifact;
    //("      Candidate Parent Artifact: "+parent.name).println();
    var candidateArtifacts = parent.children.select(child|child.name = c.name and child.type = artifactType);
    var artifact = null;
    if (candidateArtifacts.size() > 0) {
        //("      Candidate Artifacts: "+candidateArtifacts.size()).println();
        //TODO: what if more than one?
        artifact = candidateArtifacts.first();
    } else {
        artifact = new DECENT!Artifact;
        artifact.name = c.name;
        artifact.type = artifactType;
        artifact.parent = parent;
    }
    
    var lastState = null; //naive approach
    if (artifact.states.size() > 0) {
        lastState = artifact.states.last();
        self.previous.add(lastState);
    }

    self.name = candidateParentStates.first().name;
    self.ID = c.revisionId;
    artifact.states.add(self);

    self.addValue(FileAnchorAttribute, null, c.sourceAnchor_IN_FileAnchor.fileName+":"+c.sourceAnchor_IN_FileAnchor.startLine+":"+c.sourceAnchor_IN_FileAnchor.endLine);

    //TODO: keep in mind the parent states may be more than one
    var activity = new DECENT!Activity;
    activity.state = lastState;            
    activity.targetState = self;
    //TODO: need to properly select corresponding parent activity, this is only the naive approach
    var parentArtifactActivity = candidateParentStates.first().fromActivity.first();
    activity.date = parentArtifactActivity.date;
    activity.type = parentArtifactActivity.type;
    activity.agent = parentArtifactActivity.agent;
    
    for (attr in c.eClass().getEAllAttributes()) {
        var attribute = DECENT!Attribute.allInstances().
            select(a|a.name = attr.getName()).first(); 
        if (not attribute.isDefined()){
            attribute = new DECENT!Attribute;
            attribute.name = attr.getName();
            
            if (Model.attributePool.attributes.select(a|a.name = attr.getName()).size() = 0) {
                Model.attributePool.attributes.add(attribute);
            }
            attribute.artifactTypes.add(artifactType);
        }
        //TODO: needs to be checked when using multiple revisions to avoid adding multiple instances
        //OR: try and see whether the "unique" takes care of that => doesn't seem to be the case'
        if (artifact.attributes.select(a|a.name = attr.getName()).size() = 0) {
            artifact.attributes.add(attribute);
        }
        
        if ((attr.getEAttributeType().getName() == "EDouble")) {
            self.addValue(attribute, c.eGet(attr),null);
            
            //updated approch for v3
            activity.addDelta(attribute);
            
            //TODO: again naive approach
            /*
            var d : new DECENT!Delta;
            d.activity = activity;
            d.onAttribute = attribute;
            */
        }
    }
    
}

rule Class2State
    transform c : FAMIX!Class 
    to s : DECENT!State {
    
    guard : c.sourceAnchor_IN_FileAnchor.fileName <> "_unknown_path" and DECENT!State.allInstances().select(s|s.ID = c.revisionId and s.values.get(0).stringContent = c.sourceAnchor_IN_FileAnchor.fileName).size() > 0

    //("Transforming class "+c.name).println();
    
    s.mapAnchoredElement(c, ClassArtifactType);
    c.~done = true;
    (FAMIX!Class.allInstances().select(c|c.~done == true).size()+"/"+FAMIX!Class.allInstances().select(c|c.sourceAnchor_IN_FileAnchor.fileName <> "_unknown_path").size() + " done").println();

    //moved to extracted operation
/*    
    var fileName = c.sourceAnchor_IN_FileAnchor.fileName;
    ("  File Anchor at "+fileName).println();
    //TODO: add backout strategy in case content already exists
    //TODO: deal with unresolved and unmapped elements
    //TODO: simplify
    if (fileName <> "_unknown_path") {
        var candidateParentStates = DECENT!State.allInstances().select(s|s.ID = c.revisionId and s.values.get(0).stringContent = fileName);
        ("    Candidate Parent States Count: "+candidateParentStates.size()).println();
        if (candidateParentStates.size() > 0) {
            var parent = candidateParentStates.first().artifact;
            ("      Candidate Parent Artifact: "+parent.name).println();
            var candidateArtifacts = parent.children.select(child|child.name = c.name);
            var artifact = null;
            if (candidateArtifacts.size() > 0) {
                //TODO: what if more than one?
                artifact = candidateArtifacts.first();
            } else {
                artifact = new DECENT!Artifact;
                artifact.name = c.name;
                artifact.type = ClassArtifactType;
                artifact.parent = parent;
            }
            s.name = candidateParentStates.first().name;
            s.ID = c.revisionId;
            artifact.states.add(s);

            s.addValue(FileAnchorAttribute, null, c.sourceAnchor_IN_FileAnchor.fileName+":"+c.sourceAnchor_IN_FileAnchor.startLine+":"+c.sourceAnchor_IN_FileAnchor.endLine);
            
            for (attr in c.eClass().getEAllAttributes()) {
		        var attribute = DECENT!Attribute.allInstances().
		            select(a|a.name = attr.getName()).first(); 
		        if (not attribute.isDefined()){
		            attribute = new DECENT!Attribute;
		            attribute.name = attr.getName();
		            
		            if (Model.attributePool.attributes.select(a|a.name = attr.getName()).size() = 0) {
		                Model.attributePool.attributes.add(attribute);
		            }
		            attribute.artifactTypes.add(ClassArtifactType);
		        }
                //TODO: needs to be checked when using multiple revisions to avoid adding multiple instances
                //OR: try and see whether the "unique" takes care of that => doesn't seem to be the case'
		        if (artifact.attributes.select(a|a.name = attr.getName()).size() = 0) {
		            artifact.attributes.add(attribute);
		        }
		        
		        if ((attr.getEAttributeType().getName() == "EDouble")) {
		            s.addValue(attribute, c.eGet(attr),null);
		            //TODO: add activities and deltas
		        }
		        
            }
            
        }

    }
*/
}

rule Module2State 
    transform m : FAMIX!Module 
    to s : DECENT!State {
    guard {
        var parentPackageName = m.parentPackage_IN_Package.first().name;
        var modulePath = m.name;
        if (parentPackageName.length() > 0) {
            modulePath = parentPackageName.substring(1)+"/"+m.name;
        }
        return m.name <> "_unknown_file" and DECENT!State.allInstances().select(s|s.ID = m.revisionId and s.values.get(0).stringContent = modulePath).size() > 0; 
    }

    //("Transforming module "+m.name).println();
    //create a temparary anchor
    var anchor : new FAMIX!FileAnchor;
    anchor.revisionId = m.revisionId;

    var parentPackageName = m.parentPackage_IN_Package.first().name;
    var modulePath = m.name;
    if (parentPackageName.length() > 0) {
        modulePath = parentPackageName.substring(1)+"/"+m.name;
    }

    anchor.fileName = modulePath;
    //TODO: add start and endlines from file
    anchor.anchoredElement = m;
    s.mapAnchoredElement(m, ModuleArtifactType);

}


rule Function2State 
    transform f : FAMIX!Function 
    to s : DECENT!State {
    guard : f.sourceAnchor_IN_FileAnchor.fileName <> "_unknown_path" and DECENT!State.allInstances().select(s|s.ID = f.revisionId and s.values.get(0).stringContent = f.sourceAnchor_IN_FileAnchor.fileName).size() > 0

    ("Transforming function "+f.name).println();
    s.mapAnchoredElement(f, FunctionArtifactType);

    //TODO: with regard to methods and functions, these need to be filtered based on whether they are affected by an activity 
    //(via hunks/hits algorithm)
}

rule Method2State 
    transform m : FAMIX!Method 
    to s : DECENT!State {
    //SOOOOOOOOOO..... class definitions are typically within h files, while method definitinos are within cpp files
    //the whole situation is a lot more messed up than that, but this is the gist of it
    //which makes the case for direct artifact containment next to impossible
    //instead a different relationship will be necessary
    //as for transformation, it should be based solely on file anchors and then this relationship should be reestablished


    //TODO: also note that if the class is attached to the header and the header is not 
    //modified this will essentially break everything since there will be no states even for methods
    //as the containing classes will not be mapped either
    //THUS treat them separately, check for discrepancies and report them (or deal with them somehow) 
    //WHICH also means that the transformations shall be mostly very similar based on the file anchors

    guard : m.sourceAnchor_IN_FileAnchor.fileName <> "_unknown_path" and DECENT!State.allInstances().select(s|s.ID = m.revisionId and s.values.get(0).stringContent = m.sourceAnchor_IN_FileAnchor.fileName).size() > 0

    //("Transforming method "+m.name).println();
    s.mapAnchoredElement(m, MethodArtifactType);

    m.~done = true;
    (FAMIX!Method.allInstances().select(m|m.~done == true).size()+"/"+FAMIX!Method.allInstances().select(m|m.sourceAnchor_IN_FileAnchor.fileName <> "_unknown_path").size() + " done").println();


    //TODO: clean up legacy code based on incorrect assumptions
/*
    var fileName = m.sourceAnchor_IN_FileAnchor.fileName;
    ("  File Anchor at "+fileName).println();

	if (fileName <> "_unknown_path") {
	    //TODO: abstract and refactor, mostly identical to Class2State    
	    var parentState = m.parentType_IN_Class.first().equivalent();
	    //TODO: for some reason one class state is not assigned to corresponding artifact
	    //check for commit 11, class CLArgBase and method set
	    //OK, not created since parent file was not modified and the corresponding state was not found
	    //it shold be handled in a similar way here as well
	    //BUT the parent state shouldn't exist either in this case since it is not valid
	    //=> set a guard?'
	    ("Parent "+m.parentType_IN_Class.first()).println();
	    ("Parent "+parentState.isDefined()).println();
	    ("Parent "+parentState.artifact).println();
	    var candidateArtifacts = parentState.artifact.children.select(a|a.name = m.name);
	    ("Candidate artifacts "+candidateArtifacts.size()).println();
	    var artifact = null;
	    if (candidateArtifacts.size() > 0) {
	        //TODO: what if more than one?
	        artifact = candidateArtifacts.first; 
	    } else {
	        artifact = new DECENT!Artifact;
	        artifact.name = m.name;
	        artifact.type = MethodArtifactType;
	        artifact.parent = parentState.artifact;
	    }
	    s.name = parentState.name;
	    s.ID = m.revisionId;
	    artifact.states.add(s);
	    
	    s.addValue(FileAnchorAttribute, null, m.sourceAnchor_IN_FileAnchor.fileName+":"+m.sourceAnchor_IN_FileAnchor.startLine+":"+m.sourceAnchor_IN_FileAnchor.endLine);
	    
	    for (attr in m.eClass().getEAllAttributes()) {
	        var attribute = DECENT!Attribute.allInstances().
	            select(a|a.name = attr.getName()).first(); 
	        if (not attribute.isDefined()){
	            attribute = new DECENT!Attribute;
	            attribute.name = attr.getName();
	            
	            if (Model.attributePool.attributes.select(a|a.name = attr.getName()).size() = 0) {
	                Model.attributePool.attributes.add(attribute);
	            }
	            attribute.artifactTypes.add(MethodArtifactType);
	        }
	        //TODO: see also concerns below
	        //TODO: needs to be checked when using multiple revisions to avoid adding multiple instances
	        //OR: try and see whether the "unique" takes care of that => doesn't seem to be the case'
	        if (artifact.attributes.select(a|a.name = attr.getName()).size() = 0) {
	            artifact.attributes.add(attribute);
	        }
	        
	        if ((attr.getEAttributeType().getName() == "EDouble")) {
	            s.addValue(attribute, m.eGet(attr),null);
	            //TODO: add activities and deltas
	        }
	        
	    }
	    
    }   
*/
   //TODO: even older legacy code
    /************************* methods ****************************/
/*    
    for (m in c.Method_OF_parentType) {
        ("  Transforming method "+m.name).println();
        var am : new DECENT!Artifact;
        am.name = m.name;
        am.type = MethodArtifactType;
        am.parent = ac;
        
        var ams = new DECENT!State;
        ams.name = "head";

        //TODO: quite a bit of redundancy with attribute handling, consider revision
        var v : new DECENT!Value;
        v.stringContent = m.sourceAnchor_IN_FileAnchor.fileName;
        v.ofAttribute = FileAnchorAttribute;
        am.attributes.add(FileAnchorAttribute);
        FileAnchorAttribute.artifactTypes.add(MethodArtifactType);
        ams.values.add(v);
        
        ams.ID = new Native("java.math.BigInteger")(m.revisionId.asString());
        am.states.add(ams);
        
        for (attr in m.eClass().getEAllAttributes()) {
            //("  Transforming attribute "+attr.getName()).println();
            //("    type "+attr.getEAttributeType().getName()).println();
            //("    value "+m.eGet(attr)).println();
            
            var attribute = DECENT!Attribute.allInstances().
                select(a|a.name = attr.getName()).first;
            if (not attribute.isDefined()){
                //("  Attribute not defined. Initializing "+attribute+" ").println();
                attribute = new DECENT!Attribute;
                attribute.name = attr.getName();

                //if (not Model.attributePool.attributes.select(a|a.name = attr.getName()).first().isDefined()) {
                    Model.attributePool.attributes.add(attribute);
                //}
        
                attribute.artifactTypes.add(MethodArtifactType);
                //("  Attribute not defined. Initialized "+attribute.name+" ").println();
            }
            //TODO: needs to be checked when using multiple revisions to avoid adding multiple instances
            //OR: try and see whether the "unique" takes care of that
            //if (not am.attributes.allInstances().select(a|a.name = attr.getName()).first().isDefined()) {
               am.attributes.add(attribute);
            //}
    
            
            if ((attr.getEAttributeType().getName() == "EDouble")) {
                var amv = new DECENT!Value;
                amv.content = m.eGet(attr);
                amv.ofAttribute = attribute;
                //TODO: add attribute linking
                
                ams.values.add(amv);
            }
        }
    }
*/    
}